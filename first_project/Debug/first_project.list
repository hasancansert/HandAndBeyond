
first_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007048  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af0  08007248  08007248  00017248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d38  08008d38  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d40  08008d40  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d40  08008d40  00018d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d44  08008d44  00018d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  08008db0  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  08008e50  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000838  200001a8  08008ef0  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200009e0  08008ef0  000209e0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00013501  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002921  00000000  00000000  0003371a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000ee8  00000000  00000000  00036040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b6f  00000000  00000000  00036f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a292  00000000  00000000  00037a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00012993  00000000  00000000  00061d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00101bc3  00000000  00000000  000746bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000049a8  00000000  00000000  00176280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  0017ac28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a8 	.word	0x200001a8
 800021c:	00000000 	.word	0x00000000
 8000220:	08007230 	.word	0x08007230

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ac 	.word	0x200001ac
 800023c:	08007230 	.word	0x08007230

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <_write>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e009      	b.n	8000654 <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60ba      	str	r2, [r7, #8]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffc7 	bl	80005dc <ITM_SendChar>
	for(i = 0; i < len; i++)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf1      	blt.n	8000640 <_write+0x16>
	}
	return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	ed2d 8b04 	vpush	{d8-d9}
 800066e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	const short Fs = 1000;		// Sampling frequency(Hz)
 8000674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000678:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232
	//const int 	Ts = 1e6/Fs;	// Sampling period (us)
	const int 	Ts = 1e3/Fs;	// Sampling period (us)
 800067c:	f9b7 3232 	ldrsh.w	r3, [r7, #562]	; 0x232
 8000680:	ee07 3a90 	vmov	s15, r3
 8000684:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000688:	ed9f 5bfb 	vldr	d5, [pc, #1004]	; 8000a78 <main+0x410>
 800068c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000690:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000694:	ee17 3a90 	vmov	r3, s15
 8000698:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	//ADC configuration
	const uint8_t adc_bits = 10; // The resolution of your MCU's ADC
 800069c:	230a      	movs	r3, #10
 800069e:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b
	const uint8_t default_bits = 10; // Don't change!
 80006a2:	230a      	movs	r3, #10
 80006a4:	f887 322a 	strb.w	r3, [r7, #554]	; 0x22a
	const float vref = 5; // Reference voltage of MCU's ADC (V)
 80006a8:	4bf7      	ldr	r3, [pc, #988]	; (8000a88 <main+0x420>)
 80006aa:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	const float default_vref = 5 ;// Default reference voltage of the Arduino Uno (V) Don't Change
 80006ae:	4bf6      	ldr	r3, [pc, #984]	; (8000a88 <main+0x420>)
 80006b0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	const float adc_scale = pow(2,default_bits-adc_bits)*vref/default_vref; // Scales the input signal
 80006b4:	f897 222a 	ldrb.w	r2, [r7, #554]	; 0x22a
 80006b8:	f897 322b 	ldrb.w	r3, [r7, #555]	; 0x22b
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006c6:	eeb0 1b47 	vmov.f64	d1, d7
 80006ca:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80006ce:	f005 fd0b 	bl	80060e8 <pow>
 80006d2:	eeb0 6b40 	vmov.f64	d6, d0
 80006d6:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 80006da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006de:	ee26 5b07 	vmul.f64	d5, d6, d7
 80006e2:	edd7 7a88 	vldr	s15, [r7, #544]	; 0x220
 80006e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80006ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006f2:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
	const float emg_offset = 1.45; // DC offset of the Mam Sense Board EMG output. (V)
 80006f6:	4be5      	ldr	r3, [pc, #916]	; (8000a8c <main+0x424>)
 80006f8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	const float sig_offset = round(pow(2,default_bits)*emg_offset/default_vref);
 80006fc:	f897 322a 	ldrb.w	r3, [r7, #554]	; 0x22a
 8000700:	ee07 3a90 	vmov	s15, r3
 8000704:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000708:	eeb0 1b47 	vmov.f64	d1, d7
 800070c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000710:	f005 fcea 	bl	80060e8 <pow>
 8000714:	eeb0 6b40 	vmov.f64	d6, d0
 8000718:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 800071c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000720:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000724:	edd7 7a88 	vldr	s15, [r7, #544]	; 0x220
 8000728:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800072c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000730:	eeb0 0b45 	vmov.f64	d0, d5
 8000734:	f005 ff28 	bl	8006588 <round>
 8000738:	eeb0 7b40 	vmov.f64	d7, d0
 800073c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000740:	edc7 7a85 	vstr	s15, [r7, #532]	; 0x214

	const short f0 = 50;      // Cut-off frequency of the notch filter(Hz).
 8000744:	2332      	movs	r3, #50	; 0x32
 8000746:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
	const short f1 = 150;     // Second cut-off frequency(Hz). (Must be integer multiple of f0)
 800074a:	2396      	movs	r3, #150	; 0x96
 800074c:	f8a7 3210 	strh.w	r3, [r7, #528]	; 0x210
	const float w0 = 2*3.1416*f0/Fs;  // Digital cut-off frequency (rad/sample)
 8000750:	f9b7 3212 	ldrsh.w	r3, [r7, #530]	; 0x212
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800075c:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 8000a80 <main+0x418>
 8000760:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000764:	f9b7 3232 	ldrsh.w	r3, [r7, #562]	; 0x232
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000770:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000774:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000778:	edc7 7a83 	vstr	s15, [r7, #524]	; 0x20c
	const float w1 = 2*3.1416*f1/Fs;  //
 800077c:	f9b7 3210 	ldrsh.w	r3, [r7, #528]	; 0x210
 8000780:	ee07 3a90 	vmov	s15, r3
 8000784:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000788:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8000a80 <main+0x418>
 800078c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000790:	f9b7 3232 	ldrsh.w	r3, [r7, #562]	; 0x232
 8000794:	ee07 3a90 	vmov	s15, r3
 8000798:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800079c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007a4:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208
	const float p = 0.95;     //Quailty factor. Must be between 0.8 and 0.995. Default value: 0.95
 80007a8:	4bb9      	ldr	r3, [pc, #740]	; (8000a90 <main+0x428>)
 80007aa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

	const float mag = (1 -2*cos(w0) +1)/(1 -2*p*cos(w0) + p*p); // Find magnitude of the filter at w=0 to set the DC gain to 1;
 80007ae:	edd7 7a83 	vldr	s15, [r7, #524]	; 0x20c
 80007b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007b6:	eeb0 0b47 	vmov.f64	d0, d7
 80007ba:	f005 fc15 	bl	8005fe8 <cos>
 80007be:	eeb0 7b40 	vmov.f64	d7, d0
 80007c2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80007c6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80007ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007ce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80007d2:	ee37 8b06 	vadd.f64	d8, d7, d6
 80007d6:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 80007da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007de:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80007e2:	edd7 7a83 	vldr	s15, [r7, #524]	; 0x20c
 80007e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ea:	eeb0 0b47 	vmov.f64	d0, d7
 80007ee:	f005 fbfb 	bl	8005fe8 <cos>
 80007f2:	eeb0 7b40 	vmov.f64	d7, d0
 80007f6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80007fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80007fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000802:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8000806:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800080a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800080e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000812:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000816:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800081a:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200

	//Create the coefficient matrices for notch filter at f0
	const float num[3] = {1/mag,  -2*cos(w0)/mag, 1/mag};
 800081e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000822:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
 8000826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800082a:	edc7 7a77 	vstr	s15, [r7, #476]	; 0x1dc
 800082e:	edd7 7a83 	vldr	s15, [r7, #524]	; 0x20c
 8000832:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000836:	eeb0 0b47 	vmov.f64	d0, d7
 800083a:	f005 fbd5 	bl	8005fe8 <cos>
 800083e:	eeb0 7b40 	vmov.f64	d7, d0
 8000842:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000846:	ee27 5b06 	vmul.f64	d5, d7, d6
 800084a:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 800084e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000852:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000856:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800085a:	edc7 7a78 	vstr	s15, [r7, #480]	; 0x1e0
 800085e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000862:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
 8000866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800086a:	edc7 7a79 	vstr	s15, [r7, #484]	; 0x1e4
	const float den[3] = {1, -2*p*cos(w0),  p*p};
 800086e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000872:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8000876:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 800087a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800087e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000882:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000886:	edd7 7a83 	vldr	s15, [r7, #524]	; 0x20c
 800088a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800088e:	eeb0 0b47 	vmov.f64	d0, d7
 8000892:	f005 fba9 	bl	8005fe8 <cos>
 8000896:	eeb0 7b40 	vmov.f64	d7, d0
 800089a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800089e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008a2:	edc7 7a75 	vstr	s15, [r7, #468]	; 0x1d4
 80008a6:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 80008aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80008ae:	edc7 7a76 	vstr	s15, [r7, #472]	; 0x1d8

	//Optional dual frequency notch filter. Comment this code block out to use dual frequency notch filter
	// Create the coefficient matrices for notch filter at f1
	const float mag2 = (1 -2*cos(w1) +1)/(1 -2*p*cos(w1) + p*p);
 80008b2:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 80008b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ba:	eeb0 0b47 	vmov.f64	d0, d7
 80008be:	f005 fb93 	bl	8005fe8 <cos>
 80008c2:	eeb0 7b40 	vmov.f64	d7, d0
 80008c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80008ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80008ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80008d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80008d6:	ee37 8b06 	vadd.f64	d8, d7, d6
 80008da:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 80008de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008e2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80008e6:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 80008ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ee:	eeb0 0b47 	vmov.f64	d0, d7
 80008f2:	f005 fb79 	bl	8005fe8 <cos>
 80008f6:	eeb0 7b40 	vmov.f64	d7, d0
 80008fa:	ee29 7b07 	vmul.f64	d7, d9, d7
 80008fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000902:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000906:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 800090a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800090e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000912:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000916:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800091a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800091e:	edc7 7a7f 	vstr	s15, [r7, #508]	; 0x1fc
	const float num2[3] = {1/mag2,  -2*cos(w1)/mag2, 1/mag2};
 8000922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000926:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 800092a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800092e:	edc7 7a71 	vstr	s15, [r7, #452]	; 0x1c4
 8000932:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8000936:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800093a:	eeb0 0b47 	vmov.f64	d0, d7
 800093e:	f005 fb53 	bl	8005fe8 <cos>
 8000942:	eeb0 7b40 	vmov.f64	d7, d0
 8000946:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800094a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800094e:	edd7 7a7f 	vldr	s15, [r7, #508]	; 0x1fc
 8000952:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000956:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800095a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800095e:	edc7 7a72 	vstr	s15, [r7, #456]	; 0x1c8
 8000962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000966:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 800096a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800096e:	edc7 7a73 	vstr	s15, [r7, #460]	; 0x1cc
	const float den2[3] = {1, -2*p*cos(w1),  p*p};
 8000972:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000976:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800097a:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 800097e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000982:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000986:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800098a:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 800098e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000992:	eeb0 0b47 	vmov.f64	d0, d7
 8000996:	f005 fb27 	bl	8005fe8 <cos>
 800099a:	eeb0 7b40 	vmov.f64	d7, d0
 800099e:	ee28 7b07 	vmul.f64	d7, d8, d7
 80009a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a6:	edc7 7a6f 	vstr	s15, [r7, #444]	; 0x1bc
 80009aa:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 80009ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80009b2:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0

	//Convolve two filters to obtain dual notch filter at frequencies f0 and f1
	const float num3[5] = {num[0]*num2[0], num2[0]*num[1]+num2[1]*num[0], num2[0]*num[2] + num2[1]*num[1] + num2[2]*num[0], num2[1]*num[2]+num2[2]*num[1], num2[2]*num[2]};
 80009b6:	ed97 7a77 	vldr	s14, [r7, #476]	; 0x1dc
 80009ba:	edd7 7a71 	vldr	s15, [r7, #452]	; 0x1c4
 80009be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c2:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
 80009c6:	ed97 7a71 	vldr	s14, [r7, #452]	; 0x1c4
 80009ca:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 80009ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009d2:	edd7 6a72 	vldr	s13, [r7, #456]	; 0x1c8
 80009d6:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 80009da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009e2:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
 80009e6:	ed97 7a71 	vldr	s14, [r7, #452]	; 0x1c4
 80009ea:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 80009ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009f2:	edd7 6a72 	vldr	s13, [r7, #456]	; 0x1c8
 80009f6:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 80009fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a02:	edd7 6a73 	vldr	s13, [r7, #460]	; 0x1cc
 8000a06:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 8000a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a12:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
 8000a16:	ed97 7a72 	vldr	s14, [r7, #456]	; 0x1c8
 8000a1a:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 8000a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a22:	edd7 6a73 	vldr	s13, [r7, #460]	; 0x1cc
 8000a26:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 8000a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a32:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
 8000a36:	ed97 7a73 	vldr	s14, [r7, #460]	; 0x1cc
 8000a3a:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 8000a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a42:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4
	const float den3[5] = {1, den2[0]*den[1]+den2[1]*den[0], den2[0]*den[2] + den2[1]*den[1] + den2[2]*den[0], den2[1]*den[2]+den2[2]*den[1], den2[2]*den[2]};
 8000a46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000a4a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8000a4e:	ed97 7a6e 	vldr	s14, [r7, #440]	; 0x1b8
 8000a52:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 8000a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a5a:	edd7 6a6f 	vldr	s13, [r7, #444]	; 0x1bc
 8000a5e:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8000a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a6a:	edc7 7a65 	vstr	s15, [r7, #404]	; 0x194
 8000a6e:	ed97 7a6e 	vldr	s14, [r7, #440]	; 0x1b8
 8000a72:	e00f      	b.n	8000a94 <main+0x42c>
 8000a74:	f3af 8000 	nop.w
 8000a78:	00000000 	.word	0x00000000
 8000a7c:	408f4000 	.word	0x408f4000
 8000a80:	2e48e8a7 	.word	0x2e48e8a7
 8000a84:	401921ff 	.word	0x401921ff
 8000a88:	40a00000 	.word	0x40a00000
 8000a8c:	3fb9999a 	.word	0x3fb9999a
 8000a90:	3f733333 	.word	0x3f733333
 8000a94:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8000a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a9c:	edd7 6a6f 	vldr	s13, [r7, #444]	; 0x1bc
 8000aa0:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 8000aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000aac:	edd7 6a70 	vldr	s13, [r7, #448]	; 0x1c0
 8000ab0:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8000ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000abc:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
 8000ac0:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 8000ac4:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8000ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000acc:	edd7 6a70 	vldr	s13, [r7, #448]	; 0x1c0
 8000ad0:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 8000ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000adc:	edc7 7a67 	vstr	s15, [r7, #412]	; 0x19c
 8000ae0:	ed97 7a70 	vldr	s14, [r7, #448]	; 0x1c0
 8000ae4:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8000ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aec:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0

	unsigned long start_time=0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	unsigned long current_time=0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	short raw[100] =  {0};
 8000afc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000b00:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000b04:	4618      	mov	r0, r3
 8000b06:	23c8      	movs	r3, #200	; 0xc8
 8000b08:	461a      	mov	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f004 fce2 	bl	80054d4 <memset>
	short emg[100] = {0};
 8000b10:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000b14:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000b18:	4618      	mov	r0, r3
 8000b1a:	23c8      	movs	r3, #200	; 0xc8
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f004 fcd8 	bl	80054d4 <memset>
	unsigned long count=4;
 8000b24:	2304      	movs	r3, #4
 8000b26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

	float curr_avg,prev_avg; // Variables to store current and previous average
	const float alpha = 0.1;  // Moving average coefficient. If hand movements are not detected change this number.
 8000b2a:	4bc5      	ldr	r3, [pc, #788]	; (8000e40 <main+0x7d8>)
 8000b2c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	const float prev_alpha = 1 - alpha;
 8000b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b34:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 8000b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b3c:	edc7 7a7b 	vstr	s15, [r7, #492]	; 0x1ec
	const int avg_thrsh = 35; //If noise is detected as hand movements increase this threshold. If hand movements are not detected decrease it.
 8000b40:	2323      	movs	r3, #35	; 0x23
 8000b42:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b46:	f000 fe82 	bl	800184e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4a:	f000 f983 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4e:	f000 faf3 	bl	8001138 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b52:	f000 fa45 	bl	8000fe0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b56:	f000 fa91 	bl	800107c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b5a:	f000 fabf 	bl	80010dc <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000b5e:	f000 f9eb 	bl	8000f38 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello world!\n");
 8000b62:	48b8      	ldr	r0, [pc, #736]	; (8000e44 <main+0x7dc>)
 8000b64:	f004 fbd6 	bl	8005314 <puts>
  start_time = HAL_GetTick();
 8000b68:	f000 fec2 	bl	80018f0 <HAL_GetTick>
 8000b6c:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  current_time = HAL_GetTick();
 8000b70:	f000 febe 	bl	80018f0 <HAL_GetTick>
 8000b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

	  if(current_time - start_time >= Ts)
 8000b78:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8000b7c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000b80:	1ad2      	subs	r2, r2, r3
 8000b82:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d3f2      	bcc.n	8000b70 <main+0x508>
	  {
		  start_time = current_time;
 8000b8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b8e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

		  HAL_ADC_Start(&hadc1);
 8000b92:	48ad      	ldr	r0, [pc, #692]	; (8000e48 <main+0x7e0>)
 8000b94:	f000 ff20 	bl	80019d8 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	48aa      	ldr	r0, [pc, #680]	; (8000e48 <main+0x7e0>)
 8000b9e:	f000 ffe9 	bl	8001b74 <HAL_ADC_PollForConversion>
		  raw[count%100] = round( HAL_ADC_GetValue(&hadc1)*adc_scale-sig_offset);
 8000ba2:	48a9      	ldr	r0, [pc, #676]	; (8000e48 <main+0x7e0>)
 8000ba4:	f001 f871 	bl	8001c8a <HAL_ADC_GetValue>
 8000ba8:	ee07 0a90 	vmov	s15, r0
 8000bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bb0:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 8000bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bb8:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8000bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc4:	eeb0 0b47 	vmov.f64	d0, d7
 8000bc8:	f005 fcde 	bl	8006588 <round>
 8000bcc:	eeb0 7b40 	vmov.f64	d7, d0
 8000bd0:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8000bd4:	4b9d      	ldr	r3, [pc, #628]	; (8000e4c <main+0x7e4>)
 8000bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2164      	movs	r1, #100	; 0x64
 8000bde:	fb01 f303 	mul.w	r3, r1, r3
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000be8:	ee17 2a90 	vmov	r2, s15
 8000bec:	b211      	sxth	r1, r2
 8000bee:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000bf2:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8000bf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  emg[count%100] = round(raw[count%100]*num3[0] + raw[(count-1)%100]*num3[1] + raw[(count-2)%100]*num3[2] + raw[(count-3)%100]*num3[3] + raw[(count-4)%100]*num3[4] - emg[(count-1)%100]*den3[1] - emg[(count-2)%100]*den3[2] - emg[(count-3)%100]*den3[3] - emg[(count-4)%100]*den3[4] );
 8000bfa:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8000bfe:	4b93      	ldr	r3, [pc, #588]	; (8000e4c <main+0x7e4>)
 8000c00:	fba3 1302 	umull	r1, r3, r3, r2
 8000c04:	095b      	lsrs	r3, r3, #5
 8000c06:	2164      	movs	r1, #100	; 0x64
 8000c08:	fb01 f303 	mul.w	r3, r1, r3
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000c12:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8000c16:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c1a:	ee07 3a90 	vmov	s15, r3
 8000c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c22:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 8000c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000c2e:	1e5a      	subs	r2, r3, #1
 8000c30:	4b86      	ldr	r3, [pc, #536]	; (8000e4c <main+0x7e4>)
 8000c32:	fba3 1302 	umull	r1, r3, r3, r2
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2164      	movs	r1, #100	; 0x64
 8000c3a:	fb01 f303 	mul.w	r3, r1, r3
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000c44:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8000c48:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c4c:	ee07 3a90 	vmov	s15, r3
 8000c50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c54:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8000c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c60:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000c64:	1e9a      	subs	r2, r3, #2
 8000c66:	4b79      	ldr	r3, [pc, #484]	; (8000e4c <main+0x7e4>)
 8000c68:	fba3 1302 	umull	r1, r3, r3, r2
 8000c6c:	095b      	lsrs	r3, r3, #5
 8000c6e:	2164      	movs	r1, #100	; 0x64
 8000c70:	fb01 f303 	mul.w	r3, r1, r3
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000c7a:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8000c7e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c82:	ee07 3a90 	vmov	s15, r3
 8000c86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c8a:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 8000c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000c9a:	1eda      	subs	r2, r3, #3
 8000c9c:	4b6b      	ldr	r3, [pc, #428]	; (8000e4c <main+0x7e4>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2164      	movs	r1, #100	; 0x64
 8000ca6:	fb01 f303 	mul.w	r3, r1, r3
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000cb0:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8000cb4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cc0:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8000cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ccc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000cd0:	1f1a      	subs	r2, r3, #4
 8000cd2:	4b5e      	ldr	r3, [pc, #376]	; (8000e4c <main+0x7e4>)
 8000cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8000cd8:	095b      	lsrs	r3, r3, #5
 8000cda:	2164      	movs	r1, #100	; 0x64
 8000cdc:	fb01 f303 	mul.w	r3, r1, r3
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000ce6:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8000cea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000cee:	ee07 3a90 	vmov	s15, r3
 8000cf2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cf6:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 8000cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d06:	1e5a      	subs	r2, r3, #1
 8000d08:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <main+0x7e4>)
 8000d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2164      	movs	r1, #100	; 0x64
 8000d12:	fb01 f303 	mul.w	r3, r1, r3
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000d1c:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8000d20:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d2c:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 8000d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d38:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d3c:	1e9a      	subs	r2, r3, #2
 8000d3e:	4b43      	ldr	r3, [pc, #268]	; (8000e4c <main+0x7e4>)
 8000d40:	fba3 1302 	umull	r1, r3, r3, r2
 8000d44:	095b      	lsrs	r3, r3, #5
 8000d46:	2164      	movs	r1, #100	; 0x64
 8000d48:	fb01 f303 	mul.w	r3, r1, r3
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000d52:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8000d56:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d62:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8000d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d72:	1eda      	subs	r2, r3, #3
 8000d74:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <main+0x7e4>)
 8000d76:	fba3 1302 	umull	r1, r3, r3, r2
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2164      	movs	r1, #100	; 0x64
 8000d7e:	fb01 f303 	mul.w	r3, r1, r3
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000d88:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8000d8c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d90:	ee07 3a90 	vmov	s15, r3
 8000d94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d98:	edd7 7a67 	vldr	s15, [r7, #412]	; 0x19c
 8000d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000da4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000da8:	1f1a      	subs	r2, r3, #4
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <main+0x7e4>)
 8000dac:	fba3 1302 	umull	r1, r3, r3, r2
 8000db0:	095b      	lsrs	r3, r3, #5
 8000db2:	2164      	movs	r1, #100	; 0x64
 8000db4:	fb01 f303 	mul.w	r3, r1, r3
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000dbe:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8000dc2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000dc6:	ee07 3a90 	vmov	s15, r3
 8000dca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dce:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 8000dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dde:	eeb0 0b47 	vmov.f64	d0, d7
 8000de2:	f005 fbd1 	bl	8006588 <round>
 8000de6:	eeb0 7b40 	vmov.f64	d7, d0
 8000dea:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <main+0x7e4>)
 8000df0:	fba3 1302 	umull	r1, r3, r3, r2
 8000df4:	095b      	lsrs	r3, r3, #5
 8000df6:	2164      	movs	r1, #100	; 0x64
 8000df8:	fb01 f303 	mul.w	r3, r1, r3
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e02:	ee17 2a90 	vmov	r2, s15
 8000e06:	b211      	sxth	r1, r2
 8000e08:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000e0c:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8000e10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  printf("%d\n",emg[count%100]);
 8000e14:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <main+0x7e4>)
 8000e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2164      	movs	r1, #100	; 0x64
 8000e22:	fb01 f303 	mul.w	r3, r1, r3
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000e2c:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8000e30:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <main+0x7e8>)
 8000e38:	f004 fa06 	bl	8005248 <iprintf>
	  current_time = HAL_GetTick();
 8000e3c:	e698      	b.n	8000b70 <main+0x508>
 8000e3e:	bf00      	nop
 8000e40:	3dcccccd 	.word	0x3dcccccd
 8000e44:	08007248 	.word	0x08007248
 8000e48:	200001fc 	.word	0x200001fc
 8000e4c:	51eb851f 	.word	0x51eb851f
 8000e50:	08007258 	.word	0x08007258

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b094      	sub	sp, #80	; 0x50
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	2234      	movs	r2, #52	; 0x34
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f004 fb36 	bl	80054d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e78:	f002 f87e 	bl	8002f78 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <SystemClock_Config+0xdc>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a2b      	ldr	r2, [pc, #172]	; (8000f30 <SystemClock_Config+0xdc>)
 8000e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <SystemClock_Config+0xdc>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <SystemClock_Config+0xe0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e9c:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <SystemClock_Config+0xe0>)
 8000e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <SystemClock_Config+0xe0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000eb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ec8:	2360      	movs	r3, #96	; 0x60
 8000eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 f8ab 	bl	8003038 <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ee8:	f000 f9c8 	bl	800127c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000eec:	f002 f854 	bl	8002f98 <HAL_PWREx_EnableOverDrive>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ef6:	f000 f9c1 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	2103      	movs	r1, #3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 fb3c 	bl	8003594 <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f22:	f000 f9ab 	bl	800127c <Error_Handler>
  }
}
 8000f26:	bf00      	nop
 8000f28:	3750      	adds	r7, #80	; 0x50
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f4c:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <MX_ADC1_Init+0xa0>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f7c:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <MX_ADC1_Init+0xa4>)
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f9c:	f000 fcd8 	bl	8001950 <HAL_ADC_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fa6:	f000 f969 	bl	800127c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_ADC1_Init+0x9c>)
 8000fbc:	f000 fe72 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fc6:	f000 f959 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001fc 	.word	0x200001fc
 8000fd8:	40012000 	.word	0x40012000
 8000fdc:	0f000001 	.word	0x0f000001

08000fe0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ETH_Init+0x84>)
 8000fe6:	4a20      	ldr	r2, [pc, #128]	; (8001068 <MX_ETH_Init+0x88>)
 8000fe8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <MX_ETH_Init+0x8c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <MX_ETH_Init+0x8c>)
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_ETH_Init+0x8c>)
 8000ff8:	22e1      	movs	r2, #225	; 0xe1
 8000ffa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_ETH_Init+0x8c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_ETH_Init+0x8c>)
 8001004:	2200      	movs	r2, #0
 8001006:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_ETH_Init+0x8c>)
 800100a:	2200      	movs	r2, #0
 800100c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_ETH_Init+0x84>)
 8001010:	4a16      	ldr	r2, [pc, #88]	; (800106c <MX_ETH_Init+0x8c>)
 8001012:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_ETH_Init+0x84>)
 8001016:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800101a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ETH_Init+0x84>)
 800101e:	4a14      	ldr	r2, [pc, #80]	; (8001070 <MX_ETH_Init+0x90>)
 8001020:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <MX_ETH_Init+0x84>)
 8001024:	4a13      	ldr	r2, [pc, #76]	; (8001074 <MX_ETH_Init+0x94>)
 8001026:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_ETH_Init+0x84>)
 800102a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800102e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_ETH_Init+0x84>)
 8001032:	f001 f96d 	bl	8002310 <HAL_ETH_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800103c:	f000 f91e 	bl	800127c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001040:	2238      	movs	r2, #56	; 0x38
 8001042:	2100      	movs	r1, #0
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_ETH_Init+0x98>)
 8001046:	f004 fa45 	bl	80054d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_ETH_Init+0x98>)
 800104c:	2221      	movs	r2, #33	; 0x21
 800104e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_ETH_Init+0x98>)
 8001052:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001056:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <MX_ETH_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000244 	.word	0x20000244
 8001068:	40028000 	.word	0x40028000
 800106c:	20000884 	.word	0x20000884
 8001070:	20000108 	.word	0x20000108
 8001074:	20000068 	.word	0x20000068
 8001078:	200001c4 	.word	0x200001c4

0800107c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_USART3_UART_Init+0x58>)
 8001082:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <MX_USART3_UART_Init+0x5c>)
 8001084:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_USART3_UART_Init+0x58>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_USART3_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_USART3_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_USART3_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_USART3_UART_Init+0x58>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_USART3_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_USART3_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_USART3_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_USART3_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_USART3_UART_Init+0x58>)
 80010c0:	f003 f8b6 	bl	8004230 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010ca:	f000 f8d7 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200002f4 	.word	0x200002f4
 80010d8:	40004800 	.word	0x40004800

080010dc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ea:	2206      	movs	r2, #6
 80010ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f0:	2202      	movs	r2, #2
 80010f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010fc:	2202      	movs	r2, #2
 80010fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001102:	2201      	movs	r2, #1
 8001104:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001114:	2201      	movs	r2, #1
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001120:	f001 fde1 	bl	8002ce6 <HAL_PCD_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800112a:	f000 f8a7 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000037c 	.word	0x2000037c

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <MX_GPIO_Init+0x134>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a46      	ldr	r2, [pc, #280]	; (800126c <MX_GPIO_Init+0x134>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <MX_GPIO_Init+0x134>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <MX_GPIO_Init+0x134>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a40      	ldr	r2, [pc, #256]	; (800126c <MX_GPIO_Init+0x134>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b3e      	ldr	r3, [pc, #248]	; (800126c <MX_GPIO_Init+0x134>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <MX_GPIO_Init+0x134>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a3a      	ldr	r2, [pc, #232]	; (800126c <MX_GPIO_Init+0x134>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b38      	ldr	r3, [pc, #224]	; (800126c <MX_GPIO_Init+0x134>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b35      	ldr	r3, [pc, #212]	; (800126c <MX_GPIO_Init+0x134>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a34      	ldr	r2, [pc, #208]	; (800126c <MX_GPIO_Init+0x134>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <MX_GPIO_Init+0x134>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <MX_GPIO_Init+0x134>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a2e      	ldr	r2, [pc, #184]	; (800126c <MX_GPIO_Init+0x134>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <MX_GPIO_Init+0x134>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_GPIO_Init+0x134>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a28      	ldr	r2, [pc, #160]	; (800126c <MX_GPIO_Init+0x134>)
 80011cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <MX_GPIO_Init+0x134>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80011e4:	4822      	ldr	r0, [pc, #136]	; (8001270 <MX_GPIO_Init+0x138>)
 80011e6:	f001 fd65 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2140      	movs	r1, #64	; 0x40
 80011ee:	4821      	ldr	r0, [pc, #132]	; (8001274 <MX_GPIO_Init+0x13c>)
 80011f0:	f001 fd60 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	481b      	ldr	r0, [pc, #108]	; (8001278 <MX_GPIO_Init+0x140>)
 800120c:	f001 fba6 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001210:	f244 0381 	movw	r3, #16513	; 0x4081
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_GPIO_Init+0x138>)
 800122a:	f001 fb97 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <MX_GPIO_Init+0x13c>)
 8001246:	f001 fb89 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_GPIO_Init+0x13c>)
 800125e:	f001 fb7d 	bl	800295c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	; 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40020400 	.word	0x40020400
 8001274:	40021800 	.word	0x40021800
 8001278:	40020800 	.word	0x40020800

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_MspInit+0x44>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_MspInit+0x44>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_MspInit+0x44>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x44>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_MspInit+0x44>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_MspInit+0x44>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a15      	ldr	r2, [pc, #84]	; (8001344 <HAL_ADC_MspInit+0x74>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d123      	bne.n	800133a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_ADC_MspInit+0x78>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a14      	ldr	r2, [pc, #80]	; (8001348 <HAL_ADC_MspInit+0x78>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_ADC_MspInit+0x78>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_ADC_MspInit+0x78>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_ADC_MspInit+0x78>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_ADC_MspInit+0x78>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_ADC_MspInit+0x7c>)
 8001336:	f001 fb11 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40012000 	.word	0x40012000
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_ETH_MspInit+0x158>)
 800136e:	4293      	cmp	r3, r2
 8001370:	f040 8096 	bne.w	80014a0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001374:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a4c      	ldr	r2, [pc, #304]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 800137a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
 8001380:	4b4a      	ldr	r3, [pc, #296]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	4b47      	ldr	r3, [pc, #284]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4a46      	ldr	r2, [pc, #280]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 8001392:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001396:	6313      	str	r3, [r2, #48]	; 0x30
 8001398:	4b44      	ldr	r3, [pc, #272]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4b41      	ldr	r3, [pc, #260]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a40      	ldr	r2, [pc, #256]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013bc:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a3a      	ldr	r2, [pc, #232]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	4a34      	ldr	r2, [pc, #208]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6313      	str	r3, [r2, #48]	; 0x30
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	4a2e      	ldr	r2, [pc, #184]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	6313      	str	r3, [r2, #48]	; 0x30
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001404:	4b29      	ldr	r3, [pc, #164]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	4a28      	ldr	r2, [pc, #160]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 800140a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800140e:	6313      	str	r3, [r2, #48]	; 0x30
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_ETH_MspInit+0x15c>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800141c:	2332      	movs	r3, #50	; 0x32
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800142c:	230b      	movs	r3, #11
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	481e      	ldr	r0, [pc, #120]	; (80014b0 <HAL_ETH_MspInit+0x160>)
 8001438:	f001 fa90 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800143c:	2386      	movs	r3, #134	; 0x86
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800144c:	230b      	movs	r3, #11
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	4817      	ldr	r0, [pc, #92]	; (80014b4 <HAL_ETH_MspInit+0x164>)
 8001458:	f001 fa80 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800145c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800146e:	230b      	movs	r3, #11
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	4619      	mov	r1, r3
 8001478:	480f      	ldr	r0, [pc, #60]	; (80014b8 <HAL_ETH_MspInit+0x168>)
 800147a:	f001 fa6f 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800147e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001490:	230b      	movs	r3, #11
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	4808      	ldr	r0, [pc, #32]	; (80014bc <HAL_ETH_MspInit+0x16c>)
 800149c:	f001 fa5e 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80014a0:	bf00      	nop
 80014a2:	3738      	adds	r7, #56	; 0x38
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40028000 	.word	0x40028000
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40021800 	.word	0x40021800

080014c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b0ae      	sub	sp, #184	; 0xb8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2290      	movs	r2, #144	; 0x90
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 fff7 	bl	80054d4 <memset>
  if(huart->Instance==USART3)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a22      	ldr	r2, [pc, #136]	; (8001574 <HAL_UART_MspInit+0xb4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d13c      	bne.n	800156a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fa6e 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800150a:	f7ff feb7 	bl	800127c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_UART_MspInit+0xb8>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_UART_MspInit+0xb8>)
 8001514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_UART_MspInit+0xb8>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_UART_MspInit+0xb8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <HAL_UART_MspInit+0xb8>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_UART_MspInit+0xb8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800153e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001558:	2307      	movs	r3, #7
 800155a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <HAL_UART_MspInit+0xbc>)
 8001566:	f001 f9f9 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	37b8      	adds	r7, #184	; 0xb8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40004800 	.word	0x40004800
 8001578:	40023800 	.word	0x40023800
 800157c:	40020c00 	.word	0x40020c00

08001580 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0ae      	sub	sp, #184	; 0xb8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2290      	movs	r2, #144	; 0x90
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 ff97 	bl	80054d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ae:	d159      	bne.n	8001664 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 fa0d 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80015cc:	f7ff fe56 	bl	800127c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_PCD_MspInit+0xec>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a25      	ldr	r2, [pc, #148]	; (800166c <HAL_PCD_MspInit+0xec>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_PCD_MspInit+0xec>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015e8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001602:	230a      	movs	r3, #10
 8001604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800160c:	4619      	mov	r1, r3
 800160e:	4818      	ldr	r0, [pc, #96]	; (8001670 <HAL_PCD_MspInit+0xf0>)
 8001610:	f001 f9a4 	bl	800295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800162c:	4619      	mov	r1, r3
 800162e:	4810      	ldr	r0, [pc, #64]	; (8001670 <HAL_PCD_MspInit+0xf0>)
 8001630:	f001 f994 	bl	800295c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_PCD_MspInit+0xec>)
 8001636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001638:	4a0c      	ldr	r2, [pc, #48]	; (800166c <HAL_PCD_MspInit+0xec>)
 800163a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800163e:	6353      	str	r3, [r2, #52]	; 0x34
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_PCD_MspInit+0xec>)
 8001642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_PCD_MspInit+0xec>)
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_PCD_MspInit+0xec>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001656:	6453      	str	r3, [r2, #68]	; 0x44
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <HAL_PCD_MspInit+0xec>)
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	37b8      	adds	r7, #184	; 0xb8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x4>

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c0:	f000 f902 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e00a      	b.n	80016f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016da:	f3af 8000 	nop.w
 80016de:	4601      	mov	r1, r0
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbf0      	blt.n	80016da <_read+0x12>
  }

  return len;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800172a:	605a      	str	r2, [r3, #4]
  return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_isatty>:

int _isatty(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800179c:	f003 fee8 	bl	8005570 <__errno>
 80017a0:	4603      	mov	r3, r0
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	e009      	b.n	80017c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <_sbrk+0x64>)
 80017bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20080000 	.word	0x20080000
 80017cc:	00000400 	.word	0x00000400
 80017d0:	2000088c 	.word	0x2000088c
 80017d4:	200009e0 	.word	0x200009e0

080017d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001834 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001802:	490e      	ldr	r1, [pc, #56]	; (800183c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001804:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001818:	4c0b      	ldr	r4, [pc, #44]	; (8001848 <LoopFillZerobss+0x26>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001826:	f7ff ffd7 	bl	80017d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182a:	f003 fea7 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7fe ff1b 	bl	8000668 <main>
  bx  lr    
 8001832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001834:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001840:	08008d48 	.word	0x08008d48
  ldr r2, =_sbss
 8001844:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001848:	200009e0 	.word	0x200009e0

0800184c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC_IRQHandler>

0800184e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001852:	2003      	movs	r0, #3
 8001854:	f000 fd28 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001858:	2000      	movs	r0, #0
 800185a:	f000 f805 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185e:	f7ff fd13 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 fd35 	bl	80022f6 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 fd0b 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000890 	.word	0x20000890

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000890 	.word	0x20000890

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_Delay+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffde 	bl	80018f0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008

08001950 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e031      	b.n	80019ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fcae 	bl	80012d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_ADC_Init+0x84>)
 8001994:	4013      	ands	r3, r2
 8001996:	f043 0202 	orr.w	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fad6 	bl	8001f50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f023 0303 	bic.w	r3, r3, #3
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
 80019ba:	e001      	b.n	80019c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	ffffeefd 	.word	0xffffeefd

080019d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Start+0x1a>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e0ad      	b.n	8001b4e <HAL_ADC_Start+0x176>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d018      	beq.n	8001a3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a18:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_ADC_Start+0x184>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a50      	ldr	r2, [pc, #320]	; (8001b60 <HAL_ADC_Start+0x188>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0c9a      	lsrs	r2, r3, #18
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a2c:	e002      	b.n	8001a34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f9      	bne.n	8001a2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d175      	bne.n	8001b34 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4c:	4b45      	ldr	r3, [pc, #276]	; (8001b64 <HAL_ADC_Start+0x18c>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a82:	d106      	bne.n	8001a92 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f023 0206 	bic.w	r2, r3, #6
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a90:	e002      	b.n	8001a98 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aa8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <HAL_ADC_Start+0x190>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d143      	bne.n	8001b4c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	e03a      	b.n	8001b4c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_ADC_Start+0x194>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d10e      	bne.n	8001afe <HAL_ADC_Start+0x126>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d107      	bne.n	8001afe <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001afc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_ADC_Start+0x190>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d120      	bne.n	8001b4c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <HAL_ADC_Start+0x198>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d11b      	bne.n	8001b4c <HAL_ADC_Start+0x174>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d114      	bne.n	8001b4c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	e00b      	b.n	8001b4c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f043 0210 	orr.w	r2, r3, #16
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	431bde83 	.word	0x431bde83
 8001b64:	fffff8fe 	.word	0xfffff8fe
 8001b68:	40012300 	.word	0x40012300
 8001b6c:	40012000 	.word	0x40012000
 8001b70:	40012200 	.word	0x40012200

08001b74 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b90:	d113      	bne.n	8001bba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba0:	d10b      	bne.n	8001bba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f043 0220 	orr.w	r2, r3, #32
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e063      	b.n	8001c82 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001bba:	f7ff fe99 	bl	80018f0 <HAL_GetTick>
 8001bbe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bc0:	e021      	b.n	8001c06 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d01d      	beq.n	8001c06 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <HAL_ADC_PollForConversion+0x6c>
 8001bd0:	f7ff fe8e 	bl	80018f0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d212      	bcs.n	8001c06 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d00b      	beq.n	8001c06 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f043 0204 	orr.w	r2, r3, #4
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e03d      	b.n	8001c82 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d1d6      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0212 	mvn.w	r2, #18
 8001c1c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d123      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d11f      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d111      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1c>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e136      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x28a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b09      	cmp	r3, #9
 8001cce:	d93a      	bls.n	8001d46 <HAL_ADC_ConfigChannel+0xa2>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cd8:	d035      	beq.n	8001d46 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68d9      	ldr	r1, [r3, #12]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	3b1e      	subs	r3, #30
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a8d      	ldr	r2, [pc, #564]	; (8001f3c <HAL_ADC_ConfigChannel+0x298>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10a      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68d9      	ldr	r1, [r3, #12]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	061a      	lsls	r2, r3, #24
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1e:	e035      	b.n	8001d8c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68d9      	ldr	r1, [r3, #12]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4403      	add	r3, r0
 8001d38:	3b1e      	subs	r3, #30
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d44:	e022      	b.n	8001d8c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6919      	ldr	r1, [r3, #16]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43da      	mvns	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	400a      	ands	r2, r1
 8001d68:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6919      	ldr	r1, [r3, #16]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4403      	add	r3, r0
 8001d82:	409a      	lsls	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	d824      	bhi.n	8001dde <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3b05      	subs	r3, #5
 8001da6:	221f      	movs	r2, #31
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43da      	mvns	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	400a      	ands	r2, r1
 8001db4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	3b05      	subs	r3, #5
 8001dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34
 8001ddc:	e04c      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d824      	bhi.n	8001e30 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	3b23      	subs	r3, #35	; 0x23
 8001df8:	221f      	movs	r2, #31
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	400a      	ands	r2, r1
 8001e06:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b23      	subs	r3, #35	; 0x23
 8001e22:	fa00 f203 	lsl.w	r2, r0, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2e:	e023      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	3b41      	subs	r3, #65	; 0x41
 8001e42:	221f      	movs	r2, #31
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	400a      	ands	r2, r1
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b41      	subs	r3, #65	; 0x41
 8001e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a30      	ldr	r2, [pc, #192]	; (8001f40 <HAL_ADC_ConfigChannel+0x29c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d10a      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x1f4>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e8a:	d105      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a2c      	ldr	r2, [pc, #176]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e92:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e96:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <HAL_ADC_ConfigChannel+0x29c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x21e>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b12      	cmp	r3, #18
 8001ea8:	d10b      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001eb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001eb4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ebc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ec0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1e      	ldr	r2, [pc, #120]	; (8001f40 <HAL_ADC_ConfigChannel+0x29c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d12b      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x280>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <HAL_ADC_ConfigChannel+0x298>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d003      	beq.n	8001ede <HAL_ADC_ConfigChannel+0x23a>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b11      	cmp	r3, #17
 8001edc:	d122      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ee4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ee8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4a15      	ldr	r2, [pc, #84]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ef0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ef4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <HAL_ADC_ConfigChannel+0x298>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d111      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_ADC_ConfigChannel+0x2a4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_ADC_ConfigChannel+0x2a8>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9a      	lsrs	r2, r3, #18
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f16:	e002      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f9      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	10000012 	.word	0x10000012
 8001f40:	40012000 	.word	0x40012000
 8001f44:	40012300 	.word	0x40012300
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	431bde83 	.word	0x431bde83

08001f50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f58:	4b78      	ldr	r3, [pc, #480]	; (800213c <ADC_Init+0x1ec>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4a77      	ldr	r2, [pc, #476]	; (800213c <ADC_Init+0x1ec>)
 8001f5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f62:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f64:	4b75      	ldr	r3, [pc, #468]	; (800213c <ADC_Init+0x1ec>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4973      	ldr	r1, [pc, #460]	; (800213c <ADC_Init+0x1ec>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	021a      	lsls	r2, r3, #8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6899      	ldr	r1, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	4a58      	ldr	r2, [pc, #352]	; (8002140 <ADC_Init+0x1f0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d022      	beq.n	800202a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ff2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6899      	ldr	r1, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6899      	ldr	r1, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	e00f      	b.n	800204a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002048:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0202 	bic.w	r2, r2, #2
 8002058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6899      	ldr	r1, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	005a      	lsls	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002086:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002096:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	3b01      	subs	r3, #1
 80020a4:	035a      	lsls	r2, r3, #13
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	e007      	b.n	80020c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	3b01      	subs	r3, #1
 80020dc:	051a      	lsls	r2, r3, #20
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002102:	025a      	lsls	r2, r3, #9
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800211a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	029a      	lsls	r2, r3, #10
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40012300 	.word	0x40012300
 8002140:	0f000001 	.word	0x0f000001

08002144 <__NVIC_SetPriorityGrouping>:
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <__NVIC_SetPriorityGrouping+0x40>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	4313      	orrs	r3, r2
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <__NVIC_SetPriorityGrouping+0x40>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00
 8002188:	05fa0000 	.word	0x05fa0000

0800218c <__NVIC_GetPriorityGrouping>:
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_SetPriority>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff47 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff5c 	bl	800218c <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff8e 	bl	80021fc <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5d 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffb0 	bl	8002264 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e06a      	b.n	80023f8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002328:	2b00      	cmp	r3, #0
 800232a:	d106      	bne.n	800233a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2223      	movs	r2, #35	; 0x23
 8002330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff f80b 	bl	8001350 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <HAL_ETH_Init+0xf0>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4a30      	ldr	r2, [pc, #192]	; (8002400 <HAL_ETH_Init+0xf0>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	4b2e      	ldr	r3, [pc, #184]	; (8002400 <HAL_ETH_Init+0xf0>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002352:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <HAL_ETH_Init+0xf4>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a2b      	ldr	r2, [pc, #172]	; (8002404 <HAL_ETH_Init+0xf4>)
 8002358:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800235c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_ETH_Init+0xf4>)
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	4927      	ldr	r1, [pc, #156]	; (8002404 <HAL_ETH_Init+0xf4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <HAL_ETH_Init+0xf4>)
 800236e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002386:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002388:	f7ff fab2 	bl	80018f0 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800238e:	e011      	b.n	80023b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002390:	f7ff faae 	bl	80018f0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800239e:	d909      	bls.n	80023b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2204      	movs	r2, #4
 80023a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	22e0      	movs	r2, #224	; 0xe0
 80023ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e021      	b.n	80023f8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1e4      	bne.n	8002390 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f958 	bl	800267c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f9ff 	bl	80027d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fa55 	bl	8002882 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	461a      	mov	r2, r3
 80023de:	2100      	movs	r1, #0
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f9bd 	bl	8002760 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2210      	movs	r2, #16
 80023f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	40013800 	.word	0x40013800

08002408 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4b51      	ldr	r3, [pc, #324]	; (8002564 <ETH_SetMACConfig+0x15c>)
 800241e:	4013      	ands	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	7c1b      	ldrb	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <ETH_SetMACConfig+0x28>
 800242a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800242e:	e000      	b.n	8002432 <ETH_SetMACConfig+0x2a>
 8002430:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	7c5b      	ldrb	r3, [r3, #17]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <ETH_SetMACConfig+0x38>
 800243a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800243e:	e000      	b.n	8002442 <ETH_SetMACConfig+0x3a>
 8002440:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002442:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002448:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	7fdb      	ldrb	r3, [r3, #31]
 800244e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002450:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002456:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	7f92      	ldrb	r2, [r2, #30]
 800245c:	2a00      	cmp	r2, #0
 800245e:	d102      	bne.n	8002466 <ETH_SetMACConfig+0x5e>
 8002460:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002464:	e000      	b.n	8002468 <ETH_SetMACConfig+0x60>
 8002466:	2200      	movs	r2, #0
                        macconf->Speed |
 8002468:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	7f1b      	ldrb	r3, [r3, #28]
 800246e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002470:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002476:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	791b      	ldrb	r3, [r3, #4]
 800247c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800247e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002486:	2a00      	cmp	r2, #0
 8002488:	d102      	bne.n	8002490 <ETH_SetMACConfig+0x88>
 800248a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248e:	e000      	b.n	8002492 <ETH_SetMACConfig+0x8a>
 8002490:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002492:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	7bdb      	ldrb	r3, [r3, #15]
 8002498:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800249a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024aa:	4313      	orrs	r3, r2
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c2:	2001      	movs	r0, #1
 80024c4:	f7ff fa20 	bl	8001908 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024de:	4013      	ands	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024ee:	2a00      	cmp	r2, #0
 80024f0:	d101      	bne.n	80024f6 <ETH_SetMACConfig+0xee>
 80024f2:	2280      	movs	r2, #128	; 0x80
 80024f4:	e000      	b.n	80024f8 <ETH_SetMACConfig+0xf0>
 80024f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002506:	2a01      	cmp	r2, #1
 8002508:	d101      	bne.n	800250e <ETH_SetMACConfig+0x106>
 800250a:	2208      	movs	r2, #8
 800250c:	e000      	b.n	8002510 <ETH_SetMACConfig+0x108>
 800250e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002510:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002518:	2a01      	cmp	r2, #1
 800251a:	d101      	bne.n	8002520 <ETH_SetMACConfig+0x118>
 800251c:	2204      	movs	r2, #4
 800251e:	e000      	b.n	8002522 <ETH_SetMACConfig+0x11a>
 8002520:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002522:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800252a:	2a01      	cmp	r2, #1
 800252c:	d101      	bne.n	8002532 <ETH_SetMACConfig+0x12a>
 800252e:	2202      	movs	r2, #2
 8002530:	e000      	b.n	8002534 <ETH_SetMACConfig+0x12c>
 8002532:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002534:	4313      	orrs	r3, r2
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff f9db 	bl	8001908 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	ff20810f 	.word	0xff20810f

08002568 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <ETH_SetDMAConfig+0x110>)
 8002582:	4013      	ands	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	7b1b      	ldrb	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <ETH_SetDMAConfig+0x2c>
 800258e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002592:	e000      	b.n	8002596 <ETH_SetDMAConfig+0x2e>
 8002594:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	7b5b      	ldrb	r3, [r3, #13]
 800259a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800259c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	7f52      	ldrb	r2, [r2, #29]
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	d102      	bne.n	80025ac <ETH_SetDMAConfig+0x44>
 80025a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025aa:	e000      	b.n	80025ae <ETH_SetDMAConfig+0x46>
 80025ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	7b9b      	ldrb	r3, [r3, #14]
 80025b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	7f1b      	ldrb	r3, [r3, #28]
 80025c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80025c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	7f9b      	ldrb	r3, [r3, #30]
 80025ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025dc:	4313      	orrs	r3, r2
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ec:	461a      	mov	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025fe:	2001      	movs	r0, #1
 8002600:	f7ff f982 	bl	8001908 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260c:	461a      	mov	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	791b      	ldrb	r3, [r3, #4]
 8002616:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800261c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002622:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002628:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002630:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002632:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800263a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002640:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800264a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800264e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800265c:	2001      	movs	r0, #1
 800265e:	f7ff f953 	bl	8001908 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	f8de3f23 	.word	0xf8de3f23

0800267c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b0a6      	sub	sp, #152	; 0x98
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002690:	2300      	movs	r3, #0
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800269a:	2301      	movs	r3, #1
 800269c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026b8:	2300      	movs	r3, #0
 80026ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026f4:	4619      	mov	r1, r3
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fe86 	bl	8002408 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026fc:	2301      	movs	r3, #1
 80026fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002700:	2301      	movs	r3, #1
 8002702:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002704:	2301      	movs	r3, #1
 8002706:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800270a:	2301      	movs	r3, #1
 800270c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800271e:	2300      	movs	r3, #0
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002722:	2301      	movs	r3, #1
 8002724:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002728:	2301      	movs	r3, #1
 800272a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800272c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002730:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002736:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800273c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800273e:	2301      	movs	r3, #1
 8002740:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002744:	2300      	movs	r3, #0
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800274c:	f107 0308 	add.w	r3, r7, #8
 8002750:	4619      	mov	r1, r3
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ff08 	bl	8002568 <ETH_SetDMAConfig>
}
 8002758:	bf00      	nop
 800275a:	3798      	adds	r7, #152	; 0x98
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3305      	adds	r3, #5
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	3204      	adds	r2, #4
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <ETH_MACAddressConfig+0x68>)
 8002782:	4413      	add	r3, r2
 8002784:	461a      	mov	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3303      	adds	r3, #3
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	061a      	lsls	r2, r3, #24
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3302      	adds	r3, #2
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	041b      	lsls	r3, r3, #16
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3301      	adds	r3, #1
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	4313      	orrs	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	7812      	ldrb	r2, [r2, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <ETH_MACAddressConfig+0x6c>)
 80027b2:	4413      	add	r3, r2
 80027b4:	461a      	mov	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	6013      	str	r3, [r2, #0]
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40028040 	.word	0x40028040
 80027cc:	40028044 	.word	0x40028044

080027d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	e03e      	b.n	800285c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68d9      	ldr	r1, [r3, #12]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2200      	movs	r2, #0
 80027fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2200      	movs	r2, #0
 8002806:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	3206      	adds	r2, #6
 8002810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d80c      	bhi.n	8002840 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68d9      	ldr	r1, [r3, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	e004      	b.n	800284a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	461a      	mov	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3301      	adds	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d9bd      	bls.n	80027de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002874:	611a      	str	r2, [r3, #16]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e046      	b.n	800291e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6919      	ldr	r1, [r3, #16]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80028d4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	3212      	adds	r2, #18
 80028ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d80c      	bhi.n	800290e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6919      	ldr	r1, [r3, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60da      	str	r2, [r3, #12]
 800290c:	e004      	b.n	8002918 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3301      	adds	r3, #1
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d9b5      	bls.n	8002890 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294e:	60da      	str	r2, [r3, #12]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	e175      	b.n	8002c68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800297c:	2201      	movs	r2, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	f040 8164 	bne.w	8002c62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d005      	beq.n	80029b2 <HAL_GPIO_Init+0x56>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d130      	bne.n	8002a14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 0201 	and.w	r2, r3, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d017      	beq.n	8002a50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d123      	bne.n	8002aa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	08da      	lsrs	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3208      	adds	r2, #8
 8002a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	220f      	movs	r2, #15
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	08da      	lsrs	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3208      	adds	r2, #8
 8002a9e:	69b9      	ldr	r1, [r7, #24]
 8002aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0203 	and.w	r2, r3, #3
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80be 	beq.w	8002c62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae6:	4b66      	ldr	r3, [pc, #408]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	4a65      	ldr	r2, [pc, #404]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af0:	6453      	str	r3, [r2, #68]	; 0x44
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002afe:	4a61      	ldr	r2, [pc, #388]	; (8002c84 <HAL_GPIO_Init+0x328>)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_GPIO_Init+0x32c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d037      	beq.n	8002b9a <HAL_GPIO_Init+0x23e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a57      	ldr	r2, [pc, #348]	; (8002c8c <HAL_GPIO_Init+0x330>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d031      	beq.n	8002b96 <HAL_GPIO_Init+0x23a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a56      	ldr	r2, [pc, #344]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02b      	beq.n	8002b92 <HAL_GPIO_Init+0x236>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a55      	ldr	r2, [pc, #340]	; (8002c94 <HAL_GPIO_Init+0x338>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d025      	beq.n	8002b8e <HAL_GPIO_Init+0x232>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a54      	ldr	r2, [pc, #336]	; (8002c98 <HAL_GPIO_Init+0x33c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01f      	beq.n	8002b8a <HAL_GPIO_Init+0x22e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a53      	ldr	r2, [pc, #332]	; (8002c9c <HAL_GPIO_Init+0x340>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d019      	beq.n	8002b86 <HAL_GPIO_Init+0x22a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_GPIO_Init+0x344>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_GPIO_Init+0x226>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a51      	ldr	r2, [pc, #324]	; (8002ca4 <HAL_GPIO_Init+0x348>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00d      	beq.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a50      	ldr	r2, [pc, #320]	; (8002ca8 <HAL_GPIO_Init+0x34c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <HAL_GPIO_Init+0x21e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4f      	ldr	r2, [pc, #316]	; (8002cac <HAL_GPIO_Init+0x350>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_GPIO_Init+0x21a>
 8002b72:	2309      	movs	r3, #9
 8002b74:	e012      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b76:	230a      	movs	r3, #10
 8002b78:	e010      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	e00e      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b7e:	2307      	movs	r3, #7
 8002b80:	e00c      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b82:	2306      	movs	r3, #6
 8002b84:	e00a      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b86:	2305      	movs	r3, #5
 8002b88:	e008      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e004      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_GPIO_Init+0x240>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	f002 0203 	and.w	r2, r2, #3
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	4093      	lsls	r3, r2
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bac:	4935      	ldr	r1, [pc, #212]	; (8002c84 <HAL_GPIO_Init+0x328>)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bba:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <HAL_GPIO_Init+0x354>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bde:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <HAL_GPIO_Init+0x354>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be4:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <HAL_GPIO_Init+0x354>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c08:	4a29      	ldr	r2, [pc, #164]	; (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c0e:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c32:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c5c:	4a14      	ldr	r2, [pc, #80]	; (8002cb0 <HAL_GPIO_Init+0x354>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3301      	adds	r3, #1
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b0f      	cmp	r3, #15
 8002c6c:	f67f ae86 	bls.w	800297c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40013800 	.word	0x40013800
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40020400 	.word	0x40020400
 8002c90:	40020800 	.word	0x40020800
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40021400 	.word	0x40021400
 8002ca0:	40021800 	.word	0x40021800
 8002ca4:	40021c00 	.word	0x40021c00
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40022400 	.word	0x40022400
 8002cb0:	40013c00 	.word	0x40013c00

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cd0:	e003      	b.n	8002cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce8:	b08f      	sub	sp, #60	; 0x3c
 8002cea:	af0a      	add	r7, sp, #40	; 0x28
 8002cec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e116      	b.n	8002f26 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fe fc34 	bl	8001580 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 ff3a 	bl	8004bb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	687e      	ldr	r6, [r7, #4]
 8002d44:	466d      	mov	r5, sp
 8002d46:	f106 0410 	add.w	r4, r6, #16
 8002d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d56:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d5a:	1d33      	adds	r3, r6, #4
 8002d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d5e:	6838      	ldr	r0, [r7, #0]
 8002d60:	f001 fece 	bl	8004b00 <USB_CoreInit>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0d7      	b.n	8002f26 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 ff28 	bl	8004bd2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	e04a      	b.n	8002e1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	333d      	adds	r3, #61	; 0x3d
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	333c      	adds	r3, #60	; 0x3c
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	b298      	uxth	r0, r3
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3344      	adds	r3, #68	; 0x44
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3340      	adds	r3, #64	; 0x40
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3348      	adds	r3, #72	; 0x48
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	334c      	adds	r3, #76	; 0x4c
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3354      	adds	r3, #84	; 0x54
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d3af      	bcc.n	8002d88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	e044      	b.n	8002eb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d3b5      	bcc.n	8002e2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	687e      	ldr	r6, [r7, #4]
 8002eca:	466d      	mov	r5, sp
 8002ecc:	f106 0410 	add.w	r4, r6, #16
 8002ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002edc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ee0:	1d33      	adds	r3, r6, #4
 8002ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ee4:	6838      	ldr	r0, [r7, #0]
 8002ee6:	f001 fec1 	bl	8004c6c <USB_DevInit>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e014      	b.n	8002f26 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d102      	bne.n	8002f1a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f80b 	bl	8002f30 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f002 f87f 	bl	8005022 <USB_DevDisconnect>

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	10000003 	.word	0x10000003

08002f78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40007000 	.word	0x40007000

08002f98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	4b23      	ldr	r3, [pc, #140]	; (8003030 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	4a22      	ldr	r2, [pc, #136]	; (8003030 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
 8002fae:	4b20      	ldr	r3, [pc, #128]	; (8003030 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fba:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fc6:	f7fe fc93 	bl	80018f0 <HAL_GetTick>
 8002fca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fcc:	e009      	b.n	8002fe2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fce:	f7fe fc8f 	bl	80018f0 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fdc:	d901      	bls.n	8002fe2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e022      	b.n	8003028 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fee:	d1ee      	bne.n	8002fce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0f      	ldr	r2, [pc, #60]	; (8003034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ffc:	f7fe fc78 	bl	80018f0 <HAL_GetTick>
 8003000:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003002:	e009      	b.n	8003018 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003004:	f7fe fc74 	bl	80018f0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003012:	d901      	bls.n	8003018 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e007      	b.n	8003028 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_PWREx_EnableOverDrive+0x9c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003024:	d1ee      	bne.n	8003004 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40023800 	.word	0x40023800
 8003034:	40007000 	.word	0x40007000

08003038 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003040:	2300      	movs	r3, #0
 8003042:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e29b      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8087 	beq.w	800316a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800305c:	4b96      	ldr	r3, [pc, #600]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b04      	cmp	r3, #4
 8003066:	d00c      	beq.n	8003082 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003068:	4b93      	ldr	r3, [pc, #588]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b08      	cmp	r3, #8
 8003072:	d112      	bne.n	800309a <HAL_RCC_OscConfig+0x62>
 8003074:	4b90      	ldr	r3, [pc, #576]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003080:	d10b      	bne.n	800309a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003082:	4b8d      	ldr	r3, [pc, #564]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d06c      	beq.n	8003168 <HAL_RCC_OscConfig+0x130>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d168      	bne.n	8003168 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e275      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a2:	d106      	bne.n	80030b2 <HAL_RCC_OscConfig+0x7a>
 80030a4:	4b84      	ldr	r3, [pc, #528]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a83      	ldr	r2, [pc, #524]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	e02e      	b.n	8003110 <HAL_RCC_OscConfig+0xd8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x9c>
 80030ba:	4b7f      	ldr	r3, [pc, #508]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a7e      	ldr	r2, [pc, #504]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	4b7c      	ldr	r3, [pc, #496]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a7b      	ldr	r2, [pc, #492]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e01d      	b.n	8003110 <HAL_RCC_OscConfig+0xd8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0xc0>
 80030de:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a75      	ldr	r2, [pc, #468]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b73      	ldr	r3, [pc, #460]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a72      	ldr	r2, [pc, #456]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0xd8>
 80030f8:	4b6f      	ldr	r3, [pc, #444]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6e      	ldr	r2, [pc, #440]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80030fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6b      	ldr	r2, [pc, #428]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 800310a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d013      	beq.n	8003140 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe fbea 	bl	80018f0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7fe fbe6 	bl	80018f0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e229      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b61      	ldr	r3, [pc, #388]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0xe8>
 800313e:	e014      	b.n	800316a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fbd6 	bl	80018f0 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fbd2 	bl	80018f0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e215      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315a:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x110>
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d069      	beq.n	800324a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003176:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003182:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b08      	cmp	r3, #8
 800318c:	d11c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x190>
 800318e:	4b4a      	ldr	r3, [pc, #296]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d116      	bne.n	80031c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319a:	4b47      	ldr	r3, [pc, #284]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_RCC_OscConfig+0x17a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e1e9      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b41      	ldr	r3, [pc, #260]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	493d      	ldr	r1, [pc, #244]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c6:	e040      	b.n	800324a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d023      	beq.n	8003218 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d0:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a38      	ldr	r2, [pc, #224]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fb88 	bl	80018f0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e4:	f7fe fb84 	bl	80018f0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1c7      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4929      	ldr	r1, [pc, #164]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
 8003216:	e018      	b.n	800324a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003218:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe fb64 	bl	80018f0 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322c:	f7fe fb60 	bl	80018f0 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1a3      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d038      	beq.n	80032c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d019      	beq.n	8003292 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fe fb41 	bl	80018f0 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003272:	f7fe fb3d 	bl	80018f0 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e180      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x23a>
 8003290:	e01a      	b.n	80032c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003296:	4a08      	ldr	r2, [pc, #32]	; (80032b8 <HAL_RCC_OscConfig+0x280>)
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7fe fb27 	bl	80018f0 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a6:	f7fe fb23 	bl	80018f0 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d903      	bls.n	80032bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e166      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
 80032b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032bc:	4b92      	ldr	r3, [pc, #584]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80032be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ee      	bne.n	80032a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80a4 	beq.w	800341e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d6:	4b8c      	ldr	r3, [pc, #560]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10d      	bne.n	80032fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b89      	ldr	r3, [pc, #548]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a88      	ldr	r2, [pc, #544]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b86      	ldr	r3, [pc, #536]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032fe:	4b83      	ldr	r3, [pc, #524]	; (800350c <HAL_RCC_OscConfig+0x4d4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800330a:	4b80      	ldr	r3, [pc, #512]	; (800350c <HAL_RCC_OscConfig+0x4d4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7f      	ldr	r2, [pc, #508]	; (800350c <HAL_RCC_OscConfig+0x4d4>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7fe faeb 	bl	80018f0 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fe fae7 	bl	80018f0 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b64      	cmp	r3, #100	; 0x64
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e12a      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003330:	4b76      	ldr	r3, [pc, #472]	; (800350c <HAL_RCC_OscConfig+0x4d4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x31a>
 8003344:	4b70      	ldr	r3, [pc, #448]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4a6f      	ldr	r2, [pc, #444]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6713      	str	r3, [r2, #112]	; 0x70
 8003350:	e02d      	b.n	80033ae <HAL_RCC_OscConfig+0x376>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x33c>
 800335a:	4b6b      	ldr	r3, [pc, #428]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a6a      	ldr	r2, [pc, #424]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	4b68      	ldr	r3, [pc, #416]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a67      	ldr	r2, [pc, #412]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
 8003372:	e01c      	b.n	80033ae <HAL_RCC_OscConfig+0x376>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b05      	cmp	r3, #5
 800337a:	d10c      	bne.n	8003396 <HAL_RCC_OscConfig+0x35e>
 800337c:	4b62      	ldr	r3, [pc, #392]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4a61      	ldr	r2, [pc, #388]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	6713      	str	r3, [r2, #112]	; 0x70
 8003388:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4a5e      	ldr	r2, [pc, #376]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6713      	str	r3, [r2, #112]	; 0x70
 8003394:	e00b      	b.n	80033ae <HAL_RCC_OscConfig+0x376>
 8003396:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a5b      	ldr	r2, [pc, #364]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	4b59      	ldr	r3, [pc, #356]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a58      	ldr	r2, [pc, #352]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d015      	beq.n	80033e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b6:	f7fe fa9b 	bl	80018f0 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fe fa97 	bl	80018f0 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0d8      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ee      	beq.n	80033be <HAL_RCC_OscConfig+0x386>
 80033e0:	e014      	b.n	800340c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7fe fa85 	bl	80018f0 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fe fa81 	bl	80018f0 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e0c2      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	4b41      	ldr	r3, [pc, #260]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ee      	bne.n	80033ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d105      	bne.n	800341e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003412:	4b3d      	ldr	r3, [pc, #244]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	4a3c      	ldr	r2, [pc, #240]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 8003418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80ae 	beq.w	8003584 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003428:	4b37      	ldr	r3, [pc, #220]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d06d      	beq.n	8003510 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d14b      	bne.n	80034d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343c:	4b32      	ldr	r3, [pc, #200]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a31      	ldr	r2, [pc, #196]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 8003442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe fa52 	bl	80018f0 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe fa4e 	bl	80018f0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e091      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69da      	ldr	r2, [r3, #28]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	019b      	lsls	r3, r3, #6
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	3b01      	subs	r3, #1
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	071b      	lsls	r3, r3, #28
 800349a:	491b      	ldr	r1, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a18      	ldr	r2, [pc, #96]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80034a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe fa20 	bl	80018f0 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b4:	f7fe fa1c 	bl	80018f0 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e05f      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x47c>
 80034d2:	e057      	b.n	8003584 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80034da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe fa06 	bl	80018f0 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe fa02 	bl	80018f0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e045      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b03      	ldr	r3, [pc, #12]	; (8003508 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4b0>
 8003506:	e03d      	b.n	8003584 <HAL_RCC_OscConfig+0x54c>
 8003508:	40023800 	.word	0x40023800
 800350c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003510:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <HAL_RCC_OscConfig+0x558>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d030      	beq.n	8003580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d129      	bne.n	8003580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d122      	bne.n	8003580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003540:	4013      	ands	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003546:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003548:	4293      	cmp	r3, r2
 800354a:	d119      	bne.n	8003580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	3b01      	subs	r3, #1
 800355a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d10f      	bne.n	8003580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d107      	bne.n	8003580 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800

08003594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0d0      	b.n	800374e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035ac:	4b6a      	ldr	r3, [pc, #424]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d910      	bls.n	80035dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ba:	4b67      	ldr	r3, [pc, #412]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 020f 	bic.w	r2, r3, #15
 80035c2:	4965      	ldr	r1, [pc, #404]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b63      	ldr	r3, [pc, #396]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0b8      	b.n	800374e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f4:	4b59      	ldr	r3, [pc, #356]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a58      	ldr	r2, [pc, #352]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 80035fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800360c:	4b53      	ldr	r3, [pc, #332]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a52      	ldr	r2, [pc, #328]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003616:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	4b50      	ldr	r3, [pc, #320]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	494d      	ldr	r1, [pc, #308]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d040      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d115      	bne.n	8003676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e07f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e073      	b.n	800374e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003666:	4b3d      	ldr	r3, [pc, #244]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e06b      	b.n	800374e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003676:	4b39      	ldr	r3, [pc, #228]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 0203 	bic.w	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4936      	ldr	r1, [pc, #216]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003684:	4313      	orrs	r3, r2
 8003686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003688:	f7fe f932 	bl	80018f0 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003690:	f7fe f92e 	bl	80018f0 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e053      	b.n	800374e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	4b2d      	ldr	r3, [pc, #180]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 020c 	and.w	r2, r3, #12
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d1eb      	bne.n	8003690 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b8:	4b27      	ldr	r3, [pc, #156]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d210      	bcs.n	80036e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 020f 	bic.w	r2, r3, #15
 80036ce:	4922      	ldr	r1, [pc, #136]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e032      	b.n	800374e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4916      	ldr	r1, [pc, #88]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	490e      	ldr	r1, [pc, #56]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003726:	f000 f821 	bl	800376c <HAL_RCC_GetSysClockFreq>
 800372a:	4602      	mov	r2, r0
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	490a      	ldr	r1, [pc, #40]	; (8003760 <HAL_RCC_ClockConfig+0x1cc>)
 8003738:	5ccb      	ldrb	r3, [r1, r3]
 800373a:	fa22 f303 	lsr.w	r3, r2, r3
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1d0>)
 8003740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003742:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCC_ClockConfig+0x1d4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe f88e 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023c00 	.word	0x40023c00
 800375c:	40023800 	.word	0x40023800
 8003760:	0800725c 	.word	0x0800725c
 8003764:	20000000 	.word	0x20000000
 8003768:	20000004 	.word	0x20000004

0800376c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800376c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003770:	b094      	sub	sp, #80	; 0x50
 8003772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	647b      	str	r3, [r7, #68]	; 0x44
 8003778:	2300      	movs	r3, #0
 800377a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800377c:	2300      	movs	r3, #0
 800377e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003784:	4b79      	ldr	r3, [pc, #484]	; (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b08      	cmp	r3, #8
 800378e:	d00d      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x40>
 8003790:	2b08      	cmp	r3, #8
 8003792:	f200 80e1 	bhi.w	8003958 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x34>
 800379a:	2b04      	cmp	r3, #4
 800379c:	d003      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800379e:	e0db      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a0:	4b73      	ldr	r3, [pc, #460]	; (8003970 <HAL_RCC_GetSysClockFreq+0x204>)
 80037a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037a4:	e0db      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037a6:	4b73      	ldr	r3, [pc, #460]	; (8003974 <HAL_RCC_GetSysClockFreq+0x208>)
 80037a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037aa:	e0d8      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ac:	4b6f      	ldr	r3, [pc, #444]	; (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037b6:	4b6d      	ldr	r3, [pc, #436]	; (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d063      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c2:	4b6a      	ldr	r3, [pc, #424]	; (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	2200      	movs	r2, #0
 80037ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80037cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d4:	633b      	str	r3, [r7, #48]	; 0x30
 80037d6:	2300      	movs	r3, #0
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
 80037da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037de:	4622      	mov	r2, r4
 80037e0:	462b      	mov	r3, r5
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f04f 0100 	mov.w	r1, #0
 80037ea:	0159      	lsls	r1, r3, #5
 80037ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f0:	0150      	lsls	r0, r2, #5
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4621      	mov	r1, r4
 80037f8:	1a51      	subs	r1, r2, r1
 80037fa:	6139      	str	r1, [r7, #16]
 80037fc:	4629      	mov	r1, r5
 80037fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003810:	4659      	mov	r1, fp
 8003812:	018b      	lsls	r3, r1, #6
 8003814:	4651      	mov	r1, sl
 8003816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800381a:	4651      	mov	r1, sl
 800381c:	018a      	lsls	r2, r1, #6
 800381e:	4651      	mov	r1, sl
 8003820:	ebb2 0801 	subs.w	r8, r2, r1
 8003824:	4659      	mov	r1, fp
 8003826:	eb63 0901 	sbc.w	r9, r3, r1
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800383a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800383e:	4690      	mov	r8, r2
 8003840:	4699      	mov	r9, r3
 8003842:	4623      	mov	r3, r4
 8003844:	eb18 0303 	adds.w	r3, r8, r3
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	462b      	mov	r3, r5
 800384c:	eb49 0303 	adc.w	r3, r9, r3
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800385e:	4629      	mov	r1, r5
 8003860:	024b      	lsls	r3, r1, #9
 8003862:	4621      	mov	r1, r4
 8003864:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003868:	4621      	mov	r1, r4
 800386a:	024a      	lsls	r2, r1, #9
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003872:	2200      	movs	r2, #0
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
 8003876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800387c:	f7fc fd30 	bl	80002e0 <__aeabi_uldivmod>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4613      	mov	r3, r2
 8003886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003888:	e058      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388a:	4b38      	ldr	r3, [pc, #224]	; (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	099b      	lsrs	r3, r3, #6
 8003890:	2200      	movs	r2, #0
 8003892:	4618      	mov	r0, r3
 8003894:	4611      	mov	r1, r2
 8003896:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800389a:	623b      	str	r3, [r7, #32]
 800389c:	2300      	movs	r3, #0
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
 80038a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	f04f 0000 	mov.w	r0, #0
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	0159      	lsls	r1, r3, #5
 80038b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038b6:	0150      	lsls	r0, r2, #5
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4641      	mov	r1, r8
 80038be:	ebb2 0a01 	subs.w	sl, r2, r1
 80038c2:	4649      	mov	r1, r9
 80038c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038dc:	ebb2 040a 	subs.w	r4, r2, sl
 80038e0:	eb63 050b 	sbc.w	r5, r3, fp
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	00eb      	lsls	r3, r5, #3
 80038ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f2:	00e2      	lsls	r2, r4, #3
 80038f4:	4614      	mov	r4, r2
 80038f6:	461d      	mov	r5, r3
 80038f8:	4643      	mov	r3, r8
 80038fa:	18e3      	adds	r3, r4, r3
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	464b      	mov	r3, r9
 8003900:	eb45 0303 	adc.w	r3, r5, r3
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003912:	4629      	mov	r1, r5
 8003914:	028b      	lsls	r3, r1, #10
 8003916:	4621      	mov	r1, r4
 8003918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800391c:	4621      	mov	r1, r4
 800391e:	028a      	lsls	r2, r1, #10
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003926:	2200      	movs	r2, #0
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	61fa      	str	r2, [r7, #28]
 800392c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003930:	f7fc fcd6 	bl	80002e0 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4613      	mov	r3, r2
 800393a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	3301      	adds	r3, #1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800394c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800394e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003956:	e002      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_RCC_GetSysClockFreq+0x204>)
 800395a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800395c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800395e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003960:	4618      	mov	r0, r3
 8003962:	3750      	adds	r7, #80	; 0x50
 8003964:	46bd      	mov	sp, r7
 8003966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	00f42400 	.word	0x00f42400
 8003974:	007a1200 	.word	0x007a1200

08003978 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <HAL_RCC_GetHCLKFreq+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000000 	.word	0x20000000

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003994:	f7ff fff0 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4903      	ldr	r1, [pc, #12]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	0800726c 	.word	0x0800726c

080039b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039bc:	f7ff ffdc 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0b5b      	lsrs	r3, r3, #13
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	; (80039dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40023800 	.word	0x40023800
 80039dc:	0800726c 	.word	0x0800726c

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d012      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a08:	4b69      	ldr	r3, [pc, #420]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a68      	ldr	r2, [pc, #416]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a12:	6093      	str	r3, [r2, #8]
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	4964      	ldr	r1, [pc, #400]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d017      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a3a:	4b5d      	ldr	r3, [pc, #372]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	4959      	ldr	r1, [pc, #356]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a58:	d101      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a66:	2301      	movs	r3, #1
 8003a68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d017      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a76:	4b4e      	ldr	r3, [pc, #312]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	494a      	ldr	r1, [pc, #296]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a94:	d101      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a96:	2301      	movs	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 808b 	beq.w	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ac4:	4b3a      	ldr	r3, [pc, #232]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	4a39      	ldr	r2, [pc, #228]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad0:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003adc:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a34      	ldr	r2, [pc, #208]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae8:	f7fd ff02 	bl	80018f0 <HAL_GetTick>
 8003aec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af0:	f7fd fefe 	bl	80018f0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	; 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e38f      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b02:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b0e:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d035      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d02e      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b2c:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b36:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b42:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b4e:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b54:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d114      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fd fec6 	bl	80018f0 <HAL_GetTick>
 8003b64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b68:	f7fd fec2 	bl	80018f0 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e351      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ee      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b96:	d111      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ba6:	400b      	ands	r3, r1
 8003ba8:	4901      	ldr	r1, [pc, #4]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	0ffffcff 	.word	0x0ffffcff
 8003bbc:	4bac      	ldr	r3, [pc, #688]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4aab      	ldr	r2, [pc, #684]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bc6:	6093      	str	r3, [r2, #8]
 8003bc8:	4ba9      	ldr	r3, [pc, #676]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	49a6      	ldr	r1, [pc, #664]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d010      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003be6:	4ba2      	ldr	r3, [pc, #648]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bec:	4aa0      	ldr	r2, [pc, #640]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003bf6:	4b9e      	ldr	r3, [pc, #632]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	499b      	ldr	r1, [pc, #620]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c14:	4b96      	ldr	r3, [pc, #600]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c22:	4993      	ldr	r1, [pc, #588]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c36:	4b8e      	ldr	r3, [pc, #568]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c44:	498a      	ldr	r1, [pc, #552]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c58:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c66:	4982      	ldr	r1, [pc, #520]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c7a:	4b7d      	ldr	r3, [pc, #500]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4979      	ldr	r1, [pc, #484]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c9c:	4b74      	ldr	r3, [pc, #464]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f023 0203 	bic.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	4971      	ldr	r1, [pc, #452]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	f023 020c 	bic.w	r2, r3, #12
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ccc:	4968      	ldr	r1, [pc, #416]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ce0:	4b63      	ldr	r3, [pc, #396]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cee:	4960      	ldr	r1, [pc, #384]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d02:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d10:	4957      	ldr	r1, [pc, #348]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d24:	4b52      	ldr	r3, [pc, #328]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	494f      	ldr	r1, [pc, #316]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d46:	4b4a      	ldr	r3, [pc, #296]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	4946      	ldr	r1, [pc, #280]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d68:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	493e      	ldr	r1, [pc, #248]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d8a:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d98:	4935      	ldr	r1, [pc, #212]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dac:	4b30      	ldr	r3, [pc, #192]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dba:	492d      	ldr	r1, [pc, #180]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d011      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dce:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ddc:	4924      	ldr	r1, [pc, #144]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dec:	d101      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0e:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1c:	4914      	ldr	r1, [pc, #80]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00b      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e40:	490b      	ldr	r1, [pc, #44]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00f      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e64:	4902      	ldr	r1, [pc, #8]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e6c:	e002      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00b      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e80:	4b8a      	ldr	r3, [pc, #552]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	4986      	ldr	r1, [pc, #536]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00b      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ea4:	4b81      	ldr	r3, [pc, #516]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eaa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb4:	497d      	ldr	r1, [pc, #500]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d006      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80d6 	beq.w	800407c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ed0:	4b76      	ldr	r3, [pc, #472]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a75      	ldr	r2, [pc, #468]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003edc:	f7fd fd08 	bl	80018f0 <HAL_GetTick>
 8003ee0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ee4:	f7fd fd04 	bl	80018f0 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	; 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e195      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d021      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11d      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f16:	4b65      	ldr	r3, [pc, #404]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f24:	4b61      	ldr	r3, [pc, #388]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2a:	0e1b      	lsrs	r3, r3, #24
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	019a      	lsls	r2, r3, #6
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	071b      	lsls	r3, r3, #28
 8003f4a:	4958      	ldr	r1, [pc, #352]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d004      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d02e      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7c:	d129      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f7e:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f8c:	4b47      	ldr	r3, [pc, #284]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f92:	0f1b      	lsrs	r3, r3, #28
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	019a      	lsls	r2, r3, #6
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	061b      	lsls	r3, r3, #24
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	071b      	lsls	r3, r3, #28
 8003fb2:	493e      	ldr	r1, [pc, #248]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fba:	4b3c      	ldr	r3, [pc, #240]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc0:	f023 021f 	bic.w	r2, r3, #31
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	4938      	ldr	r1, [pc, #224]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01d      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fde:	4b33      	ldr	r3, [pc, #204]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe4:	0e1b      	lsrs	r3, r3, #24
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fec:	4b2f      	ldr	r3, [pc, #188]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff2:	0f1b      	lsrs	r3, r3, #28
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	019a      	lsls	r2, r3, #6
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	431a      	orrs	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	061b      	lsls	r3, r3, #24
 800400c:	431a      	orrs	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	071b      	lsls	r3, r3, #28
 8004012:	4926      	ldr	r1, [pc, #152]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d011      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	019a      	lsls	r2, r3, #6
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	061b      	lsls	r3, r3, #24
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	071b      	lsls	r3, r3, #28
 8004042:	491a      	ldr	r1, [pc, #104]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800404a:	4b18      	ldr	r3, [pc, #96]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a17      	ldr	r2, [pc, #92]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004050:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004056:	f7fd fc4b 	bl	80018f0 <HAL_GetTick>
 800405a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800405e:	f7fd fc47 	bl	80018f0 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b64      	cmp	r3, #100	; 0x64
 800406a:	d901      	bls.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e0d8      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	f040 80ce 	bne.w	8004220 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a08      	ldr	r2, [pc, #32]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800408a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004090:	f7fd fc2e 	bl	80018f0 <HAL_GetTick>
 8004094:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004096:	e00b      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004098:	f7fd fc2a 	bl	80018f0 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d904      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0bb      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040b0:	4b5e      	ldr	r3, [pc, #376]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040bc:	d0ec      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d02e      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d12a      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040e6:	4b51      	ldr	r3, [pc, #324]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040f4:	4b4d      	ldr	r3, [pc, #308]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	0f1b      	lsrs	r3, r3, #28
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	019a      	lsls	r2, r3, #6
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	071b      	lsls	r3, r3, #28
 800411a:	4944      	ldr	r1, [pc, #272]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004122:	4b42      	ldr	r3, [pc, #264]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004128:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	3b01      	subs	r3, #1
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	493d      	ldr	r1, [pc, #244]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d022      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004150:	d11d      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004152:	4b36      	ldr	r3, [pc, #216]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	0e1b      	lsrs	r3, r3, #24
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004160:	4b32      	ldr	r3, [pc, #200]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	0f1b      	lsrs	r3, r3, #28
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	019a      	lsls	r2, r3, #6
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	431a      	orrs	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	061b      	lsls	r3, r3, #24
 8004180:	431a      	orrs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	071b      	lsls	r3, r3, #28
 8004186:	4929      	ldr	r1, [pc, #164]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d028      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	0e1b      	lsrs	r3, r3, #24
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041a8:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	0c1b      	lsrs	r3, r3, #16
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	019a      	lsls	r2, r3, #6
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	431a      	orrs	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	071b      	lsls	r3, r3, #28
 80041ce:	4917      	ldr	r1, [pc, #92]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	4911      	ldr	r1, [pc, #68]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0e      	ldr	r2, [pc, #56]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f8:	f7fd fb7a 	bl	80018f0 <HAL_GetTick>
 80041fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004200:	f7fd fb76 	bl	80018f0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e007      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800421a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800421e:	d1ef      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800

08004230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e040      	b.n	80042c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd f934 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	; 0x24
 800425c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f82c 	bl	80042cc <UART_SetConfig>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e022      	b.n	80042c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fa84 	bl	8004794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800429a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fb0b 	bl	80048d8 <UART_CheckIdleState>
 80042c2:	4603      	mov	r3, r0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4ba6      	ldr	r3, [pc, #664]	; (8004590 <UART_SetConfig+0x2c4>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	6979      	ldr	r1, [r7, #20]
 8004300:	430b      	orrs	r3, r1
 8004302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	430a      	orrs	r2, r1
 800433c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a94      	ldr	r2, [pc, #592]	; (8004594 <UART_SetConfig+0x2c8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d120      	bne.n	800438a <UART_SetConfig+0xbe>
 8004348:	4b93      	ldr	r3, [pc, #588]	; (8004598 <UART_SetConfig+0x2cc>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b03      	cmp	r3, #3
 8004354:	d816      	bhi.n	8004384 <UART_SetConfig+0xb8>
 8004356:	a201      	add	r2, pc, #4	; (adr r2, 800435c <UART_SetConfig+0x90>)
 8004358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435c:	0800436d 	.word	0x0800436d
 8004360:	08004379 	.word	0x08004379
 8004364:	08004373 	.word	0x08004373
 8004368:	0800437f 	.word	0x0800437f
 800436c:	2301      	movs	r3, #1
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e150      	b.n	8004614 <UART_SetConfig+0x348>
 8004372:	2302      	movs	r3, #2
 8004374:	77fb      	strb	r3, [r7, #31]
 8004376:	e14d      	b.n	8004614 <UART_SetConfig+0x348>
 8004378:	2304      	movs	r3, #4
 800437a:	77fb      	strb	r3, [r7, #31]
 800437c:	e14a      	b.n	8004614 <UART_SetConfig+0x348>
 800437e:	2308      	movs	r3, #8
 8004380:	77fb      	strb	r3, [r7, #31]
 8004382:	e147      	b.n	8004614 <UART_SetConfig+0x348>
 8004384:	2310      	movs	r3, #16
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e144      	b.n	8004614 <UART_SetConfig+0x348>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a83      	ldr	r2, [pc, #524]	; (800459c <UART_SetConfig+0x2d0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d132      	bne.n	80043fa <UART_SetConfig+0x12e>
 8004394:	4b80      	ldr	r3, [pc, #512]	; (8004598 <UART_SetConfig+0x2cc>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d828      	bhi.n	80043f4 <UART_SetConfig+0x128>
 80043a2:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <UART_SetConfig+0xdc>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043dd 	.word	0x080043dd
 80043ac:	080043f5 	.word	0x080043f5
 80043b0:	080043f5 	.word	0x080043f5
 80043b4:	080043f5 	.word	0x080043f5
 80043b8:	080043e9 	.word	0x080043e9
 80043bc:	080043f5 	.word	0x080043f5
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	080043f5 	.word	0x080043f5
 80043c8:	080043e3 	.word	0x080043e3
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	080043f5 	.word	0x080043f5
 80043d4:	080043f5 	.word	0x080043f5
 80043d8:	080043ef 	.word	0x080043ef
 80043dc:	2300      	movs	r3, #0
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e118      	b.n	8004614 <UART_SetConfig+0x348>
 80043e2:	2302      	movs	r3, #2
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e115      	b.n	8004614 <UART_SetConfig+0x348>
 80043e8:	2304      	movs	r3, #4
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e112      	b.n	8004614 <UART_SetConfig+0x348>
 80043ee:	2308      	movs	r3, #8
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e10f      	b.n	8004614 <UART_SetConfig+0x348>
 80043f4:	2310      	movs	r3, #16
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e10c      	b.n	8004614 <UART_SetConfig+0x348>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a68      	ldr	r2, [pc, #416]	; (80045a0 <UART_SetConfig+0x2d4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d120      	bne.n	8004446 <UART_SetConfig+0x17a>
 8004404:	4b64      	ldr	r3, [pc, #400]	; (8004598 <UART_SetConfig+0x2cc>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800440e:	2b30      	cmp	r3, #48	; 0x30
 8004410:	d013      	beq.n	800443a <UART_SetConfig+0x16e>
 8004412:	2b30      	cmp	r3, #48	; 0x30
 8004414:	d814      	bhi.n	8004440 <UART_SetConfig+0x174>
 8004416:	2b20      	cmp	r3, #32
 8004418:	d009      	beq.n	800442e <UART_SetConfig+0x162>
 800441a:	2b20      	cmp	r3, #32
 800441c:	d810      	bhi.n	8004440 <UART_SetConfig+0x174>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <UART_SetConfig+0x15c>
 8004422:	2b10      	cmp	r3, #16
 8004424:	d006      	beq.n	8004434 <UART_SetConfig+0x168>
 8004426:	e00b      	b.n	8004440 <UART_SetConfig+0x174>
 8004428:	2300      	movs	r3, #0
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e0f2      	b.n	8004614 <UART_SetConfig+0x348>
 800442e:	2302      	movs	r3, #2
 8004430:	77fb      	strb	r3, [r7, #31]
 8004432:	e0ef      	b.n	8004614 <UART_SetConfig+0x348>
 8004434:	2304      	movs	r3, #4
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e0ec      	b.n	8004614 <UART_SetConfig+0x348>
 800443a:	2308      	movs	r3, #8
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	e0e9      	b.n	8004614 <UART_SetConfig+0x348>
 8004440:	2310      	movs	r3, #16
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e0e6      	b.n	8004614 <UART_SetConfig+0x348>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a56      	ldr	r2, [pc, #344]	; (80045a4 <UART_SetConfig+0x2d8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d120      	bne.n	8004492 <UART_SetConfig+0x1c6>
 8004450:	4b51      	ldr	r3, [pc, #324]	; (8004598 <UART_SetConfig+0x2cc>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800445a:	2bc0      	cmp	r3, #192	; 0xc0
 800445c:	d013      	beq.n	8004486 <UART_SetConfig+0x1ba>
 800445e:	2bc0      	cmp	r3, #192	; 0xc0
 8004460:	d814      	bhi.n	800448c <UART_SetConfig+0x1c0>
 8004462:	2b80      	cmp	r3, #128	; 0x80
 8004464:	d009      	beq.n	800447a <UART_SetConfig+0x1ae>
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d810      	bhi.n	800448c <UART_SetConfig+0x1c0>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <UART_SetConfig+0x1a8>
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d006      	beq.n	8004480 <UART_SetConfig+0x1b4>
 8004472:	e00b      	b.n	800448c <UART_SetConfig+0x1c0>
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e0cc      	b.n	8004614 <UART_SetConfig+0x348>
 800447a:	2302      	movs	r3, #2
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e0c9      	b.n	8004614 <UART_SetConfig+0x348>
 8004480:	2304      	movs	r3, #4
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e0c6      	b.n	8004614 <UART_SetConfig+0x348>
 8004486:	2308      	movs	r3, #8
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e0c3      	b.n	8004614 <UART_SetConfig+0x348>
 800448c:	2310      	movs	r3, #16
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e0c0      	b.n	8004614 <UART_SetConfig+0x348>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a44      	ldr	r2, [pc, #272]	; (80045a8 <UART_SetConfig+0x2dc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d125      	bne.n	80044e8 <UART_SetConfig+0x21c>
 800449c:	4b3e      	ldr	r3, [pc, #248]	; (8004598 <UART_SetConfig+0x2cc>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044aa:	d017      	beq.n	80044dc <UART_SetConfig+0x210>
 80044ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b0:	d817      	bhi.n	80044e2 <UART_SetConfig+0x216>
 80044b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b6:	d00b      	beq.n	80044d0 <UART_SetConfig+0x204>
 80044b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044bc:	d811      	bhi.n	80044e2 <UART_SetConfig+0x216>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <UART_SetConfig+0x1fe>
 80044c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c6:	d006      	beq.n	80044d6 <UART_SetConfig+0x20a>
 80044c8:	e00b      	b.n	80044e2 <UART_SetConfig+0x216>
 80044ca:	2300      	movs	r3, #0
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e0a1      	b.n	8004614 <UART_SetConfig+0x348>
 80044d0:	2302      	movs	r3, #2
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e09e      	b.n	8004614 <UART_SetConfig+0x348>
 80044d6:	2304      	movs	r3, #4
 80044d8:	77fb      	strb	r3, [r7, #31]
 80044da:	e09b      	b.n	8004614 <UART_SetConfig+0x348>
 80044dc:	2308      	movs	r3, #8
 80044de:	77fb      	strb	r3, [r7, #31]
 80044e0:	e098      	b.n	8004614 <UART_SetConfig+0x348>
 80044e2:	2310      	movs	r3, #16
 80044e4:	77fb      	strb	r3, [r7, #31]
 80044e6:	e095      	b.n	8004614 <UART_SetConfig+0x348>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2f      	ldr	r2, [pc, #188]	; (80045ac <UART_SetConfig+0x2e0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d125      	bne.n	800453e <UART_SetConfig+0x272>
 80044f2:	4b29      	ldr	r3, [pc, #164]	; (8004598 <UART_SetConfig+0x2cc>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004500:	d017      	beq.n	8004532 <UART_SetConfig+0x266>
 8004502:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004506:	d817      	bhi.n	8004538 <UART_SetConfig+0x26c>
 8004508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800450c:	d00b      	beq.n	8004526 <UART_SetConfig+0x25a>
 800450e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004512:	d811      	bhi.n	8004538 <UART_SetConfig+0x26c>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <UART_SetConfig+0x254>
 8004518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451c:	d006      	beq.n	800452c <UART_SetConfig+0x260>
 800451e:	e00b      	b.n	8004538 <UART_SetConfig+0x26c>
 8004520:	2301      	movs	r3, #1
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e076      	b.n	8004614 <UART_SetConfig+0x348>
 8004526:	2302      	movs	r3, #2
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	e073      	b.n	8004614 <UART_SetConfig+0x348>
 800452c:	2304      	movs	r3, #4
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e070      	b.n	8004614 <UART_SetConfig+0x348>
 8004532:	2308      	movs	r3, #8
 8004534:	77fb      	strb	r3, [r7, #31]
 8004536:	e06d      	b.n	8004614 <UART_SetConfig+0x348>
 8004538:	2310      	movs	r3, #16
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e06a      	b.n	8004614 <UART_SetConfig+0x348>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1b      	ldr	r2, [pc, #108]	; (80045b0 <UART_SetConfig+0x2e4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d138      	bne.n	80045ba <UART_SetConfig+0x2ee>
 8004548:	4b13      	ldr	r3, [pc, #76]	; (8004598 <UART_SetConfig+0x2cc>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004552:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004556:	d017      	beq.n	8004588 <UART_SetConfig+0x2bc>
 8004558:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800455c:	d82a      	bhi.n	80045b4 <UART_SetConfig+0x2e8>
 800455e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004562:	d00b      	beq.n	800457c <UART_SetConfig+0x2b0>
 8004564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004568:	d824      	bhi.n	80045b4 <UART_SetConfig+0x2e8>
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <UART_SetConfig+0x2aa>
 800456e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004572:	d006      	beq.n	8004582 <UART_SetConfig+0x2b6>
 8004574:	e01e      	b.n	80045b4 <UART_SetConfig+0x2e8>
 8004576:	2300      	movs	r3, #0
 8004578:	77fb      	strb	r3, [r7, #31]
 800457a:	e04b      	b.n	8004614 <UART_SetConfig+0x348>
 800457c:	2302      	movs	r3, #2
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e048      	b.n	8004614 <UART_SetConfig+0x348>
 8004582:	2304      	movs	r3, #4
 8004584:	77fb      	strb	r3, [r7, #31]
 8004586:	e045      	b.n	8004614 <UART_SetConfig+0x348>
 8004588:	2308      	movs	r3, #8
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e042      	b.n	8004614 <UART_SetConfig+0x348>
 800458e:	bf00      	nop
 8004590:	efff69f3 	.word	0xefff69f3
 8004594:	40011000 	.word	0x40011000
 8004598:	40023800 	.word	0x40023800
 800459c:	40004400 	.word	0x40004400
 80045a0:	40004800 	.word	0x40004800
 80045a4:	40004c00 	.word	0x40004c00
 80045a8:	40005000 	.word	0x40005000
 80045ac:	40011400 	.word	0x40011400
 80045b0:	40007800 	.word	0x40007800
 80045b4:	2310      	movs	r3, #16
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e02c      	b.n	8004614 <UART_SetConfig+0x348>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a72      	ldr	r2, [pc, #456]	; (8004788 <UART_SetConfig+0x4bc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d125      	bne.n	8004610 <UART_SetConfig+0x344>
 80045c4:	4b71      	ldr	r3, [pc, #452]	; (800478c <UART_SetConfig+0x4c0>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80045d2:	d017      	beq.n	8004604 <UART_SetConfig+0x338>
 80045d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80045d8:	d817      	bhi.n	800460a <UART_SetConfig+0x33e>
 80045da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045de:	d00b      	beq.n	80045f8 <UART_SetConfig+0x32c>
 80045e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e4:	d811      	bhi.n	800460a <UART_SetConfig+0x33e>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <UART_SetConfig+0x326>
 80045ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ee:	d006      	beq.n	80045fe <UART_SetConfig+0x332>
 80045f0:	e00b      	b.n	800460a <UART_SetConfig+0x33e>
 80045f2:	2300      	movs	r3, #0
 80045f4:	77fb      	strb	r3, [r7, #31]
 80045f6:	e00d      	b.n	8004614 <UART_SetConfig+0x348>
 80045f8:	2302      	movs	r3, #2
 80045fa:	77fb      	strb	r3, [r7, #31]
 80045fc:	e00a      	b.n	8004614 <UART_SetConfig+0x348>
 80045fe:	2304      	movs	r3, #4
 8004600:	77fb      	strb	r3, [r7, #31]
 8004602:	e007      	b.n	8004614 <UART_SetConfig+0x348>
 8004604:	2308      	movs	r3, #8
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e004      	b.n	8004614 <UART_SetConfig+0x348>
 800460a:	2310      	movs	r3, #16
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e001      	b.n	8004614 <UART_SetConfig+0x348>
 8004610:	2310      	movs	r3, #16
 8004612:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461c:	d15b      	bne.n	80046d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800461e:	7ffb      	ldrb	r3, [r7, #31]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d828      	bhi.n	8004676 <UART_SetConfig+0x3aa>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <UART_SetConfig+0x360>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	08004651 	.word	0x08004651
 8004630:	08004659 	.word	0x08004659
 8004634:	08004661 	.word	0x08004661
 8004638:	08004677 	.word	0x08004677
 800463c:	08004667 	.word	0x08004667
 8004640:	08004677 	.word	0x08004677
 8004644:	08004677 	.word	0x08004677
 8004648:	08004677 	.word	0x08004677
 800464c:	0800466f 	.word	0x0800466f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004650:	f7ff f99e 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004654:	61b8      	str	r0, [r7, #24]
        break;
 8004656:	e013      	b.n	8004680 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004658:	f7ff f9ae 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 800465c:	61b8      	str	r0, [r7, #24]
        break;
 800465e:	e00f      	b.n	8004680 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004660:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <UART_SetConfig+0x4c4>)
 8004662:	61bb      	str	r3, [r7, #24]
        break;
 8004664:	e00c      	b.n	8004680 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004666:	f7ff f881 	bl	800376c <HAL_RCC_GetSysClockFreq>
 800466a:	61b8      	str	r0, [r7, #24]
        break;
 800466c:	e008      	b.n	8004680 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004672:	61bb      	str	r3, [r7, #24]
        break;
 8004674:	e004      	b.n	8004680 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	77bb      	strb	r3, [r7, #30]
        break;
 800467e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d074      	beq.n	8004770 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	005a      	lsls	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	441a      	add	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b0f      	cmp	r3, #15
 80046a0:	d916      	bls.n	80046d0 <UART_SetConfig+0x404>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d212      	bcs.n	80046d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f023 030f 	bic.w	r3, r3, #15
 80046b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	b29a      	uxth	r2, r3
 80046c0:	89fb      	ldrh	r3, [r7, #14]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	89fa      	ldrh	r2, [r7, #14]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	e04f      	b.n	8004770 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77bb      	strb	r3, [r7, #30]
 80046d4:	e04c      	b.n	8004770 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046d6:	7ffb      	ldrb	r3, [r7, #31]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d828      	bhi.n	800472e <UART_SetConfig+0x462>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0x418>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004719 	.word	0x08004719
 80046f0:	0800472f 	.word	0x0800472f
 80046f4:	0800471f 	.word	0x0800471f
 80046f8:	0800472f 	.word	0x0800472f
 80046fc:	0800472f 	.word	0x0800472f
 8004700:	0800472f 	.word	0x0800472f
 8004704:	08004727 	.word	0x08004727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004708:	f7ff f942 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 800470c:	61b8      	str	r0, [r7, #24]
        break;
 800470e:	e013      	b.n	8004738 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004710:	f7ff f952 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 8004714:	61b8      	str	r0, [r7, #24]
        break;
 8004716:	e00f      	b.n	8004738 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <UART_SetConfig+0x4c4>)
 800471a:	61bb      	str	r3, [r7, #24]
        break;
 800471c:	e00c      	b.n	8004738 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800471e:	f7ff f825 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8004722:	61b8      	str	r0, [r7, #24]
        break;
 8004724:	e008      	b.n	8004738 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472a:	61bb      	str	r3, [r7, #24]
        break;
 800472c:	e004      	b.n	8004738 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	77bb      	strb	r3, [r7, #30]
        break;
 8004736:	bf00      	nop
    }

    if (pclk != 0U)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d018      	beq.n	8004770 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	085a      	lsrs	r2, r3, #1
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	441a      	add	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b0f      	cmp	r3, #15
 8004756:	d909      	bls.n	800476c <UART_SetConfig+0x4a0>
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475e:	d205      	bcs.n	800476c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	e001      	b.n	8004770 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800477c:	7fbb      	ldrb	r3, [r7, #30]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3720      	adds	r7, #32
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40007c00 	.word	0x40007c00
 800478c:	40023800 	.word	0x40023800
 8004790:	00f42400 	.word	0x00f42400

08004794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01a      	beq.n	80048aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004892:	d10a      	bne.n	80048aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	605a      	str	r2, [r3, #4]
  }
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af02      	add	r7, sp, #8
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048e8:	f7fd f802 	bl	80018f0 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d10e      	bne.n	800491a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f831 	bl	8004972 <UART_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e027      	b.n	800496a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b04      	cmp	r3, #4
 8004926:	d10e      	bne.n	8004946 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f81b 	bl	8004972 <UART_WaitOnFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e011      	b.n	800496a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b09c      	sub	sp, #112	; 0x70
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004982:	e0a7      	b.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	f000 80a3 	beq.w	8004ad4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7fc ffaf 	bl	80018f0 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800499e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d13f      	bne.n	8004a24 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049b8:	667b      	str	r3, [r7, #100]	; 0x64
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e6      	bne.n	80049a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3308      	adds	r3, #8
 80049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	663b      	str	r3, [r7, #96]	; 0x60
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e5      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e068      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d050      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a40:	d148      	bne.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e6      	bne.n	8004a4c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3308      	adds	r3, #8
 8004a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f023 0301 	bic.w	r3, r3, #1
 8004a94:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a9e:	623a      	str	r2, [r7, #32]
 8004aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	69f9      	ldr	r1, [r7, #28]
 8004aa4:	6a3a      	ldr	r2, [r7, #32]
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e5      	bne.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e010      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	f43f af48 	beq.w	8004984 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3770      	adds	r7, #112	; 0x70
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b00:	b084      	sub	sp, #16
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	f107 001c 	add.w	r0, r7, #28
 8004b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d120      	bne.n	8004b5a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	4b20      	ldr	r3, [pc, #128]	; (8004bac <USB_CoreInit+0xac>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d105      	bne.n	8004b4e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fa96 	bl	8005080 <USB_CoreReset>
 8004b54:	4603      	mov	r3, r0
 8004b56:	73fb      	strb	r3, [r7, #15]
 8004b58:	e010      	b.n	8004b7c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fa8a 	bl	8005080 <USB_CoreReset>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d10b      	bne.n	8004b9a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f043 0206 	orr.w	r2, r3, #6
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f043 0220 	orr.w	r2, r3, #32
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ba6:	b004      	add	sp, #16
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	ffbdffbf 	.word	0xffbdffbf

08004bb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f023 0201 	bic.w	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d115      	bne.n	8004c20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c00:	2001      	movs	r0, #1
 8004c02:	f7fc fe81 	bl	8001908 <HAL_Delay>
      ms++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fa29 	bl	8005064 <USB_GetMode>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d01e      	beq.n	8004c56 <USB_SetCurrentMode+0x84>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b31      	cmp	r3, #49	; 0x31
 8004c1c:	d9f0      	bls.n	8004c00 <USB_SetCurrentMode+0x2e>
 8004c1e:	e01a      	b.n	8004c56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d115      	bne.n	8004c52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c32:	2001      	movs	r0, #1
 8004c34:	f7fc fe68 	bl	8001908 <HAL_Delay>
      ms++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fa10 	bl	8005064 <USB_GetMode>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <USB_SetCurrentMode+0x84>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b31      	cmp	r3, #49	; 0x31
 8004c4e:	d9f0      	bls.n	8004c32 <USB_SetCurrentMode+0x60>
 8004c50:	e001      	b.n	8004c56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e005      	b.n	8004c62 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b32      	cmp	r3, #50	; 0x32
 8004c5a:	d101      	bne.n	8004c60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b086      	sub	sp, #24
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	e009      	b.n	8004ca0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	3340      	adds	r3, #64	; 0x40
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	2200      	movs	r2, #0
 8004c98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b0e      	cmp	r3, #14
 8004ca4:	d9f2      	bls.n	8004c8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d11c      	bne.n	8004ce6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cba:	f043 0302 	orr.w	r3, r3, #2
 8004cbe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e005      	b.n	8004cf2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d04:	4619      	mov	r1, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	680b      	ldr	r3, [r1, #0]
 8004d10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10c      	bne.n	8004d32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d104      	bne.n	8004d28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d1e:	2100      	movs	r1, #0
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f965 	bl	8004ff0 <USB_SetDevSpeed>
 8004d26:	e008      	b.n	8004d3a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d28:	2101      	movs	r1, #1
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f960 	bl	8004ff0 <USB_SetDevSpeed>
 8004d30:	e003      	b.n	8004d3a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d32:	2103      	movs	r1, #3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f95b 	bl	8004ff0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d3a:	2110      	movs	r1, #16
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f8f3 	bl	8004f28 <USB_FlushTxFifo>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f91f 	bl	8004f90 <USB_FlushRxFifo>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	461a      	mov	r2, r3
 8004d64:	2300      	movs	r3, #0
 8004d66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6e:	461a      	mov	r2, r3
 8004d70:	2300      	movs	r3, #0
 8004d72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d80:	2300      	movs	r3, #0
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	e043      	b.n	8004e0e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d9c:	d118      	bne.n	8004dd0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	461a      	mov	r2, r3
 8004db2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	e013      	b.n	8004de2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e008      	b.n	8004de2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	461a      	mov	r2, r3
 8004dde:	2300      	movs	r3, #0
 8004de0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	461a      	mov	r2, r3
 8004df0:	2300      	movs	r3, #0
 8004df2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	461a      	mov	r2, r3
 8004e02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d3b7      	bcc.n	8004d86 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e16:	2300      	movs	r3, #0
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	e043      	b.n	8004ea4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e32:	d118      	bne.n	8004e66 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e46:	461a      	mov	r2, r3
 8004e48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	e013      	b.n	8004e78 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	e008      	b.n	8004e78 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e72:	461a      	mov	r2, r3
 8004e74:	2300      	movs	r3, #0
 8004e76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	461a      	mov	r2, r3
 8004e86:	2300      	movs	r3, #0
 8004e88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	461a      	mov	r2, r3
 8004e98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d3b7      	bcc.n	8004e1c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ebe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ecc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	f043 0210 	orr.w	r2, r3, #16
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <USB_DevInit+0x2b4>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f043 0208 	orr.w	r2, r3, #8
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d105      	bne.n	8004f10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <USB_DevInit+0x2b8>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f1c:	b004      	add	sp, #16
 8004f1e:	4770      	bx	lr
 8004f20:	803c3800 	.word	0x803c3800
 8004f24:	40000004 	.word	0x40000004

08004f28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <USB_FlushTxFifo+0x64>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d901      	bls.n	8004f48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e01b      	b.n	8004f80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	daf2      	bge.n	8004f36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	019b      	lsls	r3, r3, #6
 8004f58:	f043 0220 	orr.w	r2, r3, #32
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <USB_FlushTxFifo+0x64>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e006      	b.n	8004f80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d0f0      	beq.n	8004f60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	00030d40 	.word	0x00030d40

08004f90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4a11      	ldr	r2, [pc, #68]	; (8004fec <USB_FlushRxFifo+0x5c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e018      	b.n	8004fe0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	daf2      	bge.n	8004f9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2210      	movs	r2, #16
 8004fbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a08      	ldr	r2, [pc, #32]	; (8004fec <USB_FlushRxFifo+0x5c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e006      	b.n	8004fe0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d0f0      	beq.n	8004fc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	00030d40 	.word	0x00030d40

08004ff0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800503c:	f023 0303 	bic.w	r3, r3, #3
 8005040:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005050:	f043 0302 	orr.w	r3, r3, #2
 8005054:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0301 	and.w	r3, r3, #1
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3301      	adds	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <USB_CoreReset+0x64>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d901      	bls.n	800509e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e01b      	b.n	80050d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	daf2      	bge.n	800508c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f043 0201 	orr.w	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3301      	adds	r3, #1
 80050ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <USB_CoreReset+0x64>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e006      	b.n	80050d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d0f0      	beq.n	80050b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	00030d40 	.word	0x00030d40

080050e8 <std>:
 80050e8:	2300      	movs	r3, #0
 80050ea:	b510      	push	{r4, lr}
 80050ec:	4604      	mov	r4, r0
 80050ee:	e9c0 3300 	strd	r3, r3, [r0]
 80050f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050f6:	6083      	str	r3, [r0, #8]
 80050f8:	8181      	strh	r1, [r0, #12]
 80050fa:	6643      	str	r3, [r0, #100]	; 0x64
 80050fc:	81c2      	strh	r2, [r0, #14]
 80050fe:	6183      	str	r3, [r0, #24]
 8005100:	4619      	mov	r1, r3
 8005102:	2208      	movs	r2, #8
 8005104:	305c      	adds	r0, #92	; 0x5c
 8005106:	f000 f9e5 	bl	80054d4 <memset>
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <std+0x38>)
 800510c:	6263      	str	r3, [r4, #36]	; 0x24
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <std+0x3c>)
 8005110:	62a3      	str	r3, [r4, #40]	; 0x28
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <std+0x40>)
 8005114:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <std+0x44>)
 8005118:	6224      	str	r4, [r4, #32]
 800511a:	6323      	str	r3, [r4, #48]	; 0x30
 800511c:	bd10      	pop	{r4, pc}
 800511e:	bf00      	nop
 8005120:	08005325 	.word	0x08005325
 8005124:	08005347 	.word	0x08005347
 8005128:	0800537f 	.word	0x0800537f
 800512c:	080053a3 	.word	0x080053a3

08005130 <stdio_exit_handler>:
 8005130:	4a02      	ldr	r2, [pc, #8]	; (800513c <stdio_exit_handler+0xc>)
 8005132:	4903      	ldr	r1, [pc, #12]	; (8005140 <stdio_exit_handler+0x10>)
 8005134:	4803      	ldr	r0, [pc, #12]	; (8005144 <stdio_exit_handler+0x14>)
 8005136:	f000 b869 	b.w	800520c <_fwalk_sglue>
 800513a:	bf00      	nop
 800513c:	2000000c 	.word	0x2000000c
 8005140:	08005e6d 	.word	0x08005e6d
 8005144:	20000018 	.word	0x20000018

08005148 <cleanup_stdio>:
 8005148:	6841      	ldr	r1, [r0, #4]
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <cleanup_stdio+0x34>)
 800514c:	4299      	cmp	r1, r3
 800514e:	b510      	push	{r4, lr}
 8005150:	4604      	mov	r4, r0
 8005152:	d001      	beq.n	8005158 <cleanup_stdio+0x10>
 8005154:	f000 fe8a 	bl	8005e6c <_fflush_r>
 8005158:	68a1      	ldr	r1, [r4, #8]
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <cleanup_stdio+0x38>)
 800515c:	4299      	cmp	r1, r3
 800515e:	d002      	beq.n	8005166 <cleanup_stdio+0x1e>
 8005160:	4620      	mov	r0, r4
 8005162:	f000 fe83 	bl	8005e6c <_fflush_r>
 8005166:	68e1      	ldr	r1, [r4, #12]
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <cleanup_stdio+0x3c>)
 800516a:	4299      	cmp	r1, r3
 800516c:	d004      	beq.n	8005178 <cleanup_stdio+0x30>
 800516e:	4620      	mov	r0, r4
 8005170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005174:	f000 be7a 	b.w	8005e6c <_fflush_r>
 8005178:	bd10      	pop	{r4, pc}
 800517a:	bf00      	nop
 800517c:	20000894 	.word	0x20000894
 8005180:	200008fc 	.word	0x200008fc
 8005184:	20000964 	.word	0x20000964

08005188 <global_stdio_init.part.0>:
 8005188:	b510      	push	{r4, lr}
 800518a:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <global_stdio_init.part.0+0x30>)
 800518c:	4c0b      	ldr	r4, [pc, #44]	; (80051bc <global_stdio_init.part.0+0x34>)
 800518e:	4a0c      	ldr	r2, [pc, #48]	; (80051c0 <global_stdio_init.part.0+0x38>)
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	4620      	mov	r0, r4
 8005194:	2200      	movs	r2, #0
 8005196:	2104      	movs	r1, #4
 8005198:	f7ff ffa6 	bl	80050e8 <std>
 800519c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80051a0:	2201      	movs	r2, #1
 80051a2:	2109      	movs	r1, #9
 80051a4:	f7ff ffa0 	bl	80050e8 <std>
 80051a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80051ac:	2202      	movs	r2, #2
 80051ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b2:	2112      	movs	r1, #18
 80051b4:	f7ff bf98 	b.w	80050e8 <std>
 80051b8:	200009cc 	.word	0x200009cc
 80051bc:	20000894 	.word	0x20000894
 80051c0:	08005131 	.word	0x08005131

080051c4 <__sfp_lock_acquire>:
 80051c4:	4801      	ldr	r0, [pc, #4]	; (80051cc <__sfp_lock_acquire+0x8>)
 80051c6:	f000 b9fd 	b.w	80055c4 <__retarget_lock_acquire_recursive>
 80051ca:	bf00      	nop
 80051cc:	200009d5 	.word	0x200009d5

080051d0 <__sfp_lock_release>:
 80051d0:	4801      	ldr	r0, [pc, #4]	; (80051d8 <__sfp_lock_release+0x8>)
 80051d2:	f000 b9f8 	b.w	80055c6 <__retarget_lock_release_recursive>
 80051d6:	bf00      	nop
 80051d8:	200009d5 	.word	0x200009d5

080051dc <__sinit>:
 80051dc:	b510      	push	{r4, lr}
 80051de:	4604      	mov	r4, r0
 80051e0:	f7ff fff0 	bl	80051c4 <__sfp_lock_acquire>
 80051e4:	6a23      	ldr	r3, [r4, #32]
 80051e6:	b11b      	cbz	r3, 80051f0 <__sinit+0x14>
 80051e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ec:	f7ff bff0 	b.w	80051d0 <__sfp_lock_release>
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <__sinit+0x28>)
 80051f2:	6223      	str	r3, [r4, #32]
 80051f4:	4b04      	ldr	r3, [pc, #16]	; (8005208 <__sinit+0x2c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1f5      	bne.n	80051e8 <__sinit+0xc>
 80051fc:	f7ff ffc4 	bl	8005188 <global_stdio_init.part.0>
 8005200:	e7f2      	b.n	80051e8 <__sinit+0xc>
 8005202:	bf00      	nop
 8005204:	08005149 	.word	0x08005149
 8005208:	200009cc 	.word	0x200009cc

0800520c <_fwalk_sglue>:
 800520c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005210:	4607      	mov	r7, r0
 8005212:	4688      	mov	r8, r1
 8005214:	4614      	mov	r4, r2
 8005216:	2600      	movs	r6, #0
 8005218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800521c:	f1b9 0901 	subs.w	r9, r9, #1
 8005220:	d505      	bpl.n	800522e <_fwalk_sglue+0x22>
 8005222:	6824      	ldr	r4, [r4, #0]
 8005224:	2c00      	cmp	r4, #0
 8005226:	d1f7      	bne.n	8005218 <_fwalk_sglue+0xc>
 8005228:	4630      	mov	r0, r6
 800522a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800522e:	89ab      	ldrh	r3, [r5, #12]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d907      	bls.n	8005244 <_fwalk_sglue+0x38>
 8005234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005238:	3301      	adds	r3, #1
 800523a:	d003      	beq.n	8005244 <_fwalk_sglue+0x38>
 800523c:	4629      	mov	r1, r5
 800523e:	4638      	mov	r0, r7
 8005240:	47c0      	blx	r8
 8005242:	4306      	orrs	r6, r0
 8005244:	3568      	adds	r5, #104	; 0x68
 8005246:	e7e9      	b.n	800521c <_fwalk_sglue+0x10>

08005248 <iprintf>:
 8005248:	b40f      	push	{r0, r1, r2, r3}
 800524a:	b507      	push	{r0, r1, r2, lr}
 800524c:	4906      	ldr	r1, [pc, #24]	; (8005268 <iprintf+0x20>)
 800524e:	ab04      	add	r3, sp, #16
 8005250:	6808      	ldr	r0, [r1, #0]
 8005252:	f853 2b04 	ldr.w	r2, [r3], #4
 8005256:	6881      	ldr	r1, [r0, #8]
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	f000 fad7 	bl	800580c <_vfiprintf_r>
 800525e:	b003      	add	sp, #12
 8005260:	f85d eb04 	ldr.w	lr, [sp], #4
 8005264:	b004      	add	sp, #16
 8005266:	4770      	bx	lr
 8005268:	20000064 	.word	0x20000064

0800526c <_puts_r>:
 800526c:	6a03      	ldr	r3, [r0, #32]
 800526e:	b570      	push	{r4, r5, r6, lr}
 8005270:	6884      	ldr	r4, [r0, #8]
 8005272:	4605      	mov	r5, r0
 8005274:	460e      	mov	r6, r1
 8005276:	b90b      	cbnz	r3, 800527c <_puts_r+0x10>
 8005278:	f7ff ffb0 	bl	80051dc <__sinit>
 800527c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800527e:	07db      	lsls	r3, r3, #31
 8005280:	d405      	bmi.n	800528e <_puts_r+0x22>
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	0598      	lsls	r0, r3, #22
 8005286:	d402      	bmi.n	800528e <_puts_r+0x22>
 8005288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800528a:	f000 f99b 	bl	80055c4 <__retarget_lock_acquire_recursive>
 800528e:	89a3      	ldrh	r3, [r4, #12]
 8005290:	0719      	lsls	r1, r3, #28
 8005292:	d513      	bpl.n	80052bc <_puts_r+0x50>
 8005294:	6923      	ldr	r3, [r4, #16]
 8005296:	b18b      	cbz	r3, 80052bc <_puts_r+0x50>
 8005298:	3e01      	subs	r6, #1
 800529a:	68a3      	ldr	r3, [r4, #8]
 800529c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052a0:	3b01      	subs	r3, #1
 80052a2:	60a3      	str	r3, [r4, #8]
 80052a4:	b9e9      	cbnz	r1, 80052e2 <_puts_r+0x76>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	da2e      	bge.n	8005308 <_puts_r+0x9c>
 80052aa:	4622      	mov	r2, r4
 80052ac:	210a      	movs	r1, #10
 80052ae:	4628      	mov	r0, r5
 80052b0:	f000 f87b 	bl	80053aa <__swbuf_r>
 80052b4:	3001      	adds	r0, #1
 80052b6:	d007      	beq.n	80052c8 <_puts_r+0x5c>
 80052b8:	250a      	movs	r5, #10
 80052ba:	e007      	b.n	80052cc <_puts_r+0x60>
 80052bc:	4621      	mov	r1, r4
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 f8b0 	bl	8005424 <__swsetup_r>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d0e7      	beq.n	8005298 <_puts_r+0x2c>
 80052c8:	f04f 35ff 	mov.w	r5, #4294967295
 80052cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ce:	07da      	lsls	r2, r3, #31
 80052d0:	d405      	bmi.n	80052de <_puts_r+0x72>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	059b      	lsls	r3, r3, #22
 80052d6:	d402      	bmi.n	80052de <_puts_r+0x72>
 80052d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052da:	f000 f974 	bl	80055c6 <__retarget_lock_release_recursive>
 80052de:	4628      	mov	r0, r5
 80052e0:	bd70      	pop	{r4, r5, r6, pc}
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	da04      	bge.n	80052f0 <_puts_r+0x84>
 80052e6:	69a2      	ldr	r2, [r4, #24]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	dc06      	bgt.n	80052fa <_puts_r+0x8e>
 80052ec:	290a      	cmp	r1, #10
 80052ee:	d004      	beq.n	80052fa <_puts_r+0x8e>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	6022      	str	r2, [r4, #0]
 80052f6:	7019      	strb	r1, [r3, #0]
 80052f8:	e7cf      	b.n	800529a <_puts_r+0x2e>
 80052fa:	4622      	mov	r2, r4
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f854 	bl	80053aa <__swbuf_r>
 8005302:	3001      	adds	r0, #1
 8005304:	d1c9      	bne.n	800529a <_puts_r+0x2e>
 8005306:	e7df      	b.n	80052c8 <_puts_r+0x5c>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	250a      	movs	r5, #10
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	6022      	str	r2, [r4, #0]
 8005310:	701d      	strb	r5, [r3, #0]
 8005312:	e7db      	b.n	80052cc <_puts_r+0x60>

08005314 <puts>:
 8005314:	4b02      	ldr	r3, [pc, #8]	; (8005320 <puts+0xc>)
 8005316:	4601      	mov	r1, r0
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	f7ff bfa7 	b.w	800526c <_puts_r>
 800531e:	bf00      	nop
 8005320:	20000064 	.word	0x20000064

08005324 <__sread>:
 8005324:	b510      	push	{r4, lr}
 8005326:	460c      	mov	r4, r1
 8005328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532c:	f000 f8fc 	bl	8005528 <_read_r>
 8005330:	2800      	cmp	r0, #0
 8005332:	bfab      	itete	ge
 8005334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005336:	89a3      	ldrhlt	r3, [r4, #12]
 8005338:	181b      	addge	r3, r3, r0
 800533a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800533e:	bfac      	ite	ge
 8005340:	6563      	strge	r3, [r4, #84]	; 0x54
 8005342:	81a3      	strhlt	r3, [r4, #12]
 8005344:	bd10      	pop	{r4, pc}

08005346 <__swrite>:
 8005346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800534a:	461f      	mov	r7, r3
 800534c:	898b      	ldrh	r3, [r1, #12]
 800534e:	05db      	lsls	r3, r3, #23
 8005350:	4605      	mov	r5, r0
 8005352:	460c      	mov	r4, r1
 8005354:	4616      	mov	r6, r2
 8005356:	d505      	bpl.n	8005364 <__swrite+0x1e>
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	2302      	movs	r3, #2
 800535e:	2200      	movs	r2, #0
 8005360:	f000 f8d0 	bl	8005504 <_lseek_r>
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800536a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800536e:	81a3      	strh	r3, [r4, #12]
 8005370:	4632      	mov	r2, r6
 8005372:	463b      	mov	r3, r7
 8005374:	4628      	mov	r0, r5
 8005376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800537a:	f000 b8e7 	b.w	800554c <_write_r>

0800537e <__sseek>:
 800537e:	b510      	push	{r4, lr}
 8005380:	460c      	mov	r4, r1
 8005382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005386:	f000 f8bd 	bl	8005504 <_lseek_r>
 800538a:	1c43      	adds	r3, r0, #1
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	bf15      	itete	ne
 8005390:	6560      	strne	r0, [r4, #84]	; 0x54
 8005392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800539a:	81a3      	strheq	r3, [r4, #12]
 800539c:	bf18      	it	ne
 800539e:	81a3      	strhne	r3, [r4, #12]
 80053a0:	bd10      	pop	{r4, pc}

080053a2 <__sclose>:
 80053a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a6:	f000 b89d 	b.w	80054e4 <_close_r>

080053aa <__swbuf_r>:
 80053aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ac:	460e      	mov	r6, r1
 80053ae:	4614      	mov	r4, r2
 80053b0:	4605      	mov	r5, r0
 80053b2:	b118      	cbz	r0, 80053bc <__swbuf_r+0x12>
 80053b4:	6a03      	ldr	r3, [r0, #32]
 80053b6:	b90b      	cbnz	r3, 80053bc <__swbuf_r+0x12>
 80053b8:	f7ff ff10 	bl	80051dc <__sinit>
 80053bc:	69a3      	ldr	r3, [r4, #24]
 80053be:	60a3      	str	r3, [r4, #8]
 80053c0:	89a3      	ldrh	r3, [r4, #12]
 80053c2:	071a      	lsls	r2, r3, #28
 80053c4:	d525      	bpl.n	8005412 <__swbuf_r+0x68>
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	b31b      	cbz	r3, 8005412 <__swbuf_r+0x68>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	6922      	ldr	r2, [r4, #16]
 80053ce:	1a98      	subs	r0, r3, r2
 80053d0:	6963      	ldr	r3, [r4, #20]
 80053d2:	b2f6      	uxtb	r6, r6
 80053d4:	4283      	cmp	r3, r0
 80053d6:	4637      	mov	r7, r6
 80053d8:	dc04      	bgt.n	80053e4 <__swbuf_r+0x3a>
 80053da:	4621      	mov	r1, r4
 80053dc:	4628      	mov	r0, r5
 80053de:	f000 fd45 	bl	8005e6c <_fflush_r>
 80053e2:	b9e0      	cbnz	r0, 800541e <__swbuf_r+0x74>
 80053e4:	68a3      	ldr	r3, [r4, #8]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	60a3      	str	r3, [r4, #8]
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	6022      	str	r2, [r4, #0]
 80053f0:	701e      	strb	r6, [r3, #0]
 80053f2:	6962      	ldr	r2, [r4, #20]
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d004      	beq.n	8005404 <__swbuf_r+0x5a>
 80053fa:	89a3      	ldrh	r3, [r4, #12]
 80053fc:	07db      	lsls	r3, r3, #31
 80053fe:	d506      	bpl.n	800540e <__swbuf_r+0x64>
 8005400:	2e0a      	cmp	r6, #10
 8005402:	d104      	bne.n	800540e <__swbuf_r+0x64>
 8005404:	4621      	mov	r1, r4
 8005406:	4628      	mov	r0, r5
 8005408:	f000 fd30 	bl	8005e6c <_fflush_r>
 800540c:	b938      	cbnz	r0, 800541e <__swbuf_r+0x74>
 800540e:	4638      	mov	r0, r7
 8005410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005412:	4621      	mov	r1, r4
 8005414:	4628      	mov	r0, r5
 8005416:	f000 f805 	bl	8005424 <__swsetup_r>
 800541a:	2800      	cmp	r0, #0
 800541c:	d0d5      	beq.n	80053ca <__swbuf_r+0x20>
 800541e:	f04f 37ff 	mov.w	r7, #4294967295
 8005422:	e7f4      	b.n	800540e <__swbuf_r+0x64>

08005424 <__swsetup_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4b2a      	ldr	r3, [pc, #168]	; (80054d0 <__swsetup_r+0xac>)
 8005428:	4605      	mov	r5, r0
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	460c      	mov	r4, r1
 800542e:	b118      	cbz	r0, 8005438 <__swsetup_r+0x14>
 8005430:	6a03      	ldr	r3, [r0, #32]
 8005432:	b90b      	cbnz	r3, 8005438 <__swsetup_r+0x14>
 8005434:	f7ff fed2 	bl	80051dc <__sinit>
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800543e:	0718      	lsls	r0, r3, #28
 8005440:	d422      	bmi.n	8005488 <__swsetup_r+0x64>
 8005442:	06d9      	lsls	r1, r3, #27
 8005444:	d407      	bmi.n	8005456 <__swsetup_r+0x32>
 8005446:	2309      	movs	r3, #9
 8005448:	602b      	str	r3, [r5, #0]
 800544a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e034      	b.n	80054c0 <__swsetup_r+0x9c>
 8005456:	0758      	lsls	r0, r3, #29
 8005458:	d512      	bpl.n	8005480 <__swsetup_r+0x5c>
 800545a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800545c:	b141      	cbz	r1, 8005470 <__swsetup_r+0x4c>
 800545e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005462:	4299      	cmp	r1, r3
 8005464:	d002      	beq.n	800546c <__swsetup_r+0x48>
 8005466:	4628      	mov	r0, r5
 8005468:	f000 f8ae 	bl	80055c8 <_free_r>
 800546c:	2300      	movs	r3, #0
 800546e:	6363      	str	r3, [r4, #52]	; 0x34
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005476:	81a3      	strh	r3, [r4, #12]
 8005478:	2300      	movs	r3, #0
 800547a:	6063      	str	r3, [r4, #4]
 800547c:	6923      	ldr	r3, [r4, #16]
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	f043 0308 	orr.w	r3, r3, #8
 8005486:	81a3      	strh	r3, [r4, #12]
 8005488:	6923      	ldr	r3, [r4, #16]
 800548a:	b94b      	cbnz	r3, 80054a0 <__swsetup_r+0x7c>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005496:	d003      	beq.n	80054a0 <__swsetup_r+0x7c>
 8005498:	4621      	mov	r1, r4
 800549a:	4628      	mov	r0, r5
 800549c:	f000 fd34 	bl	8005f08 <__smakebuf_r>
 80054a0:	89a0      	ldrh	r0, [r4, #12]
 80054a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054a6:	f010 0301 	ands.w	r3, r0, #1
 80054aa:	d00a      	beq.n	80054c2 <__swsetup_r+0x9e>
 80054ac:	2300      	movs	r3, #0
 80054ae:	60a3      	str	r3, [r4, #8]
 80054b0:	6963      	ldr	r3, [r4, #20]
 80054b2:	425b      	negs	r3, r3
 80054b4:	61a3      	str	r3, [r4, #24]
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	b943      	cbnz	r3, 80054cc <__swsetup_r+0xa8>
 80054ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054be:	d1c4      	bne.n	800544a <__swsetup_r+0x26>
 80054c0:	bd38      	pop	{r3, r4, r5, pc}
 80054c2:	0781      	lsls	r1, r0, #30
 80054c4:	bf58      	it	pl
 80054c6:	6963      	ldrpl	r3, [r4, #20]
 80054c8:	60a3      	str	r3, [r4, #8]
 80054ca:	e7f4      	b.n	80054b6 <__swsetup_r+0x92>
 80054cc:	2000      	movs	r0, #0
 80054ce:	e7f7      	b.n	80054c0 <__swsetup_r+0x9c>
 80054d0:	20000064 	.word	0x20000064

080054d4 <memset>:
 80054d4:	4402      	add	r2, r0
 80054d6:	4603      	mov	r3, r0
 80054d8:	4293      	cmp	r3, r2
 80054da:	d100      	bne.n	80054de <memset+0xa>
 80054dc:	4770      	bx	lr
 80054de:	f803 1b01 	strb.w	r1, [r3], #1
 80054e2:	e7f9      	b.n	80054d8 <memset+0x4>

080054e4 <_close_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4d06      	ldr	r5, [pc, #24]	; (8005500 <_close_r+0x1c>)
 80054e8:	2300      	movs	r3, #0
 80054ea:	4604      	mov	r4, r0
 80054ec:	4608      	mov	r0, r1
 80054ee:	602b      	str	r3, [r5, #0]
 80054f0:	f7fc f907 	bl	8001702 <_close>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d102      	bne.n	80054fe <_close_r+0x1a>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	b103      	cbz	r3, 80054fe <_close_r+0x1a>
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	200009d0 	.word	0x200009d0

08005504 <_lseek_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d07      	ldr	r5, [pc, #28]	; (8005524 <_lseek_r+0x20>)
 8005508:	4604      	mov	r4, r0
 800550a:	4608      	mov	r0, r1
 800550c:	4611      	mov	r1, r2
 800550e:	2200      	movs	r2, #0
 8005510:	602a      	str	r2, [r5, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	f7fc f91c 	bl	8001750 <_lseek>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_lseek_r+0x1e>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_lseek_r+0x1e>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	200009d0 	.word	0x200009d0

08005528 <_read_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4d07      	ldr	r5, [pc, #28]	; (8005548 <_read_r+0x20>)
 800552c:	4604      	mov	r4, r0
 800552e:	4608      	mov	r0, r1
 8005530:	4611      	mov	r1, r2
 8005532:	2200      	movs	r2, #0
 8005534:	602a      	str	r2, [r5, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	f7fc f8c6 	bl	80016c8 <_read>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d102      	bne.n	8005546 <_read_r+0x1e>
 8005540:	682b      	ldr	r3, [r5, #0]
 8005542:	b103      	cbz	r3, 8005546 <_read_r+0x1e>
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	bd38      	pop	{r3, r4, r5, pc}
 8005548:	200009d0 	.word	0x200009d0

0800554c <_write_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4d07      	ldr	r5, [pc, #28]	; (800556c <_write_r+0x20>)
 8005550:	4604      	mov	r4, r0
 8005552:	4608      	mov	r0, r1
 8005554:	4611      	mov	r1, r2
 8005556:	2200      	movs	r2, #0
 8005558:	602a      	str	r2, [r5, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	f7fb f865 	bl	800062a <_write>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_write_r+0x1e>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_write_r+0x1e>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	200009d0 	.word	0x200009d0

08005570 <__errno>:
 8005570:	4b01      	ldr	r3, [pc, #4]	; (8005578 <__errno+0x8>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000064 	.word	0x20000064

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4d0d      	ldr	r5, [pc, #52]	; (80055b4 <__libc_init_array+0x38>)
 8005580:	4c0d      	ldr	r4, [pc, #52]	; (80055b8 <__libc_init_array+0x3c>)
 8005582:	1b64      	subs	r4, r4, r5
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	2600      	movs	r6, #0
 8005588:	42a6      	cmp	r6, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	4d0b      	ldr	r5, [pc, #44]	; (80055bc <__libc_init_array+0x40>)
 800558e:	4c0c      	ldr	r4, [pc, #48]	; (80055c0 <__libc_init_array+0x44>)
 8005590:	f001 fe4e 	bl	8007230 <_init>
 8005594:	1b64      	subs	r4, r4, r5
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	2600      	movs	r6, #0
 800559a:	42a6      	cmp	r6, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a4:	4798      	blx	r3
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ae:	4798      	blx	r3
 80055b0:	3601      	adds	r6, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	08008d40 	.word	0x08008d40
 80055b8:	08008d40 	.word	0x08008d40
 80055bc:	08008d40 	.word	0x08008d40
 80055c0:	08008d44 	.word	0x08008d44

080055c4 <__retarget_lock_acquire_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <__retarget_lock_release_recursive>:
 80055c6:	4770      	bx	lr

080055c8 <_free_r>:
 80055c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ca:	2900      	cmp	r1, #0
 80055cc:	d044      	beq.n	8005658 <_free_r+0x90>
 80055ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d2:	9001      	str	r0, [sp, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f1a1 0404 	sub.w	r4, r1, #4
 80055da:	bfb8      	it	lt
 80055dc:	18e4      	addlt	r4, r4, r3
 80055de:	f000 f8df 	bl	80057a0 <__malloc_lock>
 80055e2:	4a1e      	ldr	r2, [pc, #120]	; (800565c <_free_r+0x94>)
 80055e4:	9801      	ldr	r0, [sp, #4]
 80055e6:	6813      	ldr	r3, [r2, #0]
 80055e8:	b933      	cbnz	r3, 80055f8 <_free_r+0x30>
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	6014      	str	r4, [r2, #0]
 80055ee:	b003      	add	sp, #12
 80055f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055f4:	f000 b8da 	b.w	80057ac <__malloc_unlock>
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	d908      	bls.n	800560e <_free_r+0x46>
 80055fc:	6825      	ldr	r5, [r4, #0]
 80055fe:	1961      	adds	r1, r4, r5
 8005600:	428b      	cmp	r3, r1
 8005602:	bf01      	itttt	eq
 8005604:	6819      	ldreq	r1, [r3, #0]
 8005606:	685b      	ldreq	r3, [r3, #4]
 8005608:	1949      	addeq	r1, r1, r5
 800560a:	6021      	streq	r1, [r4, #0]
 800560c:	e7ed      	b.n	80055ea <_free_r+0x22>
 800560e:	461a      	mov	r2, r3
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b10b      	cbz	r3, 8005618 <_free_r+0x50>
 8005614:	42a3      	cmp	r3, r4
 8005616:	d9fa      	bls.n	800560e <_free_r+0x46>
 8005618:	6811      	ldr	r1, [r2, #0]
 800561a:	1855      	adds	r5, r2, r1
 800561c:	42a5      	cmp	r5, r4
 800561e:	d10b      	bne.n	8005638 <_free_r+0x70>
 8005620:	6824      	ldr	r4, [r4, #0]
 8005622:	4421      	add	r1, r4
 8005624:	1854      	adds	r4, r2, r1
 8005626:	42a3      	cmp	r3, r4
 8005628:	6011      	str	r1, [r2, #0]
 800562a:	d1e0      	bne.n	80055ee <_free_r+0x26>
 800562c:	681c      	ldr	r4, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	6053      	str	r3, [r2, #4]
 8005632:	440c      	add	r4, r1
 8005634:	6014      	str	r4, [r2, #0]
 8005636:	e7da      	b.n	80055ee <_free_r+0x26>
 8005638:	d902      	bls.n	8005640 <_free_r+0x78>
 800563a:	230c      	movs	r3, #12
 800563c:	6003      	str	r3, [r0, #0]
 800563e:	e7d6      	b.n	80055ee <_free_r+0x26>
 8005640:	6825      	ldr	r5, [r4, #0]
 8005642:	1961      	adds	r1, r4, r5
 8005644:	428b      	cmp	r3, r1
 8005646:	bf04      	itt	eq
 8005648:	6819      	ldreq	r1, [r3, #0]
 800564a:	685b      	ldreq	r3, [r3, #4]
 800564c:	6063      	str	r3, [r4, #4]
 800564e:	bf04      	itt	eq
 8005650:	1949      	addeq	r1, r1, r5
 8005652:	6021      	streq	r1, [r4, #0]
 8005654:	6054      	str	r4, [r2, #4]
 8005656:	e7ca      	b.n	80055ee <_free_r+0x26>
 8005658:	b003      	add	sp, #12
 800565a:	bd30      	pop	{r4, r5, pc}
 800565c:	200009d8 	.word	0x200009d8

08005660 <sbrk_aligned>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	4e0e      	ldr	r6, [pc, #56]	; (800569c <sbrk_aligned+0x3c>)
 8005664:	460c      	mov	r4, r1
 8005666:	6831      	ldr	r1, [r6, #0]
 8005668:	4605      	mov	r5, r0
 800566a:	b911      	cbnz	r1, 8005672 <sbrk_aligned+0x12>
 800566c:	f000 fcaa 	bl	8005fc4 <_sbrk_r>
 8005670:	6030      	str	r0, [r6, #0]
 8005672:	4621      	mov	r1, r4
 8005674:	4628      	mov	r0, r5
 8005676:	f000 fca5 	bl	8005fc4 <_sbrk_r>
 800567a:	1c43      	adds	r3, r0, #1
 800567c:	d00a      	beq.n	8005694 <sbrk_aligned+0x34>
 800567e:	1cc4      	adds	r4, r0, #3
 8005680:	f024 0403 	bic.w	r4, r4, #3
 8005684:	42a0      	cmp	r0, r4
 8005686:	d007      	beq.n	8005698 <sbrk_aligned+0x38>
 8005688:	1a21      	subs	r1, r4, r0
 800568a:	4628      	mov	r0, r5
 800568c:	f000 fc9a 	bl	8005fc4 <_sbrk_r>
 8005690:	3001      	adds	r0, #1
 8005692:	d101      	bne.n	8005698 <sbrk_aligned+0x38>
 8005694:	f04f 34ff 	mov.w	r4, #4294967295
 8005698:	4620      	mov	r0, r4
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	200009dc 	.word	0x200009dc

080056a0 <_malloc_r>:
 80056a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056a4:	1ccd      	adds	r5, r1, #3
 80056a6:	f025 0503 	bic.w	r5, r5, #3
 80056aa:	3508      	adds	r5, #8
 80056ac:	2d0c      	cmp	r5, #12
 80056ae:	bf38      	it	cc
 80056b0:	250c      	movcc	r5, #12
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	4607      	mov	r7, r0
 80056b6:	db01      	blt.n	80056bc <_malloc_r+0x1c>
 80056b8:	42a9      	cmp	r1, r5
 80056ba:	d905      	bls.n	80056c8 <_malloc_r+0x28>
 80056bc:	230c      	movs	r3, #12
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	2600      	movs	r6, #0
 80056c2:	4630      	mov	r0, r6
 80056c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800579c <_malloc_r+0xfc>
 80056cc:	f000 f868 	bl	80057a0 <__malloc_lock>
 80056d0:	f8d8 3000 	ldr.w	r3, [r8]
 80056d4:	461c      	mov	r4, r3
 80056d6:	bb5c      	cbnz	r4, 8005730 <_malloc_r+0x90>
 80056d8:	4629      	mov	r1, r5
 80056da:	4638      	mov	r0, r7
 80056dc:	f7ff ffc0 	bl	8005660 <sbrk_aligned>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	4604      	mov	r4, r0
 80056e4:	d155      	bne.n	8005792 <_malloc_r+0xf2>
 80056e6:	f8d8 4000 	ldr.w	r4, [r8]
 80056ea:	4626      	mov	r6, r4
 80056ec:	2e00      	cmp	r6, #0
 80056ee:	d145      	bne.n	800577c <_malloc_r+0xdc>
 80056f0:	2c00      	cmp	r4, #0
 80056f2:	d048      	beq.n	8005786 <_malloc_r+0xe6>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	4631      	mov	r1, r6
 80056f8:	4638      	mov	r0, r7
 80056fa:	eb04 0903 	add.w	r9, r4, r3
 80056fe:	f000 fc61 	bl	8005fc4 <_sbrk_r>
 8005702:	4581      	cmp	r9, r0
 8005704:	d13f      	bne.n	8005786 <_malloc_r+0xe6>
 8005706:	6821      	ldr	r1, [r4, #0]
 8005708:	1a6d      	subs	r5, r5, r1
 800570a:	4629      	mov	r1, r5
 800570c:	4638      	mov	r0, r7
 800570e:	f7ff ffa7 	bl	8005660 <sbrk_aligned>
 8005712:	3001      	adds	r0, #1
 8005714:	d037      	beq.n	8005786 <_malloc_r+0xe6>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	442b      	add	r3, r5
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	f8d8 3000 	ldr.w	r3, [r8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d038      	beq.n	8005796 <_malloc_r+0xf6>
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	42a2      	cmp	r2, r4
 8005728:	d12b      	bne.n	8005782 <_malloc_r+0xe2>
 800572a:	2200      	movs	r2, #0
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	e00f      	b.n	8005750 <_malloc_r+0xb0>
 8005730:	6822      	ldr	r2, [r4, #0]
 8005732:	1b52      	subs	r2, r2, r5
 8005734:	d41f      	bmi.n	8005776 <_malloc_r+0xd6>
 8005736:	2a0b      	cmp	r2, #11
 8005738:	d917      	bls.n	800576a <_malloc_r+0xca>
 800573a:	1961      	adds	r1, r4, r5
 800573c:	42a3      	cmp	r3, r4
 800573e:	6025      	str	r5, [r4, #0]
 8005740:	bf18      	it	ne
 8005742:	6059      	strne	r1, [r3, #4]
 8005744:	6863      	ldr	r3, [r4, #4]
 8005746:	bf08      	it	eq
 8005748:	f8c8 1000 	streq.w	r1, [r8]
 800574c:	5162      	str	r2, [r4, r5]
 800574e:	604b      	str	r3, [r1, #4]
 8005750:	4638      	mov	r0, r7
 8005752:	f104 060b 	add.w	r6, r4, #11
 8005756:	f000 f829 	bl	80057ac <__malloc_unlock>
 800575a:	f026 0607 	bic.w	r6, r6, #7
 800575e:	1d23      	adds	r3, r4, #4
 8005760:	1af2      	subs	r2, r6, r3
 8005762:	d0ae      	beq.n	80056c2 <_malloc_r+0x22>
 8005764:	1b9b      	subs	r3, r3, r6
 8005766:	50a3      	str	r3, [r4, r2]
 8005768:	e7ab      	b.n	80056c2 <_malloc_r+0x22>
 800576a:	42a3      	cmp	r3, r4
 800576c:	6862      	ldr	r2, [r4, #4]
 800576e:	d1dd      	bne.n	800572c <_malloc_r+0x8c>
 8005770:	f8c8 2000 	str.w	r2, [r8]
 8005774:	e7ec      	b.n	8005750 <_malloc_r+0xb0>
 8005776:	4623      	mov	r3, r4
 8005778:	6864      	ldr	r4, [r4, #4]
 800577a:	e7ac      	b.n	80056d6 <_malloc_r+0x36>
 800577c:	4634      	mov	r4, r6
 800577e:	6876      	ldr	r6, [r6, #4]
 8005780:	e7b4      	b.n	80056ec <_malloc_r+0x4c>
 8005782:	4613      	mov	r3, r2
 8005784:	e7cc      	b.n	8005720 <_malloc_r+0x80>
 8005786:	230c      	movs	r3, #12
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4638      	mov	r0, r7
 800578c:	f000 f80e 	bl	80057ac <__malloc_unlock>
 8005790:	e797      	b.n	80056c2 <_malloc_r+0x22>
 8005792:	6025      	str	r5, [r4, #0]
 8005794:	e7dc      	b.n	8005750 <_malloc_r+0xb0>
 8005796:	605b      	str	r3, [r3, #4]
 8005798:	deff      	udf	#255	; 0xff
 800579a:	bf00      	nop
 800579c:	200009d8 	.word	0x200009d8

080057a0 <__malloc_lock>:
 80057a0:	4801      	ldr	r0, [pc, #4]	; (80057a8 <__malloc_lock+0x8>)
 80057a2:	f7ff bf0f 	b.w	80055c4 <__retarget_lock_acquire_recursive>
 80057a6:	bf00      	nop
 80057a8:	200009d4 	.word	0x200009d4

080057ac <__malloc_unlock>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__malloc_unlock+0x8>)
 80057ae:	f7ff bf0a 	b.w	80055c6 <__retarget_lock_release_recursive>
 80057b2:	bf00      	nop
 80057b4:	200009d4 	.word	0x200009d4

080057b8 <__sfputc_r>:
 80057b8:	6893      	ldr	r3, [r2, #8]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	b410      	push	{r4}
 80057c0:	6093      	str	r3, [r2, #8]
 80057c2:	da08      	bge.n	80057d6 <__sfputc_r+0x1e>
 80057c4:	6994      	ldr	r4, [r2, #24]
 80057c6:	42a3      	cmp	r3, r4
 80057c8:	db01      	blt.n	80057ce <__sfputc_r+0x16>
 80057ca:	290a      	cmp	r1, #10
 80057cc:	d103      	bne.n	80057d6 <__sfputc_r+0x1e>
 80057ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057d2:	f7ff bdea 	b.w	80053aa <__swbuf_r>
 80057d6:	6813      	ldr	r3, [r2, #0]
 80057d8:	1c58      	adds	r0, r3, #1
 80057da:	6010      	str	r0, [r2, #0]
 80057dc:	7019      	strb	r1, [r3, #0]
 80057de:	4608      	mov	r0, r1
 80057e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <__sfputs_r>:
 80057e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e8:	4606      	mov	r6, r0
 80057ea:	460f      	mov	r7, r1
 80057ec:	4614      	mov	r4, r2
 80057ee:	18d5      	adds	r5, r2, r3
 80057f0:	42ac      	cmp	r4, r5
 80057f2:	d101      	bne.n	80057f8 <__sfputs_r+0x12>
 80057f4:	2000      	movs	r0, #0
 80057f6:	e007      	b.n	8005808 <__sfputs_r+0x22>
 80057f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fc:	463a      	mov	r2, r7
 80057fe:	4630      	mov	r0, r6
 8005800:	f7ff ffda 	bl	80057b8 <__sfputc_r>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d1f3      	bne.n	80057f0 <__sfputs_r+0xa>
 8005808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800580c <_vfiprintf_r>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	460d      	mov	r5, r1
 8005812:	b09d      	sub	sp, #116	; 0x74
 8005814:	4614      	mov	r4, r2
 8005816:	4698      	mov	r8, r3
 8005818:	4606      	mov	r6, r0
 800581a:	b118      	cbz	r0, 8005824 <_vfiprintf_r+0x18>
 800581c:	6a03      	ldr	r3, [r0, #32]
 800581e:	b90b      	cbnz	r3, 8005824 <_vfiprintf_r+0x18>
 8005820:	f7ff fcdc 	bl	80051dc <__sinit>
 8005824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005826:	07d9      	lsls	r1, r3, #31
 8005828:	d405      	bmi.n	8005836 <_vfiprintf_r+0x2a>
 800582a:	89ab      	ldrh	r3, [r5, #12]
 800582c:	059a      	lsls	r2, r3, #22
 800582e:	d402      	bmi.n	8005836 <_vfiprintf_r+0x2a>
 8005830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005832:	f7ff fec7 	bl	80055c4 <__retarget_lock_acquire_recursive>
 8005836:	89ab      	ldrh	r3, [r5, #12]
 8005838:	071b      	lsls	r3, r3, #28
 800583a:	d501      	bpl.n	8005840 <_vfiprintf_r+0x34>
 800583c:	692b      	ldr	r3, [r5, #16]
 800583e:	b99b      	cbnz	r3, 8005868 <_vfiprintf_r+0x5c>
 8005840:	4629      	mov	r1, r5
 8005842:	4630      	mov	r0, r6
 8005844:	f7ff fdee 	bl	8005424 <__swsetup_r>
 8005848:	b170      	cbz	r0, 8005868 <_vfiprintf_r+0x5c>
 800584a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800584c:	07dc      	lsls	r4, r3, #31
 800584e:	d504      	bpl.n	800585a <_vfiprintf_r+0x4e>
 8005850:	f04f 30ff 	mov.w	r0, #4294967295
 8005854:	b01d      	add	sp, #116	; 0x74
 8005856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585a:	89ab      	ldrh	r3, [r5, #12]
 800585c:	0598      	lsls	r0, r3, #22
 800585e:	d4f7      	bmi.n	8005850 <_vfiprintf_r+0x44>
 8005860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005862:	f7ff feb0 	bl	80055c6 <__retarget_lock_release_recursive>
 8005866:	e7f3      	b.n	8005850 <_vfiprintf_r+0x44>
 8005868:	2300      	movs	r3, #0
 800586a:	9309      	str	r3, [sp, #36]	; 0x24
 800586c:	2320      	movs	r3, #32
 800586e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005872:	f8cd 800c 	str.w	r8, [sp, #12]
 8005876:	2330      	movs	r3, #48	; 0x30
 8005878:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005a2c <_vfiprintf_r+0x220>
 800587c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005880:	f04f 0901 	mov.w	r9, #1
 8005884:	4623      	mov	r3, r4
 8005886:	469a      	mov	sl, r3
 8005888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800588c:	b10a      	cbz	r2, 8005892 <_vfiprintf_r+0x86>
 800588e:	2a25      	cmp	r2, #37	; 0x25
 8005890:	d1f9      	bne.n	8005886 <_vfiprintf_r+0x7a>
 8005892:	ebba 0b04 	subs.w	fp, sl, r4
 8005896:	d00b      	beq.n	80058b0 <_vfiprintf_r+0xa4>
 8005898:	465b      	mov	r3, fp
 800589a:	4622      	mov	r2, r4
 800589c:	4629      	mov	r1, r5
 800589e:	4630      	mov	r0, r6
 80058a0:	f7ff ffa1 	bl	80057e6 <__sfputs_r>
 80058a4:	3001      	adds	r0, #1
 80058a6:	f000 80a9 	beq.w	80059fc <_vfiprintf_r+0x1f0>
 80058aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ac:	445a      	add	r2, fp
 80058ae:	9209      	str	r2, [sp, #36]	; 0x24
 80058b0:	f89a 3000 	ldrb.w	r3, [sl]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80a1 	beq.w	80059fc <_vfiprintf_r+0x1f0>
 80058ba:	2300      	movs	r3, #0
 80058bc:	f04f 32ff 	mov.w	r2, #4294967295
 80058c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058c4:	f10a 0a01 	add.w	sl, sl, #1
 80058c8:	9304      	str	r3, [sp, #16]
 80058ca:	9307      	str	r3, [sp, #28]
 80058cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058d0:	931a      	str	r3, [sp, #104]	; 0x68
 80058d2:	4654      	mov	r4, sl
 80058d4:	2205      	movs	r2, #5
 80058d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058da:	4854      	ldr	r0, [pc, #336]	; (8005a2c <_vfiprintf_r+0x220>)
 80058dc:	f7fa fcb0 	bl	8000240 <memchr>
 80058e0:	9a04      	ldr	r2, [sp, #16]
 80058e2:	b9d8      	cbnz	r0, 800591c <_vfiprintf_r+0x110>
 80058e4:	06d1      	lsls	r1, r2, #27
 80058e6:	bf44      	itt	mi
 80058e8:	2320      	movmi	r3, #32
 80058ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058ee:	0713      	lsls	r3, r2, #28
 80058f0:	bf44      	itt	mi
 80058f2:	232b      	movmi	r3, #43	; 0x2b
 80058f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058f8:	f89a 3000 	ldrb.w	r3, [sl]
 80058fc:	2b2a      	cmp	r3, #42	; 0x2a
 80058fe:	d015      	beq.n	800592c <_vfiprintf_r+0x120>
 8005900:	9a07      	ldr	r2, [sp, #28]
 8005902:	4654      	mov	r4, sl
 8005904:	2000      	movs	r0, #0
 8005906:	f04f 0c0a 	mov.w	ip, #10
 800590a:	4621      	mov	r1, r4
 800590c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005910:	3b30      	subs	r3, #48	; 0x30
 8005912:	2b09      	cmp	r3, #9
 8005914:	d94d      	bls.n	80059b2 <_vfiprintf_r+0x1a6>
 8005916:	b1b0      	cbz	r0, 8005946 <_vfiprintf_r+0x13a>
 8005918:	9207      	str	r2, [sp, #28]
 800591a:	e014      	b.n	8005946 <_vfiprintf_r+0x13a>
 800591c:	eba0 0308 	sub.w	r3, r0, r8
 8005920:	fa09 f303 	lsl.w	r3, r9, r3
 8005924:	4313      	orrs	r3, r2
 8005926:	9304      	str	r3, [sp, #16]
 8005928:	46a2      	mov	sl, r4
 800592a:	e7d2      	b.n	80058d2 <_vfiprintf_r+0xc6>
 800592c:	9b03      	ldr	r3, [sp, #12]
 800592e:	1d19      	adds	r1, r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	9103      	str	r1, [sp, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	bfbb      	ittet	lt
 8005938:	425b      	neglt	r3, r3
 800593a:	f042 0202 	orrlt.w	r2, r2, #2
 800593e:	9307      	strge	r3, [sp, #28]
 8005940:	9307      	strlt	r3, [sp, #28]
 8005942:	bfb8      	it	lt
 8005944:	9204      	strlt	r2, [sp, #16]
 8005946:	7823      	ldrb	r3, [r4, #0]
 8005948:	2b2e      	cmp	r3, #46	; 0x2e
 800594a:	d10c      	bne.n	8005966 <_vfiprintf_r+0x15a>
 800594c:	7863      	ldrb	r3, [r4, #1]
 800594e:	2b2a      	cmp	r3, #42	; 0x2a
 8005950:	d134      	bne.n	80059bc <_vfiprintf_r+0x1b0>
 8005952:	9b03      	ldr	r3, [sp, #12]
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	9203      	str	r2, [sp, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfb8      	it	lt
 800595e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005962:	3402      	adds	r4, #2
 8005964:	9305      	str	r3, [sp, #20]
 8005966:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005a3c <_vfiprintf_r+0x230>
 800596a:	7821      	ldrb	r1, [r4, #0]
 800596c:	2203      	movs	r2, #3
 800596e:	4650      	mov	r0, sl
 8005970:	f7fa fc66 	bl	8000240 <memchr>
 8005974:	b138      	cbz	r0, 8005986 <_vfiprintf_r+0x17a>
 8005976:	9b04      	ldr	r3, [sp, #16]
 8005978:	eba0 000a 	sub.w	r0, r0, sl
 800597c:	2240      	movs	r2, #64	; 0x40
 800597e:	4082      	lsls	r2, r0
 8005980:	4313      	orrs	r3, r2
 8005982:	3401      	adds	r4, #1
 8005984:	9304      	str	r3, [sp, #16]
 8005986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598a:	4829      	ldr	r0, [pc, #164]	; (8005a30 <_vfiprintf_r+0x224>)
 800598c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005990:	2206      	movs	r2, #6
 8005992:	f7fa fc55 	bl	8000240 <memchr>
 8005996:	2800      	cmp	r0, #0
 8005998:	d03f      	beq.n	8005a1a <_vfiprintf_r+0x20e>
 800599a:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <_vfiprintf_r+0x228>)
 800599c:	bb1b      	cbnz	r3, 80059e6 <_vfiprintf_r+0x1da>
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	3307      	adds	r3, #7
 80059a2:	f023 0307 	bic.w	r3, r3, #7
 80059a6:	3308      	adds	r3, #8
 80059a8:	9303      	str	r3, [sp, #12]
 80059aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ac:	443b      	add	r3, r7
 80059ae:	9309      	str	r3, [sp, #36]	; 0x24
 80059b0:	e768      	b.n	8005884 <_vfiprintf_r+0x78>
 80059b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80059b6:	460c      	mov	r4, r1
 80059b8:	2001      	movs	r0, #1
 80059ba:	e7a6      	b.n	800590a <_vfiprintf_r+0xfe>
 80059bc:	2300      	movs	r3, #0
 80059be:	3401      	adds	r4, #1
 80059c0:	9305      	str	r3, [sp, #20]
 80059c2:	4619      	mov	r1, r3
 80059c4:	f04f 0c0a 	mov.w	ip, #10
 80059c8:	4620      	mov	r0, r4
 80059ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ce:	3a30      	subs	r2, #48	; 0x30
 80059d0:	2a09      	cmp	r2, #9
 80059d2:	d903      	bls.n	80059dc <_vfiprintf_r+0x1d0>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0c6      	beq.n	8005966 <_vfiprintf_r+0x15a>
 80059d8:	9105      	str	r1, [sp, #20]
 80059da:	e7c4      	b.n	8005966 <_vfiprintf_r+0x15a>
 80059dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80059e0:	4604      	mov	r4, r0
 80059e2:	2301      	movs	r3, #1
 80059e4:	e7f0      	b.n	80059c8 <_vfiprintf_r+0x1bc>
 80059e6:	ab03      	add	r3, sp, #12
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	462a      	mov	r2, r5
 80059ec:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <_vfiprintf_r+0x22c>)
 80059ee:	a904      	add	r1, sp, #16
 80059f0:	4630      	mov	r0, r6
 80059f2:	f3af 8000 	nop.w
 80059f6:	4607      	mov	r7, r0
 80059f8:	1c78      	adds	r0, r7, #1
 80059fa:	d1d6      	bne.n	80059aa <_vfiprintf_r+0x19e>
 80059fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059fe:	07d9      	lsls	r1, r3, #31
 8005a00:	d405      	bmi.n	8005a0e <_vfiprintf_r+0x202>
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	059a      	lsls	r2, r3, #22
 8005a06:	d402      	bmi.n	8005a0e <_vfiprintf_r+0x202>
 8005a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a0a:	f7ff fddc 	bl	80055c6 <__retarget_lock_release_recursive>
 8005a0e:	89ab      	ldrh	r3, [r5, #12]
 8005a10:	065b      	lsls	r3, r3, #25
 8005a12:	f53f af1d 	bmi.w	8005850 <_vfiprintf_r+0x44>
 8005a16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a18:	e71c      	b.n	8005854 <_vfiprintf_r+0x48>
 8005a1a:	ab03      	add	r3, sp, #12
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	462a      	mov	r2, r5
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <_vfiprintf_r+0x22c>)
 8005a22:	a904      	add	r1, sp, #16
 8005a24:	4630      	mov	r0, r6
 8005a26:	f000 f879 	bl	8005b1c <_printf_i>
 8005a2a:	e7e4      	b.n	80059f6 <_vfiprintf_r+0x1ea>
 8005a2c:	08007274 	.word	0x08007274
 8005a30:	0800727e 	.word	0x0800727e
 8005a34:	00000000 	.word	0x00000000
 8005a38:	080057e7 	.word	0x080057e7
 8005a3c:	0800727a 	.word	0x0800727a

08005a40 <_printf_common>:
 8005a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a44:	4616      	mov	r6, r2
 8005a46:	4699      	mov	r9, r3
 8005a48:	688a      	ldr	r2, [r1, #8]
 8005a4a:	690b      	ldr	r3, [r1, #16]
 8005a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a50:	4293      	cmp	r3, r2
 8005a52:	bfb8      	it	lt
 8005a54:	4613      	movlt	r3, r2
 8005a56:	6033      	str	r3, [r6, #0]
 8005a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	b10a      	cbz	r2, 8005a66 <_printf_common+0x26>
 8005a62:	3301      	adds	r3, #1
 8005a64:	6033      	str	r3, [r6, #0]
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	0699      	lsls	r1, r3, #26
 8005a6a:	bf42      	ittt	mi
 8005a6c:	6833      	ldrmi	r3, [r6, #0]
 8005a6e:	3302      	addmi	r3, #2
 8005a70:	6033      	strmi	r3, [r6, #0]
 8005a72:	6825      	ldr	r5, [r4, #0]
 8005a74:	f015 0506 	ands.w	r5, r5, #6
 8005a78:	d106      	bne.n	8005a88 <_printf_common+0x48>
 8005a7a:	f104 0a19 	add.w	sl, r4, #25
 8005a7e:	68e3      	ldr	r3, [r4, #12]
 8005a80:	6832      	ldr	r2, [r6, #0]
 8005a82:	1a9b      	subs	r3, r3, r2
 8005a84:	42ab      	cmp	r3, r5
 8005a86:	dc26      	bgt.n	8005ad6 <_printf_common+0x96>
 8005a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a8c:	1e13      	subs	r3, r2, #0
 8005a8e:	6822      	ldr	r2, [r4, #0]
 8005a90:	bf18      	it	ne
 8005a92:	2301      	movne	r3, #1
 8005a94:	0692      	lsls	r2, r2, #26
 8005a96:	d42b      	bmi.n	8005af0 <_printf_common+0xb0>
 8005a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	47c0      	blx	r8
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d01e      	beq.n	8005ae4 <_printf_common+0xa4>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	6922      	ldr	r2, [r4, #16]
 8005aaa:	f003 0306 	and.w	r3, r3, #6
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	bf02      	ittt	eq
 8005ab2:	68e5      	ldreq	r5, [r4, #12]
 8005ab4:	6833      	ldreq	r3, [r6, #0]
 8005ab6:	1aed      	subeq	r5, r5, r3
 8005ab8:	68a3      	ldr	r3, [r4, #8]
 8005aba:	bf0c      	ite	eq
 8005abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ac0:	2500      	movne	r5, #0
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	bfc4      	itt	gt
 8005ac6:	1a9b      	subgt	r3, r3, r2
 8005ac8:	18ed      	addgt	r5, r5, r3
 8005aca:	2600      	movs	r6, #0
 8005acc:	341a      	adds	r4, #26
 8005ace:	42b5      	cmp	r5, r6
 8005ad0:	d11a      	bne.n	8005b08 <_printf_common+0xc8>
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	e008      	b.n	8005ae8 <_printf_common+0xa8>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4652      	mov	r2, sl
 8005ada:	4649      	mov	r1, r9
 8005adc:	4638      	mov	r0, r7
 8005ade:	47c0      	blx	r8
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d103      	bne.n	8005aec <_printf_common+0xac>
 8005ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aec:	3501      	adds	r5, #1
 8005aee:	e7c6      	b.n	8005a7e <_printf_common+0x3e>
 8005af0:	18e1      	adds	r1, r4, r3
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	2030      	movs	r0, #48	; 0x30
 8005af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005afa:	4422      	add	r2, r4
 8005afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b04:	3302      	adds	r3, #2
 8005b06:	e7c7      	b.n	8005a98 <_printf_common+0x58>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	4638      	mov	r0, r7
 8005b10:	47c0      	blx	r8
 8005b12:	3001      	adds	r0, #1
 8005b14:	d0e6      	beq.n	8005ae4 <_printf_common+0xa4>
 8005b16:	3601      	adds	r6, #1
 8005b18:	e7d9      	b.n	8005ace <_printf_common+0x8e>
	...

08005b1c <_printf_i>:
 8005b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b20:	7e0f      	ldrb	r7, [r1, #24]
 8005b22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b24:	2f78      	cmp	r7, #120	; 0x78
 8005b26:	4691      	mov	r9, r2
 8005b28:	4680      	mov	r8, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	469a      	mov	sl, r3
 8005b2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b32:	d807      	bhi.n	8005b44 <_printf_i+0x28>
 8005b34:	2f62      	cmp	r7, #98	; 0x62
 8005b36:	d80a      	bhi.n	8005b4e <_printf_i+0x32>
 8005b38:	2f00      	cmp	r7, #0
 8005b3a:	f000 80d4 	beq.w	8005ce6 <_printf_i+0x1ca>
 8005b3e:	2f58      	cmp	r7, #88	; 0x58
 8005b40:	f000 80c0 	beq.w	8005cc4 <_printf_i+0x1a8>
 8005b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b4c:	e03a      	b.n	8005bc4 <_printf_i+0xa8>
 8005b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b52:	2b15      	cmp	r3, #21
 8005b54:	d8f6      	bhi.n	8005b44 <_printf_i+0x28>
 8005b56:	a101      	add	r1, pc, #4	; (adr r1, 8005b5c <_printf_i+0x40>)
 8005b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b5c:	08005bb5 	.word	0x08005bb5
 8005b60:	08005bc9 	.word	0x08005bc9
 8005b64:	08005b45 	.word	0x08005b45
 8005b68:	08005b45 	.word	0x08005b45
 8005b6c:	08005b45 	.word	0x08005b45
 8005b70:	08005b45 	.word	0x08005b45
 8005b74:	08005bc9 	.word	0x08005bc9
 8005b78:	08005b45 	.word	0x08005b45
 8005b7c:	08005b45 	.word	0x08005b45
 8005b80:	08005b45 	.word	0x08005b45
 8005b84:	08005b45 	.word	0x08005b45
 8005b88:	08005ccd 	.word	0x08005ccd
 8005b8c:	08005bf5 	.word	0x08005bf5
 8005b90:	08005c87 	.word	0x08005c87
 8005b94:	08005b45 	.word	0x08005b45
 8005b98:	08005b45 	.word	0x08005b45
 8005b9c:	08005cef 	.word	0x08005cef
 8005ba0:	08005b45 	.word	0x08005b45
 8005ba4:	08005bf5 	.word	0x08005bf5
 8005ba8:	08005b45 	.word	0x08005b45
 8005bac:	08005b45 	.word	0x08005b45
 8005bb0:	08005c8f 	.word	0x08005c8f
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	1d1a      	adds	r2, r3, #4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	602a      	str	r2, [r5, #0]
 8005bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e09f      	b.n	8005d08 <_printf_i+0x1ec>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	682b      	ldr	r3, [r5, #0]
 8005bcc:	0607      	lsls	r7, r0, #24
 8005bce:	f103 0104 	add.w	r1, r3, #4
 8005bd2:	6029      	str	r1, [r5, #0]
 8005bd4:	d501      	bpl.n	8005bda <_printf_i+0xbe>
 8005bd6:	681e      	ldr	r6, [r3, #0]
 8005bd8:	e003      	b.n	8005be2 <_printf_i+0xc6>
 8005bda:	0646      	lsls	r6, r0, #25
 8005bdc:	d5fb      	bpl.n	8005bd6 <_printf_i+0xba>
 8005bde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005be2:	2e00      	cmp	r6, #0
 8005be4:	da03      	bge.n	8005bee <_printf_i+0xd2>
 8005be6:	232d      	movs	r3, #45	; 0x2d
 8005be8:	4276      	negs	r6, r6
 8005bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bee:	485a      	ldr	r0, [pc, #360]	; (8005d58 <_printf_i+0x23c>)
 8005bf0:	230a      	movs	r3, #10
 8005bf2:	e012      	b.n	8005c1a <_printf_i+0xfe>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	6820      	ldr	r0, [r4, #0]
 8005bf8:	1d19      	adds	r1, r3, #4
 8005bfa:	6029      	str	r1, [r5, #0]
 8005bfc:	0605      	lsls	r5, r0, #24
 8005bfe:	d501      	bpl.n	8005c04 <_printf_i+0xe8>
 8005c00:	681e      	ldr	r6, [r3, #0]
 8005c02:	e002      	b.n	8005c0a <_printf_i+0xee>
 8005c04:	0641      	lsls	r1, r0, #25
 8005c06:	d5fb      	bpl.n	8005c00 <_printf_i+0xe4>
 8005c08:	881e      	ldrh	r6, [r3, #0]
 8005c0a:	4853      	ldr	r0, [pc, #332]	; (8005d58 <_printf_i+0x23c>)
 8005c0c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c0e:	bf0c      	ite	eq
 8005c10:	2308      	moveq	r3, #8
 8005c12:	230a      	movne	r3, #10
 8005c14:	2100      	movs	r1, #0
 8005c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c1a:	6865      	ldr	r5, [r4, #4]
 8005c1c:	60a5      	str	r5, [r4, #8]
 8005c1e:	2d00      	cmp	r5, #0
 8005c20:	bfa2      	ittt	ge
 8005c22:	6821      	ldrge	r1, [r4, #0]
 8005c24:	f021 0104 	bicge.w	r1, r1, #4
 8005c28:	6021      	strge	r1, [r4, #0]
 8005c2a:	b90e      	cbnz	r6, 8005c30 <_printf_i+0x114>
 8005c2c:	2d00      	cmp	r5, #0
 8005c2e:	d04b      	beq.n	8005cc8 <_printf_i+0x1ac>
 8005c30:	4615      	mov	r5, r2
 8005c32:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c36:	fb03 6711 	mls	r7, r3, r1, r6
 8005c3a:	5dc7      	ldrb	r7, [r0, r7]
 8005c3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c40:	4637      	mov	r7, r6
 8005c42:	42bb      	cmp	r3, r7
 8005c44:	460e      	mov	r6, r1
 8005c46:	d9f4      	bls.n	8005c32 <_printf_i+0x116>
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d10b      	bne.n	8005c64 <_printf_i+0x148>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	07de      	lsls	r6, r3, #31
 8005c50:	d508      	bpl.n	8005c64 <_printf_i+0x148>
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	6861      	ldr	r1, [r4, #4]
 8005c56:	4299      	cmp	r1, r3
 8005c58:	bfde      	ittt	le
 8005c5a:	2330      	movle	r3, #48	; 0x30
 8005c5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c64:	1b52      	subs	r2, r2, r5
 8005c66:	6122      	str	r2, [r4, #16]
 8005c68:	f8cd a000 	str.w	sl, [sp]
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	aa03      	add	r2, sp, #12
 8005c70:	4621      	mov	r1, r4
 8005c72:	4640      	mov	r0, r8
 8005c74:	f7ff fee4 	bl	8005a40 <_printf_common>
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d14a      	bne.n	8005d12 <_printf_i+0x1f6>
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	b004      	add	sp, #16
 8005c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f043 0320 	orr.w	r3, r3, #32
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	4833      	ldr	r0, [pc, #204]	; (8005d5c <_printf_i+0x240>)
 8005c90:	2778      	movs	r7, #120	; 0x78
 8005c92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	6829      	ldr	r1, [r5, #0]
 8005c9a:	061f      	lsls	r7, r3, #24
 8005c9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ca0:	d402      	bmi.n	8005ca8 <_printf_i+0x18c>
 8005ca2:	065f      	lsls	r7, r3, #25
 8005ca4:	bf48      	it	mi
 8005ca6:	b2b6      	uxthmi	r6, r6
 8005ca8:	07df      	lsls	r7, r3, #31
 8005caa:	bf48      	it	mi
 8005cac:	f043 0320 	orrmi.w	r3, r3, #32
 8005cb0:	6029      	str	r1, [r5, #0]
 8005cb2:	bf48      	it	mi
 8005cb4:	6023      	strmi	r3, [r4, #0]
 8005cb6:	b91e      	cbnz	r6, 8005cc0 <_printf_i+0x1a4>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	f023 0320 	bic.w	r3, r3, #32
 8005cbe:	6023      	str	r3, [r4, #0]
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	e7a7      	b.n	8005c14 <_printf_i+0xf8>
 8005cc4:	4824      	ldr	r0, [pc, #144]	; (8005d58 <_printf_i+0x23c>)
 8005cc6:	e7e4      	b.n	8005c92 <_printf_i+0x176>
 8005cc8:	4615      	mov	r5, r2
 8005cca:	e7bd      	b.n	8005c48 <_printf_i+0x12c>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	6826      	ldr	r6, [r4, #0]
 8005cd0:	6961      	ldr	r1, [r4, #20]
 8005cd2:	1d18      	adds	r0, r3, #4
 8005cd4:	6028      	str	r0, [r5, #0]
 8005cd6:	0635      	lsls	r5, r6, #24
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	d501      	bpl.n	8005ce0 <_printf_i+0x1c4>
 8005cdc:	6019      	str	r1, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <_printf_i+0x1ca>
 8005ce0:	0670      	lsls	r0, r6, #25
 8005ce2:	d5fb      	bpl.n	8005cdc <_printf_i+0x1c0>
 8005ce4:	8019      	strh	r1, [r3, #0]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	4615      	mov	r5, r2
 8005cec:	e7bc      	b.n	8005c68 <_printf_i+0x14c>
 8005cee:	682b      	ldr	r3, [r5, #0]
 8005cf0:	1d1a      	adds	r2, r3, #4
 8005cf2:	602a      	str	r2, [r5, #0]
 8005cf4:	681d      	ldr	r5, [r3, #0]
 8005cf6:	6862      	ldr	r2, [r4, #4]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f7fa faa0 	bl	8000240 <memchr>
 8005d00:	b108      	cbz	r0, 8005d06 <_printf_i+0x1ea>
 8005d02:	1b40      	subs	r0, r0, r5
 8005d04:	6060      	str	r0, [r4, #4]
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d10:	e7aa      	b.n	8005c68 <_printf_i+0x14c>
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	462a      	mov	r2, r5
 8005d16:	4649      	mov	r1, r9
 8005d18:	4640      	mov	r0, r8
 8005d1a:	47d0      	blx	sl
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d0ad      	beq.n	8005c7c <_printf_i+0x160>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	079b      	lsls	r3, r3, #30
 8005d24:	d413      	bmi.n	8005d4e <_printf_i+0x232>
 8005d26:	68e0      	ldr	r0, [r4, #12]
 8005d28:	9b03      	ldr	r3, [sp, #12]
 8005d2a:	4298      	cmp	r0, r3
 8005d2c:	bfb8      	it	lt
 8005d2e:	4618      	movlt	r0, r3
 8005d30:	e7a6      	b.n	8005c80 <_printf_i+0x164>
 8005d32:	2301      	movs	r3, #1
 8005d34:	4632      	mov	r2, r6
 8005d36:	4649      	mov	r1, r9
 8005d38:	4640      	mov	r0, r8
 8005d3a:	47d0      	blx	sl
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d09d      	beq.n	8005c7c <_printf_i+0x160>
 8005d40:	3501      	adds	r5, #1
 8005d42:	68e3      	ldr	r3, [r4, #12]
 8005d44:	9903      	ldr	r1, [sp, #12]
 8005d46:	1a5b      	subs	r3, r3, r1
 8005d48:	42ab      	cmp	r3, r5
 8005d4a:	dcf2      	bgt.n	8005d32 <_printf_i+0x216>
 8005d4c:	e7eb      	b.n	8005d26 <_printf_i+0x20a>
 8005d4e:	2500      	movs	r5, #0
 8005d50:	f104 0619 	add.w	r6, r4, #25
 8005d54:	e7f5      	b.n	8005d42 <_printf_i+0x226>
 8005d56:	bf00      	nop
 8005d58:	08007285 	.word	0x08007285
 8005d5c:	08007296 	.word	0x08007296

08005d60 <__sflush_r>:
 8005d60:	898a      	ldrh	r2, [r1, #12]
 8005d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d66:	4605      	mov	r5, r0
 8005d68:	0710      	lsls	r0, r2, #28
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	d458      	bmi.n	8005e20 <__sflush_r+0xc0>
 8005d6e:	684b      	ldr	r3, [r1, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	dc05      	bgt.n	8005d80 <__sflush_r+0x20>
 8005d74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dc02      	bgt.n	8005d80 <__sflush_r+0x20>
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	d0f9      	beq.n	8005d7a <__sflush_r+0x1a>
 8005d86:	2300      	movs	r3, #0
 8005d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d8c:	682f      	ldr	r7, [r5, #0]
 8005d8e:	6a21      	ldr	r1, [r4, #32]
 8005d90:	602b      	str	r3, [r5, #0]
 8005d92:	d032      	beq.n	8005dfa <__sflush_r+0x9a>
 8005d94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	075a      	lsls	r2, r3, #29
 8005d9a:	d505      	bpl.n	8005da8 <__sflush_r+0x48>
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	1ac0      	subs	r0, r0, r3
 8005da0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005da2:	b10b      	cbz	r3, 8005da8 <__sflush_r+0x48>
 8005da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005da6:	1ac0      	subs	r0, r0, r3
 8005da8:	2300      	movs	r3, #0
 8005daa:	4602      	mov	r2, r0
 8005dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dae:	6a21      	ldr	r1, [r4, #32]
 8005db0:	4628      	mov	r0, r5
 8005db2:	47b0      	blx	r6
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	89a3      	ldrh	r3, [r4, #12]
 8005db8:	d106      	bne.n	8005dc8 <__sflush_r+0x68>
 8005dba:	6829      	ldr	r1, [r5, #0]
 8005dbc:	291d      	cmp	r1, #29
 8005dbe:	d82b      	bhi.n	8005e18 <__sflush_r+0xb8>
 8005dc0:	4a29      	ldr	r2, [pc, #164]	; (8005e68 <__sflush_r+0x108>)
 8005dc2:	410a      	asrs	r2, r1
 8005dc4:	07d6      	lsls	r6, r2, #31
 8005dc6:	d427      	bmi.n	8005e18 <__sflush_r+0xb8>
 8005dc8:	2200      	movs	r2, #0
 8005dca:	6062      	str	r2, [r4, #4]
 8005dcc:	04d9      	lsls	r1, r3, #19
 8005dce:	6922      	ldr	r2, [r4, #16]
 8005dd0:	6022      	str	r2, [r4, #0]
 8005dd2:	d504      	bpl.n	8005dde <__sflush_r+0x7e>
 8005dd4:	1c42      	adds	r2, r0, #1
 8005dd6:	d101      	bne.n	8005ddc <__sflush_r+0x7c>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	b903      	cbnz	r3, 8005dde <__sflush_r+0x7e>
 8005ddc:	6560      	str	r0, [r4, #84]	; 0x54
 8005dde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005de0:	602f      	str	r7, [r5, #0]
 8005de2:	2900      	cmp	r1, #0
 8005de4:	d0c9      	beq.n	8005d7a <__sflush_r+0x1a>
 8005de6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dea:	4299      	cmp	r1, r3
 8005dec:	d002      	beq.n	8005df4 <__sflush_r+0x94>
 8005dee:	4628      	mov	r0, r5
 8005df0:	f7ff fbea 	bl	80055c8 <_free_r>
 8005df4:	2000      	movs	r0, #0
 8005df6:	6360      	str	r0, [r4, #52]	; 0x34
 8005df8:	e7c0      	b.n	8005d7c <__sflush_r+0x1c>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b0      	blx	r6
 8005e00:	1c41      	adds	r1, r0, #1
 8005e02:	d1c8      	bne.n	8005d96 <__sflush_r+0x36>
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0c5      	beq.n	8005d96 <__sflush_r+0x36>
 8005e0a:	2b1d      	cmp	r3, #29
 8005e0c:	d001      	beq.n	8005e12 <__sflush_r+0xb2>
 8005e0e:	2b16      	cmp	r3, #22
 8005e10:	d101      	bne.n	8005e16 <__sflush_r+0xb6>
 8005e12:	602f      	str	r7, [r5, #0]
 8005e14:	e7b1      	b.n	8005d7a <__sflush_r+0x1a>
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e1c:	81a3      	strh	r3, [r4, #12]
 8005e1e:	e7ad      	b.n	8005d7c <__sflush_r+0x1c>
 8005e20:	690f      	ldr	r7, [r1, #16]
 8005e22:	2f00      	cmp	r7, #0
 8005e24:	d0a9      	beq.n	8005d7a <__sflush_r+0x1a>
 8005e26:	0793      	lsls	r3, r2, #30
 8005e28:	680e      	ldr	r6, [r1, #0]
 8005e2a:	bf08      	it	eq
 8005e2c:	694b      	ldreq	r3, [r1, #20]
 8005e2e:	600f      	str	r7, [r1, #0]
 8005e30:	bf18      	it	ne
 8005e32:	2300      	movne	r3, #0
 8005e34:	eba6 0807 	sub.w	r8, r6, r7
 8005e38:	608b      	str	r3, [r1, #8]
 8005e3a:	f1b8 0f00 	cmp.w	r8, #0
 8005e3e:	dd9c      	ble.n	8005d7a <__sflush_r+0x1a>
 8005e40:	6a21      	ldr	r1, [r4, #32]
 8005e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e44:	4643      	mov	r3, r8
 8005e46:	463a      	mov	r2, r7
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b0      	blx	r6
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	dc06      	bgt.n	8005e5e <__sflush_r+0xfe>
 8005e50:	89a3      	ldrh	r3, [r4, #12]
 8005e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e56:	81a3      	strh	r3, [r4, #12]
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5c:	e78e      	b.n	8005d7c <__sflush_r+0x1c>
 8005e5e:	4407      	add	r7, r0
 8005e60:	eba8 0800 	sub.w	r8, r8, r0
 8005e64:	e7e9      	b.n	8005e3a <__sflush_r+0xda>
 8005e66:	bf00      	nop
 8005e68:	dfbffffe 	.word	0xdfbffffe

08005e6c <_fflush_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	690b      	ldr	r3, [r1, #16]
 8005e70:	4605      	mov	r5, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	b913      	cbnz	r3, 8005e7c <_fflush_r+0x10>
 8005e76:	2500      	movs	r5, #0
 8005e78:	4628      	mov	r0, r5
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	b118      	cbz	r0, 8005e86 <_fflush_r+0x1a>
 8005e7e:	6a03      	ldr	r3, [r0, #32]
 8005e80:	b90b      	cbnz	r3, 8005e86 <_fflush_r+0x1a>
 8005e82:	f7ff f9ab 	bl	80051dc <__sinit>
 8005e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f3      	beq.n	8005e76 <_fflush_r+0xa>
 8005e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e90:	07d0      	lsls	r0, r2, #31
 8005e92:	d404      	bmi.n	8005e9e <_fflush_r+0x32>
 8005e94:	0599      	lsls	r1, r3, #22
 8005e96:	d402      	bmi.n	8005e9e <_fflush_r+0x32>
 8005e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9a:	f7ff fb93 	bl	80055c4 <__retarget_lock_acquire_recursive>
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	f7ff ff5d 	bl	8005d60 <__sflush_r>
 8005ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ea8:	07da      	lsls	r2, r3, #31
 8005eaa:	4605      	mov	r5, r0
 8005eac:	d4e4      	bmi.n	8005e78 <_fflush_r+0xc>
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	059b      	lsls	r3, r3, #22
 8005eb2:	d4e1      	bmi.n	8005e78 <_fflush_r+0xc>
 8005eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eb6:	f7ff fb86 	bl	80055c6 <__retarget_lock_release_recursive>
 8005eba:	e7dd      	b.n	8005e78 <_fflush_r+0xc>

08005ebc <__swhatbuf_r>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	b096      	sub	sp, #88	; 0x58
 8005ec8:	4615      	mov	r5, r2
 8005eca:	461e      	mov	r6, r3
 8005ecc:	da0d      	bge.n	8005eea <__swhatbuf_r+0x2e>
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ed4:	f04f 0100 	mov.w	r1, #0
 8005ed8:	bf0c      	ite	eq
 8005eda:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005ede:	2340      	movne	r3, #64	; 0x40
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	6031      	str	r1, [r6, #0]
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	b016      	add	sp, #88	; 0x58
 8005ee8:	bd70      	pop	{r4, r5, r6, pc}
 8005eea:	466a      	mov	r2, sp
 8005eec:	f000 f848 	bl	8005f80 <_fstat_r>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	dbec      	blt.n	8005ece <__swhatbuf_r+0x12>
 8005ef4:	9901      	ldr	r1, [sp, #4]
 8005ef6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005efa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005efe:	4259      	negs	r1, r3
 8005f00:	4159      	adcs	r1, r3
 8005f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f06:	e7eb      	b.n	8005ee0 <__swhatbuf_r+0x24>

08005f08 <__smakebuf_r>:
 8005f08:	898b      	ldrh	r3, [r1, #12]
 8005f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f0c:	079d      	lsls	r5, r3, #30
 8005f0e:	4606      	mov	r6, r0
 8005f10:	460c      	mov	r4, r1
 8005f12:	d507      	bpl.n	8005f24 <__smakebuf_r+0x1c>
 8005f14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	6123      	str	r3, [r4, #16]
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	6163      	str	r3, [r4, #20]
 8005f20:	b002      	add	sp, #8
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	ab01      	add	r3, sp, #4
 8005f26:	466a      	mov	r2, sp
 8005f28:	f7ff ffc8 	bl	8005ebc <__swhatbuf_r>
 8005f2c:	9900      	ldr	r1, [sp, #0]
 8005f2e:	4605      	mov	r5, r0
 8005f30:	4630      	mov	r0, r6
 8005f32:	f7ff fbb5 	bl	80056a0 <_malloc_r>
 8005f36:	b948      	cbnz	r0, 8005f4c <__smakebuf_r+0x44>
 8005f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f3c:	059a      	lsls	r2, r3, #22
 8005f3e:	d4ef      	bmi.n	8005f20 <__smakebuf_r+0x18>
 8005f40:	f023 0303 	bic.w	r3, r3, #3
 8005f44:	f043 0302 	orr.w	r3, r3, #2
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	e7e3      	b.n	8005f14 <__smakebuf_r+0xc>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	6020      	str	r0, [r4, #0]
 8005f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	9b00      	ldr	r3, [sp, #0]
 8005f58:	6163      	str	r3, [r4, #20]
 8005f5a:	9b01      	ldr	r3, [sp, #4]
 8005f5c:	6120      	str	r0, [r4, #16]
 8005f5e:	b15b      	cbz	r3, 8005f78 <__smakebuf_r+0x70>
 8005f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f64:	4630      	mov	r0, r6
 8005f66:	f000 f81d 	bl	8005fa4 <_isatty_r>
 8005f6a:	b128      	cbz	r0, 8005f78 <__smakebuf_r+0x70>
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	f023 0303 	bic.w	r3, r3, #3
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	81a3      	strh	r3, [r4, #12]
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	431d      	orrs	r5, r3
 8005f7c:	81a5      	strh	r5, [r4, #12]
 8005f7e:	e7cf      	b.n	8005f20 <__smakebuf_r+0x18>

08005f80 <_fstat_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4d07      	ldr	r5, [pc, #28]	; (8005fa0 <_fstat_r+0x20>)
 8005f84:	2300      	movs	r3, #0
 8005f86:	4604      	mov	r4, r0
 8005f88:	4608      	mov	r0, r1
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	f7fb fbc4 	bl	800171a <_fstat>
 8005f92:	1c43      	adds	r3, r0, #1
 8005f94:	d102      	bne.n	8005f9c <_fstat_r+0x1c>
 8005f96:	682b      	ldr	r3, [r5, #0]
 8005f98:	b103      	cbz	r3, 8005f9c <_fstat_r+0x1c>
 8005f9a:	6023      	str	r3, [r4, #0]
 8005f9c:	bd38      	pop	{r3, r4, r5, pc}
 8005f9e:	bf00      	nop
 8005fa0:	200009d0 	.word	0x200009d0

08005fa4 <_isatty_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	; (8005fc0 <_isatty_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fb fbc3 	bl	800173a <_isatty>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_isatty_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_isatty_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	200009d0 	.word	0x200009d0

08005fc4 <_sbrk_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4d06      	ldr	r5, [pc, #24]	; (8005fe0 <_sbrk_r+0x1c>)
 8005fc8:	2300      	movs	r3, #0
 8005fca:	4604      	mov	r4, r0
 8005fcc:	4608      	mov	r0, r1
 8005fce:	602b      	str	r3, [r5, #0]
 8005fd0:	f7fb fbcc 	bl	800176c <_sbrk>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_sbrk_r+0x1a>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_sbrk_r+0x1a>
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	200009d0 	.word	0x200009d0
 8005fe4:	00000000 	.word	0x00000000

08005fe8 <cos>:
 8005fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fea:	eeb0 7b40 	vmov.f64	d7, d0
 8005fee:	ee17 3a90 	vmov	r3, s15
 8005ff2:	4a21      	ldr	r2, [pc, #132]	; (8006078 <cos+0x90>)
 8005ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	dc06      	bgt.n	800600a <cos+0x22>
 8005ffc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8006070 <cos+0x88>
 8006000:	b005      	add	sp, #20
 8006002:	f85d eb04 	ldr.w	lr, [sp], #4
 8006006:	f000 bb03 	b.w	8006610 <__kernel_cos>
 800600a:	4a1c      	ldr	r2, [pc, #112]	; (800607c <cos+0x94>)
 800600c:	4293      	cmp	r3, r2
 800600e:	dd04      	ble.n	800601a <cos+0x32>
 8006010:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006014:	b005      	add	sp, #20
 8006016:	f85d fb04 	ldr.w	pc, [sp], #4
 800601a:	4668      	mov	r0, sp
 800601c:	f000 fbbc 	bl	8006798 <__ieee754_rem_pio2>
 8006020:	f000 0003 	and.w	r0, r0, #3
 8006024:	2801      	cmp	r0, #1
 8006026:	d009      	beq.n	800603c <cos+0x54>
 8006028:	2802      	cmp	r0, #2
 800602a:	d010      	beq.n	800604e <cos+0x66>
 800602c:	b9b0      	cbnz	r0, 800605c <cos+0x74>
 800602e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006032:	ed9d 0b00 	vldr	d0, [sp]
 8006036:	f000 faeb 	bl	8006610 <__kernel_cos>
 800603a:	e7eb      	b.n	8006014 <cos+0x2c>
 800603c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006040:	ed9d 0b00 	vldr	d0, [sp]
 8006044:	f000 fb50 	bl	80066e8 <__kernel_sin>
 8006048:	eeb1 0b40 	vneg.f64	d0, d0
 800604c:	e7e2      	b.n	8006014 <cos+0x2c>
 800604e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006052:	ed9d 0b00 	vldr	d0, [sp]
 8006056:	f000 fadb 	bl	8006610 <__kernel_cos>
 800605a:	e7f5      	b.n	8006048 <cos+0x60>
 800605c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006060:	ed9d 0b00 	vldr	d0, [sp]
 8006064:	2001      	movs	r0, #1
 8006066:	f000 fb3f 	bl	80066e8 <__kernel_sin>
 800606a:	e7d3      	b.n	8006014 <cos+0x2c>
 800606c:	f3af 8000 	nop.w
	...
 8006078:	3fe921fb 	.word	0x3fe921fb
 800607c:	7fefffff 	.word	0x7fefffff

08006080 <checkint>:
 8006080:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006084:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8006088:	429a      	cmp	r2, r3
 800608a:	b570      	push	{r4, r5, r6, lr}
 800608c:	dd2a      	ble.n	80060e4 <checkint+0x64>
 800608e:	f240 4333 	movw	r3, #1075	; 0x433
 8006092:	429a      	cmp	r2, r3
 8006094:	dc24      	bgt.n	80060e0 <checkint+0x60>
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	f1a3 0620 	sub.w	r6, r3, #32
 800609c:	f04f 32ff 	mov.w	r2, #4294967295
 80060a0:	fa02 f403 	lsl.w	r4, r2, r3
 80060a4:	fa02 f606 	lsl.w	r6, r2, r6
 80060a8:	f1c3 0520 	rsb	r5, r3, #32
 80060ac:	fa22 f505 	lsr.w	r5, r2, r5
 80060b0:	4334      	orrs	r4, r6
 80060b2:	432c      	orrs	r4, r5
 80060b4:	409a      	lsls	r2, r3
 80060b6:	ea20 0202 	bic.w	r2, r0, r2
 80060ba:	ea21 0404 	bic.w	r4, r1, r4
 80060be:	4322      	orrs	r2, r4
 80060c0:	f1a3 0420 	sub.w	r4, r3, #32
 80060c4:	f1c3 0220 	rsb	r2, r3, #32
 80060c8:	d10c      	bne.n	80060e4 <checkint+0x64>
 80060ca:	40d8      	lsrs	r0, r3
 80060cc:	fa01 f302 	lsl.w	r3, r1, r2
 80060d0:	4318      	orrs	r0, r3
 80060d2:	40e1      	lsrs	r1, r4
 80060d4:	4308      	orrs	r0, r1
 80060d6:	f000 0001 	and.w	r0, r0, #1
 80060da:	f1d0 0002 	rsbs	r0, r0, #2
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	2002      	movs	r0, #2
 80060e2:	e7fc      	b.n	80060de <checkint+0x5e>
 80060e4:	2000      	movs	r0, #0
 80060e6:	e7fa      	b.n	80060de <checkint+0x5e>

080060e8 <pow>:
 80060e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ec:	ee10 4a90 	vmov	r4, s1
 80060f0:	ed2d 8b0a 	vpush	{d8-d12}
 80060f4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 80060f8:	ee11 aa90 	vmov	sl, s3
 80060fc:	f108 32ff 	add.w	r2, r8, #4294967295
 8006100:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8006104:	429a      	cmp	r2, r3
 8006106:	ee10 5a10 	vmov	r5, s0
 800610a:	ee11 0a10 	vmov	r0, s2
 800610e:	b087      	sub	sp, #28
 8006110:	46c4      	mov	ip, r8
 8006112:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8006116:	d806      	bhi.n	8006126 <pow+0x3e>
 8006118:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800611c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8006120:	2b7f      	cmp	r3, #127	; 0x7f
 8006122:	f240 8156 	bls.w	80063d2 <pow+0x2ea>
 8006126:	1802      	adds	r2, r0, r0
 8006128:	eb4a 010a 	adc.w	r1, sl, sl
 800612c:	f06f 0b01 	mvn.w	fp, #1
 8006130:	1e57      	subs	r7, r2, #1
 8006132:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006136:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800613a:	45bb      	cmp	fp, r7
 800613c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8006140:	d242      	bcs.n	80061c8 <pow+0xe0>
 8006142:	ea52 0301 	orrs.w	r3, r2, r1
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	d10c      	bne.n	8006166 <pow+0x7e>
 800614c:	196d      	adds	r5, r5, r5
 800614e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8006152:	4164      	adcs	r4, r4
 8006154:	42ab      	cmp	r3, r5
 8006156:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800615a:	41a3      	sbcs	r3, r4
 800615c:	f0c0 808f 	bcc.w	800627e <pow+0x196>
 8006160:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006164:	e02b      	b.n	80061be <pow+0xd6>
 8006166:	4ed4      	ldr	r6, [pc, #848]	; (80064b8 <pow+0x3d0>)
 8006168:	42b4      	cmp	r4, r6
 800616a:	bf08      	it	eq
 800616c:	429d      	cmpeq	r5, r3
 800616e:	d109      	bne.n	8006184 <pow+0x9c>
 8006170:	1800      	adds	r0, r0, r0
 8006172:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 8006176:	eb4a 0a0a 	adc.w	sl, sl, sl
 800617a:	4283      	cmp	r3, r0
 800617c:	4bcf      	ldr	r3, [pc, #828]	; (80064bc <pow+0x3d4>)
 800617e:	eb73 030a 	sbcs.w	r3, r3, sl
 8006182:	e7eb      	b.n	800615c <pow+0x74>
 8006184:	196d      	adds	r5, r5, r5
 8006186:	48ce      	ldr	r0, [pc, #824]	; (80064c0 <pow+0x3d8>)
 8006188:	4164      	adcs	r4, r4
 800618a:	42ab      	cmp	r3, r5
 800618c:	eb70 0604 	sbcs.w	r6, r0, r4
 8006190:	d375      	bcc.n	800627e <pow+0x196>
 8006192:	4281      	cmp	r1, r0
 8006194:	bf08      	it	eq
 8006196:	429a      	cmpeq	r2, r3
 8006198:	d171      	bne.n	800627e <pow+0x196>
 800619a:	4aca      	ldr	r2, [pc, #808]	; (80064c4 <pow+0x3dc>)
 800619c:	4294      	cmp	r4, r2
 800619e:	bf08      	it	eq
 80061a0:	429d      	cmpeq	r5, r3
 80061a2:	d0dd      	beq.n	8006160 <pow+0x78>
 80061a4:	4294      	cmp	r4, r2
 80061a6:	ea6f 0a0a 	mvn.w	sl, sl
 80061aa:	bf34      	ite	cc
 80061ac:	2400      	movcc	r4, #0
 80061ae:	2401      	movcs	r4, #1
 80061b0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80061b4:	4554      	cmp	r4, sl
 80061b6:	f040 81dc 	bne.w	8006572 <pow+0x48a>
 80061ba:	ee21 0b01 	vmul.f64	d0, d1, d1
 80061be:	b007      	add	sp, #28
 80061c0:	ecbd 8b0a 	vpop	{d8-d12}
 80061c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c8:	196f      	adds	r7, r5, r5
 80061ca:	eb44 0904 	adc.w	r9, r4, r4
 80061ce:	1e7a      	subs	r2, r7, #1
 80061d0:	f169 0300 	sbc.w	r3, r9, #0
 80061d4:	4593      	cmp	fp, r2
 80061d6:	eb7e 0303 	sbcs.w	r3, lr, r3
 80061da:	d225      	bcs.n	8006228 <pow+0x140>
 80061dc:	ee20 0b00 	vmul.f64	d0, d0, d0
 80061e0:	2c00      	cmp	r4, #0
 80061e2:	da13      	bge.n	800620c <pow+0x124>
 80061e4:	4651      	mov	r1, sl
 80061e6:	f7ff ff4b 	bl	8006080 <checkint>
 80061ea:	2801      	cmp	r0, #1
 80061ec:	d10e      	bne.n	800620c <pow+0x124>
 80061ee:	eeb1 0b40 	vneg.f64	d0, d0
 80061f2:	ea57 0909 	orrs.w	r9, r7, r9
 80061f6:	d10b      	bne.n	8006210 <pow+0x128>
 80061f8:	f1ba 0f00 	cmp.w	sl, #0
 80061fc:	dadf      	bge.n	80061be <pow+0xd6>
 80061fe:	b007      	add	sp, #28
 8006200:	ecbd 8b0a 	vpop	{d8-d12}
 8006204:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	f000 bc42 	b.w	8006a90 <__math_divzero>
 800620c:	2000      	movs	r0, #0
 800620e:	e7f0      	b.n	80061f2 <pow+0x10a>
 8006210:	f1ba 0f00 	cmp.w	sl, #0
 8006214:	dad3      	bge.n	80061be <pow+0xd6>
 8006216:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800621a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800621e:	ed8d 7b00 	vstr	d7, [sp]
 8006222:	ed9d 0b00 	vldr	d0, [sp]
 8006226:	e7ca      	b.n	80061be <pow+0xd6>
 8006228:	2c00      	cmp	r4, #0
 800622a:	da2b      	bge.n	8006284 <pow+0x19c>
 800622c:	4651      	mov	r1, sl
 800622e:	f7ff ff27 	bl	8006080 <checkint>
 8006232:	b930      	cbnz	r0, 8006242 <pow+0x15a>
 8006234:	b007      	add	sp, #28
 8006236:	ecbd 8b0a 	vpop	{d8-d12}
 800623a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623e:	f000 bc3f 	b.w	8006ac0 <__math_invalid>
 8006242:	1e41      	subs	r1, r0, #1
 8006244:	4248      	negs	r0, r1
 8006246:	4148      	adcs	r0, r1
 8006248:	0480      	lsls	r0, r0, #18
 800624a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800624e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8006252:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8006256:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800625a:	2b7f      	cmp	r3, #127	; 0x7f
 800625c:	d92d      	bls.n	80062ba <pow+0x1d2>
 800625e:	4b96      	ldr	r3, [pc, #600]	; (80064b8 <pow+0x3d0>)
 8006260:	2000      	movs	r0, #0
 8006262:	429c      	cmp	r4, r3
 8006264:	bf08      	it	eq
 8006266:	4285      	cmpeq	r5, r0
 8006268:	f43f af7a 	beq.w	8006160 <pow+0x78>
 800626c:	f240 31bd 	movw	r1, #957	; 0x3bd
 8006270:	428a      	cmp	r2, r1
 8006272:	d80c      	bhi.n	800628e <pow+0x1a6>
 8006274:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006278:	42a8      	cmp	r0, r5
 800627a:	41a3      	sbcs	r3, r4
 800627c:	d204      	bcs.n	8006288 <pow+0x1a0>
 800627e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8006282:	e79c      	b.n	80061be <pow+0xd6>
 8006284:	2000      	movs	r0, #0
 8006286:	e7e4      	b.n	8006252 <pow+0x16a>
 8006288:	ee30 0b41 	vsub.f64	d0, d0, d1
 800628c:	e797      	b.n	80061be <pow+0xd6>
 800628e:	2d01      	cmp	r5, #1
 8006290:	eb74 0303 	sbcs.w	r3, r4, r3
 8006294:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006298:	bf34      	ite	cc
 800629a:	2301      	movcc	r3, #1
 800629c:	2300      	movcs	r3, #0
 800629e:	4296      	cmp	r6, r2
 80062a0:	bf8c      	ite	hi
 80062a2:	2600      	movhi	r6, #0
 80062a4:	2601      	movls	r6, #1
 80062a6:	42b3      	cmp	r3, r6
 80062a8:	f000 809b 	beq.w	80063e2 <pow+0x2fa>
 80062ac:	b007      	add	sp, #28
 80062ae:	ecbd 8b0a 	vpop	{d8-d12}
 80062b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b6:	f000 bbe3 	b.w	8006a80 <__math_oflow>
 80062ba:	f1bc 0f00 	cmp.w	ip, #0
 80062be:	d10b      	bne.n	80062d8 <pow+0x1f0>
 80062c0:	ed9f 7b79 	vldr	d7, [pc, #484]	; 80064a8 <pow+0x3c0>
 80062c4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80062c8:	ec53 2b17 	vmov	r2, r3, d7
 80062cc:	ee17 5a10 	vmov	r5, s14
 80062d0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80062d4:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80062d8:	4b7b      	ldr	r3, [pc, #492]	; (80064c8 <pow+0x3e0>)
 80062da:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80062de:	4423      	add	r3, r4
 80062e0:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80062e4:	1519      	asrs	r1, r3, #20
 80062e6:	0d1b      	lsrs	r3, r3, #20
 80062e8:	051b      	lsls	r3, r3, #20
 80062ea:	1ae7      	subs	r7, r4, r3
 80062ec:	4b77      	ldr	r3, [pc, #476]	; (80064cc <pow+0x3e4>)
 80062ee:	ee03 1a10 	vmov	s6, r1
 80062f2:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80062f6:	1e2e      	subs	r6, r5, #0
 80062f8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80062fc:	ec47 6b15 	vmov	d5, r6, r7
 8006300:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8006304:	eea5 6b07 	vfma.f64	d6, d5, d7
 8006308:	ed93 7b00 	vldr	d7, [r3]
 800630c:	ed93 5b02 	vldr	d5, [r3, #8]
 8006310:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8006314:	eea3 2b07 	vfma.f64	d2, d3, d7
 8006318:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800631c:	ee36 4b02 	vadd.f64	d4, d6, d2
 8006320:	ee32 2b44 	vsub.f64	d2, d2, d4
 8006324:	eea3 7b05 	vfma.f64	d7, d3, d5
 8006328:	ed93 5b04 	vldr	d5, [r3, #16]
 800632c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8006330:	ee37 7b02 	vadd.f64	d7, d7, d2
 8006334:	ee26 5b05 	vmul.f64	d5, d6, d5
 8006338:	ee26 0b05 	vmul.f64	d0, d6, d5
 800633c:	ee34 8b00 	vadd.f64	d8, d4, d0
 8006340:	eeb0 9b40 	vmov.f64	d9, d0
 8006344:	ee34 4b48 	vsub.f64	d4, d4, d8
 8006348:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800634c:	ee34 ab00 	vadd.f64	d10, d4, d0
 8006350:	ed93 5b06 	vldr	d5, [r3, #24]
 8006354:	ee26 bb00 	vmul.f64	d11, d6, d0
 8006358:	ee37 7b09 	vadd.f64	d7, d7, d9
 800635c:	ed93 4b08 	vldr	d4, [r3, #32]
 8006360:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8006364:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8006368:	eea6 5b04 	vfma.f64	d5, d6, d4
 800636c:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8006370:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8006374:	eea6 4b03 	vfma.f64	d4, d6, d3
 8006378:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800637c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8006380:	eea0 4b03 	vfma.f64	d4, d0, d3
 8006384:	eea0 5b04 	vfma.f64	d5, d0, d4
 8006388:	eeab 7b05 	vfma.f64	d7, d11, d5
 800638c:	ee38 4b07 	vadd.f64	d4, d8, d7
 8006390:	ee21 6b04 	vmul.f64	d6, d1, d4
 8006394:	ee16 3a90 	vmov	r3, s13
 8006398:	eeb0 5b46 	vmov.f64	d5, d6
 800639c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80063a0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80063a4:	18b2      	adds	r2, r6, r2
 80063a6:	2a3e      	cmp	r2, #62	; 0x3e
 80063a8:	ee91 5b04 	vfnms.f64	d5, d1, d4
 80063ac:	ee38 8b44 	vsub.f64	d8, d8, d4
 80063b0:	ee38 8b07 	vadd.f64	d8, d8, d7
 80063b4:	eea1 5b08 	vfma.f64	d5, d1, d8
 80063b8:	d91b      	bls.n	80063f2 <pow+0x30a>
 80063ba:	2a00      	cmp	r2, #0
 80063bc:	da0b      	bge.n	80063d6 <pow+0x2ee>
 80063be:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80063c2:	ee36 0b00 	vadd.f64	d0, d6, d0
 80063c6:	2800      	cmp	r0, #0
 80063c8:	f43f aef9 	beq.w	80061be <pow+0xd6>
 80063cc:	eeb1 0b40 	vneg.f64	d0, d0
 80063d0:	e6f5      	b.n	80061be <pow+0xd6>
 80063d2:	2000      	movs	r0, #0
 80063d4:	e780      	b.n	80062d8 <pow+0x1f0>
 80063d6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 80063da:	d909      	bls.n	80063f0 <pow+0x308>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f6bf af65 	bge.w	80062ac <pow+0x1c4>
 80063e2:	b007      	add	sp, #28
 80063e4:	ecbd 8b0a 	vpop	{d8-d12}
 80063e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	f000 bb40 	b.w	8006a70 <__math_uflow>
 80063f0:	2600      	movs	r6, #0
 80063f2:	4937      	ldr	r1, [pc, #220]	; (80064d0 <pow+0x3e8>)
 80063f4:	ed91 4b02 	vldr	d4, [r1, #8]
 80063f8:	ed91 3b00 	vldr	d3, [r1]
 80063fc:	eeb0 7b44 	vmov.f64	d7, d4
 8006400:	eea6 7b03 	vfma.f64	d7, d6, d3
 8006404:	ee17 5a10 	vmov	r5, s14
 8006408:	ee37 7b44 	vsub.f64	d7, d7, d4
 800640c:	ed91 4b04 	vldr	d4, [r1, #16]
 8006410:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8006414:	eea7 6b04 	vfma.f64	d6, d7, d4
 8006418:	ed91 4b06 	vldr	d4, [r1, #24]
 800641c:	18dc      	adds	r4, r3, r3
 800641e:	f104 030f 	add.w	r3, r4, #15
 8006422:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006426:	eea7 6b04 	vfma.f64	d6, d7, d4
 800642a:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800642e:	ee35 5b06 	vadd.f64	d5, d5, d6
 8006432:	ee25 6b05 	vmul.f64	d6, d5, d5
 8006436:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800643a:	ed91 4b08 	vldr	d4, [r1, #32]
 800643e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006442:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8006446:	eea5 4b03 	vfma.f64	d4, d5, d3
 800644a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800644e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8006452:	ee26 6b06 	vmul.f64	d6, d6, d6
 8006456:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800645a:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800645e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8006462:	eea5 4b03 	vfma.f64	d4, d5, d3
 8006466:	1940      	adds	r0, r0, r5
 8006468:	2700      	movs	r7, #0
 800646a:	eb17 020c 	adds.w	r2, r7, ip
 800646e:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8006472:	eea6 7b04 	vfma.f64	d7, d6, d4
 8006476:	2e00      	cmp	r6, #0
 8006478:	d176      	bne.n	8006568 <pow+0x480>
 800647a:	42bd      	cmp	r5, r7
 800647c:	db2a      	blt.n	80064d4 <pow+0x3ec>
 800647e:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8006482:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8006486:	4610      	mov	r0, r2
 8006488:	ec41 0b10 	vmov	d0, r0, r1
 800648c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8006490:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80064b0 <pow+0x3c8>
 8006494:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006498:	b007      	add	sp, #28
 800649a:	ecbd 8b0a 	vpop	{d8-d12}
 800649e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a2:	f000 bb25 	b.w	8006af0 <__math_check_oflow>
 80064a6:	bf00      	nop
 80064a8:	00000000 	.word	0x00000000
 80064ac:	43300000 	.word	0x43300000
 80064b0:	00000000 	.word	0x00000000
 80064b4:	7f000000 	.word	0x7f000000
 80064b8:	3ff00000 	.word	0x3ff00000
 80064bc:	fff00000 	.word	0xfff00000
 80064c0:	ffe00000 	.word	0xffe00000
 80064c4:	7fe00000 	.word	0x7fe00000
 80064c8:	c0196aab 	.word	0xc0196aab
 80064cc:	080072a8 	.word	0x080072a8
 80064d0:	08008478 	.word	0x08008478
 80064d4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80064d8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80064dc:	4610      	mov	r0, r2
 80064de:	ec41 0b15 	vmov	d5, r0, r1
 80064e2:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 80064e6:	ee27 6b05 	vmul.f64	d6, d7, d5
 80064ea:	ee35 7b06 	vadd.f64	d7, d5, d6
 80064ee:	eeb0 4bc7 	vabs.f64	d4, d7
 80064f2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80064f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064fa:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8006578 <pow+0x490>
 80064fe:	d52a      	bpl.n	8006556 <pow+0x46e>
 8006500:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006504:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800650c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8006510:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8006514:	bf58      	it	pl
 8006516:	eeb0 4b43 	vmovpl.f64	d4, d3
 800651a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800651e:	ee34 6b43 	vsub.f64	d6, d4, d3
 8006522:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006526:	ee36 6b05 	vadd.f64	d6, d6, d5
 800652a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800652e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8006532:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653a:	d104      	bne.n	8006546 <pow+0x45e>
 800653c:	4632      	mov	r2, r6
 800653e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006542:	ec43 2b17 	vmov	d7, r2, r3
 8006546:	ed8d 0b02 	vstr	d0, [sp, #8]
 800654a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800654e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8006552:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006556:	ee27 0b00 	vmul.f64	d0, d7, d0
 800655a:	b007      	add	sp, #28
 800655c:	ecbd 8b0a 	vpop	{d8-d12}
 8006560:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	f000 babb 	b.w	8006ade <__math_check_uflow>
 8006568:	ec43 2b10 	vmov	d0, r2, r3
 800656c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8006570:	e625      	b.n	80061be <pow+0xd6>
 8006572:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8006580 <pow+0x498>
 8006576:	e622      	b.n	80061be <pow+0xd6>
 8006578:	00000000 	.word	0x00000000
 800657c:	00100000 	.word	0x00100000
	...

08006588 <round>:
 8006588:	ee10 1a90 	vmov	r1, s1
 800658c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006590:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006594:	2b13      	cmp	r3, #19
 8006596:	b510      	push	{r4, lr}
 8006598:	ee10 4a10 	vmov	r4, s0
 800659c:	dc19      	bgt.n	80065d2 <round+0x4a>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	da09      	bge.n	80065b6 <round+0x2e>
 80065a2:	3301      	adds	r3, #1
 80065a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80065a8:	d103      	bne.n	80065b2 <round+0x2a>
 80065aa:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80065ae:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80065b2:	2000      	movs	r0, #0
 80065b4:	e025      	b.n	8006602 <round+0x7a>
 80065b6:	4815      	ldr	r0, [pc, #84]	; (800660c <round+0x84>)
 80065b8:	4118      	asrs	r0, r3
 80065ba:	ea01 0200 	and.w	r2, r1, r0
 80065be:	4322      	orrs	r2, r4
 80065c0:	d00e      	beq.n	80065e0 <round+0x58>
 80065c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80065c6:	fa42 f303 	asr.w	r3, r2, r3
 80065ca:	440b      	add	r3, r1
 80065cc:	ea23 0100 	bic.w	r1, r3, r0
 80065d0:	e7ef      	b.n	80065b2 <round+0x2a>
 80065d2:	2b33      	cmp	r3, #51	; 0x33
 80065d4:	dd05      	ble.n	80065e2 <round+0x5a>
 80065d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065da:	d101      	bne.n	80065e0 <round+0x58>
 80065dc:	ee30 0b00 	vadd.f64	d0, d0, d0
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	f2a2 4013 	subw	r0, r2, #1043	; 0x413
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ea:	40c2      	lsrs	r2, r0
 80065ec:	4222      	tst	r2, r4
 80065ee:	d0f7      	beq.n	80065e0 <round+0x58>
 80065f0:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 80065f4:	2001      	movs	r0, #1
 80065f6:	4098      	lsls	r0, r3
 80065f8:	1900      	adds	r0, r0, r4
 80065fa:	bf28      	it	cs
 80065fc:	3101      	addcs	r1, #1
 80065fe:	ea20 0002 	bic.w	r0, r0, r2
 8006602:	460b      	mov	r3, r1
 8006604:	4602      	mov	r2, r0
 8006606:	ec43 2b10 	vmov	d0, r2, r3
 800660a:	e7e9      	b.n	80065e0 <round+0x58>
 800660c:	000fffff 	.word	0x000fffff

08006610 <__kernel_cos>:
 8006610:	ee10 1a90 	vmov	r1, s1
 8006614:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800661c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8006620:	da05      	bge.n	800662e <__kernel_cos+0x1e>
 8006622:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006626:	ee17 3a90 	vmov	r3, s15
 800662a:	2b00      	cmp	r3, #0
 800662c:	d03d      	beq.n	80066aa <__kernel_cos+0x9a>
 800662e:	ee20 5b00 	vmul.f64	d5, d0, d0
 8006632:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8006636:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 80066b0 <__kernel_cos+0xa0>
 800663a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 80066b8 <__kernel_cos+0xa8>
 800663e:	eea5 4b07 	vfma.f64	d4, d5, d7
 8006642:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80066c0 <__kernel_cos+0xb0>
 8006646:	eea4 7b05 	vfma.f64	d7, d4, d5
 800664a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 80066c8 <__kernel_cos+0xb8>
 800664e:	eea7 4b05 	vfma.f64	d4, d7, d5
 8006652:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80066d0 <__kernel_cos+0xc0>
 8006656:	4b22      	ldr	r3, [pc, #136]	; (80066e0 <__kernel_cos+0xd0>)
 8006658:	eea4 7b05 	vfma.f64	d7, d4, d5
 800665c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80066d8 <__kernel_cos+0xc8>
 8006660:	4299      	cmp	r1, r3
 8006662:	eea7 4b05 	vfma.f64	d4, d7, d5
 8006666:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800666a:	ee24 4b05 	vmul.f64	d4, d4, d5
 800666e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006672:	eea5 1b04 	vfma.f64	d1, d5, d4
 8006676:	dc04      	bgt.n	8006682 <__kernel_cos+0x72>
 8006678:	ee37 7b41 	vsub.f64	d7, d7, d1
 800667c:	ee36 0b47 	vsub.f64	d0, d6, d7
 8006680:	4770      	bx	lr
 8006682:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <__kernel_cos+0xd4>)
 8006684:	4299      	cmp	r1, r3
 8006686:	dc0d      	bgt.n	80066a4 <__kernel_cos+0x94>
 8006688:	2200      	movs	r2, #0
 800668a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800668e:	ec43 2b15 	vmov	d5, r2, r3
 8006692:	ee36 0b45 	vsub.f64	d0, d6, d5
 8006696:	ee37 7b45 	vsub.f64	d7, d7, d5
 800669a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800669e:	ee30 0b47 	vsub.f64	d0, d0, d7
 80066a2:	4770      	bx	lr
 80066a4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80066a8:	e7f3      	b.n	8006692 <__kernel_cos+0x82>
 80066aa:	eeb0 0b46 	vmov.f64	d0, d6
 80066ae:	4770      	bx	lr
 80066b0:	be8838d4 	.word	0xbe8838d4
 80066b4:	bda8fae9 	.word	0xbda8fae9
 80066b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80066bc:	3e21ee9e 	.word	0x3e21ee9e
 80066c0:	809c52ad 	.word	0x809c52ad
 80066c4:	be927e4f 	.word	0xbe927e4f
 80066c8:	19cb1590 	.word	0x19cb1590
 80066cc:	3efa01a0 	.word	0x3efa01a0
 80066d0:	16c15177 	.word	0x16c15177
 80066d4:	bf56c16c 	.word	0xbf56c16c
 80066d8:	5555554c 	.word	0x5555554c
 80066dc:	3fa55555 	.word	0x3fa55555
 80066e0:	3fd33332 	.word	0x3fd33332
 80066e4:	3fe90000 	.word	0x3fe90000

080066e8 <__kernel_sin>:
 80066e8:	ee10 3a90 	vmov	r3, s1
 80066ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066f0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80066f4:	da04      	bge.n	8006700 <__kernel_sin+0x18>
 80066f6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80066fa:	ee17 3a90 	vmov	r3, s15
 80066fe:	b35b      	cbz	r3, 8006758 <__kernel_sin+0x70>
 8006700:	ee20 6b00 	vmul.f64	d6, d0, d0
 8006704:	ee20 5b06 	vmul.f64	d5, d0, d6
 8006708:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006760 <__kernel_sin+0x78>
 800670c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006768 <__kernel_sin+0x80>
 8006710:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006714:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006770 <__kernel_sin+0x88>
 8006718:	eea4 7b06 	vfma.f64	d7, d4, d6
 800671c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006778 <__kernel_sin+0x90>
 8006720:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006724:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006780 <__kernel_sin+0x98>
 8006728:	eea4 7b06 	vfma.f64	d7, d4, d6
 800672c:	b930      	cbnz	r0, 800673c <__kernel_sin+0x54>
 800672e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006788 <__kernel_sin+0xa0>
 8006732:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006736:	eea4 0b05 	vfma.f64	d0, d4, d5
 800673a:	4770      	bx	lr
 800673c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8006740:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006744:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006748:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800674c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006790 <__kernel_sin+0xa8>
 8006750:	eea5 1b07 	vfma.f64	d1, d5, d7
 8006754:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	f3af 8000 	nop.w
 8006760:	5acfd57c 	.word	0x5acfd57c
 8006764:	3de5d93a 	.word	0x3de5d93a
 8006768:	8a2b9ceb 	.word	0x8a2b9ceb
 800676c:	be5ae5e6 	.word	0xbe5ae5e6
 8006770:	57b1fe7d 	.word	0x57b1fe7d
 8006774:	3ec71de3 	.word	0x3ec71de3
 8006778:	19c161d5 	.word	0x19c161d5
 800677c:	bf2a01a0 	.word	0xbf2a01a0
 8006780:	1110f8a6 	.word	0x1110f8a6
 8006784:	3f811111 	.word	0x3f811111
 8006788:	55555549 	.word	0x55555549
 800678c:	bfc55555 	.word	0xbfc55555
 8006790:	55555549 	.word	0x55555549
 8006794:	3fc55555 	.word	0x3fc55555

08006798 <__ieee754_rem_pio2>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	eeb0 7b40 	vmov.f64	d7, d0
 800679e:	ee17 5a90 	vmov	r5, s15
 80067a2:	4b99      	ldr	r3, [pc, #612]	; (8006a08 <__ieee754_rem_pio2+0x270>)
 80067a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80067a8:	429e      	cmp	r6, r3
 80067aa:	b088      	sub	sp, #32
 80067ac:	4604      	mov	r4, r0
 80067ae:	dc07      	bgt.n	80067c0 <__ieee754_rem_pio2+0x28>
 80067b0:	2200      	movs	r2, #0
 80067b2:	2300      	movs	r3, #0
 80067b4:	ed84 0b00 	vstr	d0, [r4]
 80067b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80067bc:	2000      	movs	r0, #0
 80067be:	e01b      	b.n	80067f8 <__ieee754_rem_pio2+0x60>
 80067c0:	4b92      	ldr	r3, [pc, #584]	; (8006a0c <__ieee754_rem_pio2+0x274>)
 80067c2:	429e      	cmp	r6, r3
 80067c4:	dc3b      	bgt.n	800683e <__ieee754_rem_pio2+0xa6>
 80067c6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80067ca:	2d00      	cmp	r5, #0
 80067cc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80069c8 <__ieee754_rem_pio2+0x230>
 80067d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80067d4:	dd19      	ble.n	800680a <__ieee754_rem_pio2+0x72>
 80067d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80067da:	429e      	cmp	r6, r3
 80067dc:	d00e      	beq.n	80067fc <__ieee754_rem_pio2+0x64>
 80067de:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80069d0 <__ieee754_rem_pio2+0x238>
 80067e2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80067e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80067ea:	ed84 5b00 	vstr	d5, [r4]
 80067ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80067f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80067f6:	2001      	movs	r0, #1
 80067f8:	b008      	add	sp, #32
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80069d8 <__ieee754_rem_pio2+0x240>
 8006800:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006804:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80069e0 <__ieee754_rem_pio2+0x248>
 8006808:	e7eb      	b.n	80067e2 <__ieee754_rem_pio2+0x4a>
 800680a:	429e      	cmp	r6, r3
 800680c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006810:	d00e      	beq.n	8006830 <__ieee754_rem_pio2+0x98>
 8006812:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80069d0 <__ieee754_rem_pio2+0x238>
 8006816:	ee37 5b06 	vadd.f64	d5, d7, d6
 800681a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800681e:	ed84 5b00 	vstr	d5, [r4]
 8006822:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006826:	f04f 30ff 	mov.w	r0, #4294967295
 800682a:	ed84 7b02 	vstr	d7, [r4, #8]
 800682e:	e7e3      	b.n	80067f8 <__ieee754_rem_pio2+0x60>
 8006830:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80069d8 <__ieee754_rem_pio2+0x240>
 8006834:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006838:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80069e0 <__ieee754_rem_pio2+0x248>
 800683c:	e7eb      	b.n	8006816 <__ieee754_rem_pio2+0x7e>
 800683e:	4b74      	ldr	r3, [pc, #464]	; (8006a10 <__ieee754_rem_pio2+0x278>)
 8006840:	429e      	cmp	r6, r3
 8006842:	dc70      	bgt.n	8006926 <__ieee754_rem_pio2+0x18e>
 8006844:	f000 f8ec 	bl	8006a20 <fabs>
 8006848:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800684c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80069e8 <__ieee754_rem_pio2+0x250>
 8006850:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006854:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006858:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800685c:	ee17 0a90 	vmov	r0, s15
 8006860:	eeb1 4b45 	vneg.f64	d4, d5
 8006864:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80069c8 <__ieee754_rem_pio2+0x230>
 8006868:	eea5 0b47 	vfms.f64	d0, d5, d7
 800686c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80069d0 <__ieee754_rem_pio2+0x238>
 8006870:	281f      	cmp	r0, #31
 8006872:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006876:	ee30 6b47 	vsub.f64	d6, d0, d7
 800687a:	dc08      	bgt.n	800688e <__ieee754_rem_pio2+0xf6>
 800687c:	4b65      	ldr	r3, [pc, #404]	; (8006a14 <__ieee754_rem_pio2+0x27c>)
 800687e:	1e42      	subs	r2, r0, #1
 8006880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006884:	42b3      	cmp	r3, r6
 8006886:	d002      	beq.n	800688e <__ieee754_rem_pio2+0xf6>
 8006888:	ed84 6b00 	vstr	d6, [r4]
 800688c:	e024      	b.n	80068d8 <__ieee754_rem_pio2+0x140>
 800688e:	ee16 3a90 	vmov	r3, s13
 8006892:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006896:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800689a:	2b10      	cmp	r3, #16
 800689c:	ea4f 5226 	mov.w	r2, r6, asr #20
 80068a0:	ddf2      	ble.n	8006888 <__ieee754_rem_pio2+0xf0>
 80068a2:	eeb0 6b40 	vmov.f64	d6, d0
 80068a6:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 80069d8 <__ieee754_rem_pio2+0x240>
 80068aa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80068ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 80068b2:	eea4 7b03 	vfma.f64	d7, d4, d3
 80068b6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80069e0 <__ieee754_rem_pio2+0x248>
 80068ba:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80068be:	ee36 3b47 	vsub.f64	d3, d6, d7
 80068c2:	ee13 3a90 	vmov	r3, s7
 80068c6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b31      	cmp	r3, #49	; 0x31
 80068ce:	dc17      	bgt.n	8006900 <__ieee754_rem_pio2+0x168>
 80068d0:	eeb0 0b46 	vmov.f64	d0, d6
 80068d4:	ed84 3b00 	vstr	d3, [r4]
 80068d8:	ed94 6b00 	vldr	d6, [r4]
 80068dc:	2d00      	cmp	r5, #0
 80068de:	ee30 0b46 	vsub.f64	d0, d0, d6
 80068e2:	ee30 0b47 	vsub.f64	d0, d0, d7
 80068e6:	ed84 0b02 	vstr	d0, [r4, #8]
 80068ea:	da85      	bge.n	80067f8 <__ieee754_rem_pio2+0x60>
 80068ec:	eeb1 6b46 	vneg.f64	d6, d6
 80068f0:	eeb1 0b40 	vneg.f64	d0, d0
 80068f4:	ed84 6b00 	vstr	d6, [r4]
 80068f8:	ed84 0b02 	vstr	d0, [r4, #8]
 80068fc:	4240      	negs	r0, r0
 80068fe:	e77b      	b.n	80067f8 <__ieee754_rem_pio2+0x60>
 8006900:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80069f0 <__ieee754_rem_pio2+0x258>
 8006904:	eeb0 0b46 	vmov.f64	d0, d6
 8006908:	eea4 0b07 	vfma.f64	d0, d4, d7
 800690c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8006910:	eea4 6b07 	vfma.f64	d6, d4, d7
 8006914:	ed9f 4b38 	vldr	d4, [pc, #224]	; 80069f8 <__ieee754_rem_pio2+0x260>
 8006918:	eeb0 7b46 	vmov.f64	d7, d6
 800691c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8006920:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006924:	e7b0      	b.n	8006888 <__ieee754_rem_pio2+0xf0>
 8006926:	4b3c      	ldr	r3, [pc, #240]	; (8006a18 <__ieee754_rem_pio2+0x280>)
 8006928:	429e      	cmp	r6, r3
 800692a:	dd06      	ble.n	800693a <__ieee754_rem_pio2+0x1a2>
 800692c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006930:	ed80 7b02 	vstr	d7, [r0, #8]
 8006934:	ed80 7b00 	vstr	d7, [r0]
 8006938:	e740      	b.n	80067bc <__ieee754_rem_pio2+0x24>
 800693a:	1532      	asrs	r2, r6, #20
 800693c:	ee10 0a10 	vmov	r0, s0
 8006940:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8006944:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8006948:	ec41 0b17 	vmov	d7, r0, r1
 800694c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006950:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8006a00 <__ieee754_rem_pio2+0x268>
 8006954:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006958:	ee37 7b46 	vsub.f64	d7, d7, d6
 800695c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006960:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006964:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006968:	a808      	add	r0, sp, #32
 800696a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800696e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006972:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006976:	ee27 7b05 	vmul.f64	d7, d7, d5
 800697a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800697e:	2103      	movs	r1, #3
 8006980:	ed30 7b02 	vldmdb	r0!, {d7}
 8006984:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698c:	460b      	mov	r3, r1
 800698e:	f101 31ff 	add.w	r1, r1, #4294967295
 8006992:	d0f5      	beq.n	8006980 <__ieee754_rem_pio2+0x1e8>
 8006994:	4921      	ldr	r1, [pc, #132]	; (8006a1c <__ieee754_rem_pio2+0x284>)
 8006996:	9101      	str	r1, [sp, #4]
 8006998:	2102      	movs	r1, #2
 800699a:	9100      	str	r1, [sp, #0]
 800699c:	a802      	add	r0, sp, #8
 800699e:	4621      	mov	r1, r4
 80069a0:	f000 f8ba 	bl	8006b18 <__kernel_rem_pio2>
 80069a4:	2d00      	cmp	r5, #0
 80069a6:	f6bf af27 	bge.w	80067f8 <__ieee754_rem_pio2+0x60>
 80069aa:	ed94 7b00 	vldr	d7, [r4]
 80069ae:	eeb1 7b47 	vneg.f64	d7, d7
 80069b2:	ed84 7b00 	vstr	d7, [r4]
 80069b6:	ed94 7b02 	vldr	d7, [r4, #8]
 80069ba:	eeb1 7b47 	vneg.f64	d7, d7
 80069be:	ed84 7b02 	vstr	d7, [r4, #8]
 80069c2:	e79b      	b.n	80068fc <__ieee754_rem_pio2+0x164>
 80069c4:	f3af 8000 	nop.w
 80069c8:	54400000 	.word	0x54400000
 80069cc:	3ff921fb 	.word	0x3ff921fb
 80069d0:	1a626331 	.word	0x1a626331
 80069d4:	3dd0b461 	.word	0x3dd0b461
 80069d8:	1a600000 	.word	0x1a600000
 80069dc:	3dd0b461 	.word	0x3dd0b461
 80069e0:	2e037073 	.word	0x2e037073
 80069e4:	3ba3198a 	.word	0x3ba3198a
 80069e8:	6dc9c883 	.word	0x6dc9c883
 80069ec:	3fe45f30 	.word	0x3fe45f30
 80069f0:	2e000000 	.word	0x2e000000
 80069f4:	3ba3198a 	.word	0x3ba3198a
 80069f8:	252049c1 	.word	0x252049c1
 80069fc:	397b839a 	.word	0x397b839a
 8006a00:	00000000 	.word	0x00000000
 8006a04:	41700000 	.word	0x41700000
 8006a08:	3fe921fb 	.word	0x3fe921fb
 8006a0c:	4002d97b 	.word	0x4002d97b
 8006a10:	413921fb 	.word	0x413921fb
 8006a14:	080082f0 	.word	0x080082f0
 8006a18:	7fefffff 	.word	0x7fefffff
 8006a1c:	08008370 	.word	0x08008370

08006a20 <fabs>:
 8006a20:	ec51 0b10 	vmov	r0, r1, d0
 8006a24:	ee10 2a10 	vmov	r2, s0
 8006a28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a2c:	ec43 2b10 	vmov	d0, r2, r3
 8006a30:	4770      	bx	lr

08006a32 <with_errno>:
 8006a32:	b513      	push	{r0, r1, r4, lr}
 8006a34:	4604      	mov	r4, r0
 8006a36:	ed8d 0b00 	vstr	d0, [sp]
 8006a3a:	f7fe fd99 	bl	8005570 <__errno>
 8006a3e:	ed9d 0b00 	vldr	d0, [sp]
 8006a42:	6004      	str	r4, [r0, #0]
 8006a44:	b002      	add	sp, #8
 8006a46:	bd10      	pop	{r4, pc}

08006a48 <xflow>:
 8006a48:	b082      	sub	sp, #8
 8006a4a:	b158      	cbz	r0, 8006a64 <xflow+0x1c>
 8006a4c:	eeb1 7b40 	vneg.f64	d7, d0
 8006a50:	ed8d 7b00 	vstr	d7, [sp]
 8006a54:	ed9d 7b00 	vldr	d7, [sp]
 8006a58:	2022      	movs	r0, #34	; 0x22
 8006a5a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006a5e:	b002      	add	sp, #8
 8006a60:	f7ff bfe7 	b.w	8006a32 <with_errno>
 8006a64:	eeb0 7b40 	vmov.f64	d7, d0
 8006a68:	e7f2      	b.n	8006a50 <xflow+0x8>
 8006a6a:	0000      	movs	r0, r0
 8006a6c:	0000      	movs	r0, r0
	...

08006a70 <__math_uflow>:
 8006a70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006a78 <__math_uflow+0x8>
 8006a74:	f7ff bfe8 	b.w	8006a48 <xflow>
 8006a78:	00000000 	.word	0x00000000
 8006a7c:	10000000 	.word	0x10000000

08006a80 <__math_oflow>:
 8006a80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006a88 <__math_oflow+0x8>
 8006a84:	f7ff bfe0 	b.w	8006a48 <xflow>
 8006a88:	00000000 	.word	0x00000000
 8006a8c:	70000000 	.word	0x70000000

08006a90 <__math_divzero>:
 8006a90:	b082      	sub	sp, #8
 8006a92:	2800      	cmp	r0, #0
 8006a94:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006a98:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8006a9c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8006aa0:	ed8d 7b00 	vstr	d7, [sp]
 8006aa4:	ed9d 0b00 	vldr	d0, [sp]
 8006aa8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8006ab8 <__math_divzero+0x28>
 8006aac:	2022      	movs	r0, #34	; 0x22
 8006aae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8006ab2:	b002      	add	sp, #8
 8006ab4:	f7ff bfbd 	b.w	8006a32 <with_errno>
	...

08006ac0 <__math_invalid>:
 8006ac0:	eeb0 7b40 	vmov.f64	d7, d0
 8006ac4:	eeb4 7b47 	vcmp.f64	d7, d7
 8006ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006acc:	ee30 6b40 	vsub.f64	d6, d0, d0
 8006ad0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8006ad4:	d602      	bvs.n	8006adc <__math_invalid+0x1c>
 8006ad6:	2021      	movs	r0, #33	; 0x21
 8006ad8:	f7ff bfab 	b.w	8006a32 <with_errno>
 8006adc:	4770      	bx	lr

08006ade <__math_check_uflow>:
 8006ade:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8006ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae6:	d102      	bne.n	8006aee <__math_check_uflow+0x10>
 8006ae8:	2022      	movs	r0, #34	; 0x22
 8006aea:	f7ff bfa2 	b.w	8006a32 <with_errno>
 8006aee:	4770      	bx	lr

08006af0 <__math_check_oflow>:
 8006af0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8006b10 <__math_check_oflow+0x20>
 8006af4:	eeb0 7bc0 	vabs.f64	d7, d0
 8006af8:	eeb4 7b46 	vcmp.f64	d7, d6
 8006afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b00:	dd02      	ble.n	8006b08 <__math_check_oflow+0x18>
 8006b02:	2022      	movs	r0, #34	; 0x22
 8006b04:	f7ff bf95 	b.w	8006a32 <with_errno>
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	f3af 8000 	nop.w
 8006b10:	ffffffff 	.word	0xffffffff
 8006b14:	7fefffff 	.word	0x7fefffff

08006b18 <__kernel_rem_pio2>:
 8006b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1c:	ed2d 8b06 	vpush	{d8-d10}
 8006b20:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006b24:	460f      	mov	r7, r1
 8006b26:	9002      	str	r0, [sp, #8]
 8006b28:	49c3      	ldr	r1, [pc, #780]	; (8006e38 <__kernel_rem_pio2+0x320>)
 8006b2a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8006b32:	9901      	ldr	r1, [sp, #4]
 8006b34:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006b36:	f112 0f14 	cmn.w	r2, #20
 8006b3a:	bfa8      	it	ge
 8006b3c:	1ed0      	subge	r0, r2, #3
 8006b3e:	f101 3aff 	add.w	sl, r1, #4294967295
 8006b42:	bfaa      	itet	ge
 8006b44:	2418      	movge	r4, #24
 8006b46:	2000      	movlt	r0, #0
 8006b48:	fb90 f0f4 	sdivge	r0, r0, r4
 8006b4c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8006e20 <__kernel_rem_pio2+0x308>
 8006b50:	f06f 0417 	mvn.w	r4, #23
 8006b54:	fb00 4404 	mla	r4, r0, r4, r4
 8006b58:	eba0 060a 	sub.w	r6, r0, sl
 8006b5c:	4414      	add	r4, r2
 8006b5e:	eb09 0c0a 	add.w	ip, r9, sl
 8006b62:	ad1a      	add	r5, sp, #104	; 0x68
 8006b64:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4562      	cmp	r2, ip
 8006b6c:	dd10      	ble.n	8006b90 <__kernel_rem_pio2+0x78>
 8006b6e:	9a01      	ldr	r2, [sp, #4]
 8006b70:	a91a      	add	r1, sp, #104	; 0x68
 8006b72:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006b76:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8006b7a:	f04f 0c00 	mov.w	ip, #0
 8006b7e:	45cc      	cmp	ip, r9
 8006b80:	dc26      	bgt.n	8006bd0 <__kernel_rem_pio2+0xb8>
 8006b82:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8006e20 <__kernel_rem_pio2+0x308>
 8006b86:	f8dd e008 	ldr.w	lr, [sp, #8]
 8006b8a:	4616      	mov	r6, r2
 8006b8c:	2500      	movs	r5, #0
 8006b8e:	e015      	b.n	8006bbc <__kernel_rem_pio2+0xa4>
 8006b90:	42d6      	cmn	r6, r2
 8006b92:	d409      	bmi.n	8006ba8 <__kernel_rem_pio2+0x90>
 8006b94:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8006b98:	ee07 1a90 	vmov	s15, r1
 8006b9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ba0:	eca5 7b02 	vstmia	r5!, {d7}
 8006ba4:	3201      	adds	r2, #1
 8006ba6:	e7e0      	b.n	8006b6a <__kernel_rem_pio2+0x52>
 8006ba8:	eeb0 7b46 	vmov.f64	d7, d6
 8006bac:	e7f8      	b.n	8006ba0 <__kernel_rem_pio2+0x88>
 8006bae:	ecbe 5b02 	vldmia	lr!, {d5}
 8006bb2:	ed96 6b00 	vldr	d6, [r6]
 8006bb6:	3501      	adds	r5, #1
 8006bb8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006bbc:	4555      	cmp	r5, sl
 8006bbe:	f1a6 0608 	sub.w	r6, r6, #8
 8006bc2:	ddf4      	ble.n	8006bae <__kernel_rem_pio2+0x96>
 8006bc4:	eca8 7b02 	vstmia	r8!, {d7}
 8006bc8:	f10c 0c01 	add.w	ip, ip, #1
 8006bcc:	3208      	adds	r2, #8
 8006bce:	e7d6      	b.n	8006b7e <__kernel_rem_pio2+0x66>
 8006bd0:	aa06      	add	r2, sp, #24
 8006bd2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8006e28 <__kernel_rem_pio2+0x310>
 8006bd6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8006e30 <__kernel_rem_pio2+0x318>
 8006bda:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8006bde:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006be2:	9204      	str	r2, [sp, #16]
 8006be4:	9303      	str	r3, [sp, #12]
 8006be6:	464d      	mov	r5, r9
 8006be8:	00eb      	lsls	r3, r5, #3
 8006bea:	9305      	str	r3, [sp, #20]
 8006bec:	ab92      	add	r3, sp, #584	; 0x248
 8006bee:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8006bf2:	f10d 0b18 	add.w	fp, sp, #24
 8006bf6:	ab6a      	add	r3, sp, #424	; 0x1a8
 8006bf8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8006bfc:	465e      	mov	r6, fp
 8006bfe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8006c02:	4628      	mov	r0, r5
 8006c04:	2800      	cmp	r0, #0
 8006c06:	f1a2 0208 	sub.w	r2, r2, #8
 8006c0a:	dc48      	bgt.n	8006c9e <__kernel_rem_pio2+0x186>
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 fa17 	bl	8007040 <scalbn>
 8006c12:	eeb0 8b40 	vmov.f64	d8, d0
 8006c16:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8006c1a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8006c1e:	f000 fa8f 	bl	8007140 <floor>
 8006c22:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8006c26:	eea0 8b47 	vfms.f64	d8, d0, d7
 8006c2a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8006c2e:	2c00      	cmp	r4, #0
 8006c30:	ee17 8a90 	vmov	r8, s15
 8006c34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c38:	ee38 8b47 	vsub.f64	d8, d8, d7
 8006c3c:	dd41      	ble.n	8006cc2 <__kernel_rem_pio2+0x1aa>
 8006c3e:	1e68      	subs	r0, r5, #1
 8006c40:	ab06      	add	r3, sp, #24
 8006c42:	f1c4 0c18 	rsb	ip, r4, #24
 8006c46:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8006c4a:	fa46 f20c 	asr.w	r2, r6, ip
 8006c4e:	4490      	add	r8, r2
 8006c50:	fa02 f20c 	lsl.w	r2, r2, ip
 8006c54:	1ab6      	subs	r6, r6, r2
 8006c56:	f1c4 0217 	rsb	r2, r4, #23
 8006c5a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8006c5e:	4116      	asrs	r6, r2
 8006c60:	2e00      	cmp	r6, #0
 8006c62:	dd3d      	ble.n	8006ce0 <__kernel_rem_pio2+0x1c8>
 8006c64:	f04f 0c00 	mov.w	ip, #0
 8006c68:	f108 0801 	add.w	r8, r8, #1
 8006c6c:	4660      	mov	r0, ip
 8006c6e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8006c72:	4565      	cmp	r5, ip
 8006c74:	dc6a      	bgt.n	8006d4c <__kernel_rem_pio2+0x234>
 8006c76:	2c00      	cmp	r4, #0
 8006c78:	dd04      	ble.n	8006c84 <__kernel_rem_pio2+0x16c>
 8006c7a:	2c01      	cmp	r4, #1
 8006c7c:	d07b      	beq.n	8006d76 <__kernel_rem_pio2+0x25e>
 8006c7e:	2c02      	cmp	r4, #2
 8006c80:	f000 8083 	beq.w	8006d8a <__kernel_rem_pio2+0x272>
 8006c84:	2e02      	cmp	r6, #2
 8006c86:	d12b      	bne.n	8006ce0 <__kernel_rem_pio2+0x1c8>
 8006c88:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006c8c:	ee30 8b48 	vsub.f64	d8, d0, d8
 8006c90:	b330      	cbz	r0, 8006ce0 <__kernel_rem_pio2+0x1c8>
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 f9d4 	bl	8007040 <scalbn>
 8006c98:	ee38 8b40 	vsub.f64	d8, d8, d0
 8006c9c:	e020      	b.n	8006ce0 <__kernel_rem_pio2+0x1c8>
 8006c9e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8006ca2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006ca6:	3801      	subs	r0, #1
 8006ca8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8006cac:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8006cb0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006cb4:	eca6 0a01 	vstmia	r6!, {s0}
 8006cb8:	ed92 0b00 	vldr	d0, [r2]
 8006cbc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8006cc0:	e7a0      	b.n	8006c04 <__kernel_rem_pio2+0xec>
 8006cc2:	d105      	bne.n	8006cd0 <__kernel_rem_pio2+0x1b8>
 8006cc4:	1e6a      	subs	r2, r5, #1
 8006cc6:	ab06      	add	r3, sp, #24
 8006cc8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8006ccc:	15f6      	asrs	r6, r6, #23
 8006cce:	e7c7      	b.n	8006c60 <__kernel_rem_pio2+0x148>
 8006cd0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006cd4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cdc:	da34      	bge.n	8006d48 <__kernel_rem_pio2+0x230>
 8006cde:	2600      	movs	r6, #0
 8006ce0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce8:	f040 80aa 	bne.w	8006e40 <__kernel_rem_pio2+0x328>
 8006cec:	f105 3bff 	add.w	fp, r5, #4294967295
 8006cf0:	4658      	mov	r0, fp
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	4548      	cmp	r0, r9
 8006cf6:	da50      	bge.n	8006d9a <__kernel_rem_pio2+0x282>
 8006cf8:	2a00      	cmp	r2, #0
 8006cfa:	d06b      	beq.n	8006dd4 <__kernel_rem_pio2+0x2bc>
 8006cfc:	ab06      	add	r3, sp, #24
 8006cfe:	3c18      	subs	r4, #24
 8006d00:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 8087 	beq.w	8006e18 <__kernel_rem_pio2+0x300>
 8006d0a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 f996 	bl	8007040 <scalbn>
 8006d14:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8006e28 <__kernel_rem_pio2+0x310>
 8006d18:	f10b 0201 	add.w	r2, fp, #1
 8006d1c:	a96a      	add	r1, sp, #424	; 0x1a8
 8006d1e:	00d3      	lsls	r3, r2, #3
 8006d20:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006d24:	465a      	mov	r2, fp
 8006d26:	2a00      	cmp	r2, #0
 8006d28:	f280 80b8 	bge.w	8006e9c <__kernel_rem_pio2+0x384>
 8006d2c:	465a      	mov	r2, fp
 8006d2e:	2a00      	cmp	r2, #0
 8006d30:	f2c0 80d6 	blt.w	8006ee0 <__kernel_rem_pio2+0x3c8>
 8006d34:	a96a      	add	r1, sp, #424	; 0x1a8
 8006d36:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8006d3a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8006e20 <__kernel_rem_pio2+0x308>
 8006d3e:	4d3f      	ldr	r5, [pc, #252]	; (8006e3c <__kernel_rem_pio2+0x324>)
 8006d40:	2000      	movs	r0, #0
 8006d42:	ebab 0102 	sub.w	r1, fp, r2
 8006d46:	e0c0      	b.n	8006eca <__kernel_rem_pio2+0x3b2>
 8006d48:	2602      	movs	r6, #2
 8006d4a:	e78b      	b.n	8006c64 <__kernel_rem_pio2+0x14c>
 8006d4c:	f8db 2000 	ldr.w	r2, [fp]
 8006d50:	b958      	cbnz	r0, 8006d6a <__kernel_rem_pio2+0x252>
 8006d52:	b122      	cbz	r2, 8006d5e <__kernel_rem_pio2+0x246>
 8006d54:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8006d58:	f8cb 2000 	str.w	r2, [fp]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f10c 0c01 	add.w	ip, ip, #1
 8006d62:	f10b 0b04 	add.w	fp, fp, #4
 8006d66:	4610      	mov	r0, r2
 8006d68:	e783      	b.n	8006c72 <__kernel_rem_pio2+0x15a>
 8006d6a:	ebae 0202 	sub.w	r2, lr, r2
 8006d6e:	f8cb 2000 	str.w	r2, [fp]
 8006d72:	4602      	mov	r2, r0
 8006d74:	e7f3      	b.n	8006d5e <__kernel_rem_pio2+0x246>
 8006d76:	f105 3cff 	add.w	ip, r5, #4294967295
 8006d7a:	ab06      	add	r3, sp, #24
 8006d7c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8006d80:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006d84:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8006d88:	e77c      	b.n	8006c84 <__kernel_rem_pio2+0x16c>
 8006d8a:	f105 3cff 	add.w	ip, r5, #4294967295
 8006d8e:	ab06      	add	r3, sp, #24
 8006d90:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8006d94:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8006d98:	e7f4      	b.n	8006d84 <__kernel_rem_pio2+0x26c>
 8006d9a:	ab06      	add	r3, sp, #24
 8006d9c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006da0:	3801      	subs	r0, #1
 8006da2:	431a      	orrs	r2, r3
 8006da4:	e7a6      	b.n	8006cf4 <__kernel_rem_pio2+0x1dc>
 8006da6:	3201      	adds	r2, #1
 8006da8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8006dac:	2e00      	cmp	r6, #0
 8006dae:	d0fa      	beq.n	8006da6 <__kernel_rem_pio2+0x28e>
 8006db0:	9b05      	ldr	r3, [sp, #20]
 8006db2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006db6:	eb0d 0003 	add.w	r0, sp, r3
 8006dba:	9b01      	ldr	r3, [sp, #4]
 8006dbc:	18ee      	adds	r6, r5, r3
 8006dbe:	ab1a      	add	r3, sp, #104	; 0x68
 8006dc0:	f105 0c01 	add.w	ip, r5, #1
 8006dc4:	3898      	subs	r0, #152	; 0x98
 8006dc6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006dca:	442a      	add	r2, r5
 8006dcc:	4562      	cmp	r2, ip
 8006dce:	da04      	bge.n	8006dda <__kernel_rem_pio2+0x2c2>
 8006dd0:	4615      	mov	r5, r2
 8006dd2:	e709      	b.n	8006be8 <__kernel_rem_pio2+0xd0>
 8006dd4:	9804      	ldr	r0, [sp, #16]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	e7e6      	b.n	8006da8 <__kernel_rem_pio2+0x290>
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	f8dd e008 	ldr.w	lr, [sp, #8]
 8006de0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8006de4:	9305      	str	r3, [sp, #20]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dee:	2500      	movs	r5, #0
 8006df0:	eca6 7b02 	vstmia	r6!, {d7}
 8006df4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8006e20 <__kernel_rem_pio2+0x308>
 8006df8:	46b0      	mov	r8, r6
 8006dfa:	4555      	cmp	r5, sl
 8006dfc:	dd04      	ble.n	8006e08 <__kernel_rem_pio2+0x2f0>
 8006dfe:	eca0 7b02 	vstmia	r0!, {d7}
 8006e02:	f10c 0c01 	add.w	ip, ip, #1
 8006e06:	e7e1      	b.n	8006dcc <__kernel_rem_pio2+0x2b4>
 8006e08:	ecbe 5b02 	vldmia	lr!, {d5}
 8006e0c:	ed38 6b02 	vldmdb	r8!, {d6}
 8006e10:	3501      	adds	r5, #1
 8006e12:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006e16:	e7f0      	b.n	8006dfa <__kernel_rem_pio2+0x2e2>
 8006e18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e1c:	e76e      	b.n	8006cfc <__kernel_rem_pio2+0x1e4>
 8006e1e:	bf00      	nop
	...
 8006e2c:	3e700000 	.word	0x3e700000
 8006e30:	00000000 	.word	0x00000000
 8006e34:	41700000 	.word	0x41700000
 8006e38:	08008d28 	.word	0x08008d28
 8006e3c:	08008ce8 	.word	0x08008ce8
 8006e40:	4260      	negs	r0, r4
 8006e42:	eeb0 0b48 	vmov.f64	d0, d8
 8006e46:	f000 f8fb 	bl	8007040 <scalbn>
 8006e4a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8007028 <__kernel_rem_pio2+0x510>
 8006e4e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8006e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e56:	db18      	blt.n	8006e8a <__kernel_rem_pio2+0x372>
 8006e58:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8007030 <__kernel_rem_pio2+0x518>
 8006e5c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006e60:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006e64:	aa06      	add	r2, sp, #24
 8006e66:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8006e6a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8006e6e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006e72:	f105 0b01 	add.w	fp, r5, #1
 8006e76:	ee10 3a10 	vmov	r3, s0
 8006e7a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006e7e:	ee17 3a10 	vmov	r3, s14
 8006e82:	3418      	adds	r4, #24
 8006e84:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8006e88:	e73f      	b.n	8006d0a <__kernel_rem_pio2+0x1f2>
 8006e8a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006e8e:	aa06      	add	r2, sp, #24
 8006e90:	ee10 3a10 	vmov	r3, s0
 8006e94:	46ab      	mov	fp, r5
 8006e96:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006e9a:	e736      	b.n	8006d0a <__kernel_rem_pio2+0x1f2>
 8006e9c:	a806      	add	r0, sp, #24
 8006e9e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8006ea2:	9001      	str	r0, [sp, #4]
 8006ea4:	ee07 0a90 	vmov	s15, r0
 8006ea8:	3a01      	subs	r2, #1
 8006eaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006eae:	ee27 7b00 	vmul.f64	d7, d7, d0
 8006eb2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006eb6:	ed21 7b02 	vstmdb	r1!, {d7}
 8006eba:	e734      	b.n	8006d26 <__kernel_rem_pio2+0x20e>
 8006ebc:	ecb5 5b02 	vldmia	r5!, {d5}
 8006ec0:	ecb4 6b02 	vldmia	r4!, {d6}
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006eca:	4548      	cmp	r0, r9
 8006ecc:	dc01      	bgt.n	8006ed2 <__kernel_rem_pio2+0x3ba>
 8006ece:	4288      	cmp	r0, r1
 8006ed0:	ddf4      	ble.n	8006ebc <__kernel_rem_pio2+0x3a4>
 8006ed2:	a842      	add	r0, sp, #264	; 0x108
 8006ed4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8006ed8:	ed81 7b00 	vstr	d7, [r1]
 8006edc:	3a01      	subs	r2, #1
 8006ede:	e726      	b.n	8006d2e <__kernel_rem_pio2+0x216>
 8006ee0:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8006ee2:	2a02      	cmp	r2, #2
 8006ee4:	dc0a      	bgt.n	8006efc <__kernel_rem_pio2+0x3e4>
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	dc2e      	bgt.n	8006f48 <__kernel_rem_pio2+0x430>
 8006eea:	d047      	beq.n	8006f7c <__kernel_rem_pio2+0x464>
 8006eec:	f008 0007 	and.w	r0, r8, #7
 8006ef0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8006ef4:	ecbd 8b06 	vpop	{d8-d10}
 8006ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8006efe:	2a03      	cmp	r2, #3
 8006f00:	d1f4      	bne.n	8006eec <__kernel_rem_pio2+0x3d4>
 8006f02:	a942      	add	r1, sp, #264	; 0x108
 8006f04:	f1a3 0208 	sub.w	r2, r3, #8
 8006f08:	440a      	add	r2, r1
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4658      	mov	r0, fp
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	f1a1 0108 	sub.w	r1, r1, #8
 8006f14:	dc55      	bgt.n	8006fc2 <__kernel_rem_pio2+0x4aa>
 8006f16:	4659      	mov	r1, fp
 8006f18:	2901      	cmp	r1, #1
 8006f1a:	f1a2 0208 	sub.w	r2, r2, #8
 8006f1e:	dc60      	bgt.n	8006fe2 <__kernel_rem_pio2+0x4ca>
 8006f20:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8007038 <__kernel_rem_pio2+0x520>
 8006f24:	aa42      	add	r2, sp, #264	; 0x108
 8006f26:	4413      	add	r3, r2
 8006f28:	f1bb 0f01 	cmp.w	fp, #1
 8006f2c:	dc69      	bgt.n	8007002 <__kernel_rem_pio2+0x4ea>
 8006f2e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8006f32:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8006f36:	2e00      	cmp	r6, #0
 8006f38:	d16a      	bne.n	8007010 <__kernel_rem_pio2+0x4f8>
 8006f3a:	ed87 5b00 	vstr	d5, [r7]
 8006f3e:	ed87 6b02 	vstr	d6, [r7, #8]
 8006f42:	ed87 7b04 	vstr	d7, [r7, #16]
 8006f46:	e7d1      	b.n	8006eec <__kernel_rem_pio2+0x3d4>
 8006f48:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8007038 <__kernel_rem_pio2+0x520>
 8006f4c:	aa42      	add	r2, sp, #264	; 0x108
 8006f4e:	4413      	add	r3, r2
 8006f50:	465a      	mov	r2, fp
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	da26      	bge.n	8006fa4 <__kernel_rem_pio2+0x48c>
 8006f56:	b35e      	cbz	r6, 8006fb0 <__kernel_rem_pio2+0x498>
 8006f58:	eeb1 7b46 	vneg.f64	d7, d6
 8006f5c:	ed87 7b00 	vstr	d7, [r7]
 8006f60:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8006f64:	aa44      	add	r2, sp, #272	; 0x110
 8006f66:	2301      	movs	r3, #1
 8006f68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f6c:	459b      	cmp	fp, r3
 8006f6e:	da22      	bge.n	8006fb6 <__kernel_rem_pio2+0x49e>
 8006f70:	b10e      	cbz	r6, 8006f76 <__kernel_rem_pio2+0x45e>
 8006f72:	eeb1 7b47 	vneg.f64	d7, d7
 8006f76:	ed87 7b02 	vstr	d7, [r7, #8]
 8006f7a:	e7b7      	b.n	8006eec <__kernel_rem_pio2+0x3d4>
 8006f7c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007038 <__kernel_rem_pio2+0x520>
 8006f80:	aa42      	add	r2, sp, #264	; 0x108
 8006f82:	4413      	add	r3, r2
 8006f84:	f1bb 0f00 	cmp.w	fp, #0
 8006f88:	da05      	bge.n	8006f96 <__kernel_rem_pio2+0x47e>
 8006f8a:	b10e      	cbz	r6, 8006f90 <__kernel_rem_pio2+0x478>
 8006f8c:	eeb1 7b47 	vneg.f64	d7, d7
 8006f90:	ed87 7b00 	vstr	d7, [r7]
 8006f94:	e7aa      	b.n	8006eec <__kernel_rem_pio2+0x3d4>
 8006f96:	ed33 6b02 	vldmdb	r3!, {d6}
 8006f9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fa2:	e7ef      	b.n	8006f84 <__kernel_rem_pio2+0x46c>
 8006fa4:	ed33 7b02 	vldmdb	r3!, {d7}
 8006fa8:	3a01      	subs	r2, #1
 8006faa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006fae:	e7d0      	b.n	8006f52 <__kernel_rem_pio2+0x43a>
 8006fb0:	eeb0 7b46 	vmov.f64	d7, d6
 8006fb4:	e7d2      	b.n	8006f5c <__kernel_rem_pio2+0x444>
 8006fb6:	ecb2 6b02 	vldmia	r2!, {d6}
 8006fba:	3301      	adds	r3, #1
 8006fbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fc0:	e7d4      	b.n	8006f6c <__kernel_rem_pio2+0x454>
 8006fc2:	ed91 7b00 	vldr	d7, [r1]
 8006fc6:	ed91 5b02 	vldr	d5, [r1, #8]
 8006fca:	3801      	subs	r0, #1
 8006fcc:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006fd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006fd4:	ed81 6b00 	vstr	d6, [r1]
 8006fd8:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006fdc:	ed81 7b02 	vstr	d7, [r1, #8]
 8006fe0:	e795      	b.n	8006f0e <__kernel_rem_pio2+0x3f6>
 8006fe2:	ed92 7b00 	vldr	d7, [r2]
 8006fe6:	ed92 5b02 	vldr	d5, [r2, #8]
 8006fea:	3901      	subs	r1, #1
 8006fec:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006ff0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006ff4:	ed82 6b00 	vstr	d6, [r2]
 8006ff8:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006ffc:	ed82 7b02 	vstr	d7, [r2, #8]
 8007000:	e78a      	b.n	8006f18 <__kernel_rem_pio2+0x400>
 8007002:	ed33 6b02 	vldmdb	r3!, {d6}
 8007006:	f10b 3bff 	add.w	fp, fp, #4294967295
 800700a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800700e:	e78b      	b.n	8006f28 <__kernel_rem_pio2+0x410>
 8007010:	eeb1 5b45 	vneg.f64	d5, d5
 8007014:	eeb1 6b46 	vneg.f64	d6, d6
 8007018:	ed87 5b00 	vstr	d5, [r7]
 800701c:	eeb1 7b47 	vneg.f64	d7, d7
 8007020:	ed87 6b02 	vstr	d6, [r7, #8]
 8007024:	e78d      	b.n	8006f42 <__kernel_rem_pio2+0x42a>
 8007026:	bf00      	nop
 8007028:	00000000 	.word	0x00000000
 800702c:	41700000 	.word	0x41700000
 8007030:	00000000 	.word	0x00000000
 8007034:	3e700000 	.word	0x3e700000
	...

08007040 <scalbn>:
 8007040:	ee10 1a90 	vmov	r1, s1
 8007044:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007048:	b98b      	cbnz	r3, 800706e <scalbn+0x2e>
 800704a:	ee10 3a10 	vmov	r3, s0
 800704e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007052:	4319      	orrs	r1, r3
 8007054:	d00a      	beq.n	800706c <scalbn+0x2c>
 8007056:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8007108 <scalbn+0xc8>
 800705a:	4b37      	ldr	r3, [pc, #220]	; (8007138 <scalbn+0xf8>)
 800705c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007060:	4298      	cmp	r0, r3
 8007062:	da0b      	bge.n	800707c <scalbn+0x3c>
 8007064:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8007110 <scalbn+0xd0>
 8007068:	ee20 0b07 	vmul.f64	d0, d0, d7
 800706c:	4770      	bx	lr
 800706e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007072:	4293      	cmp	r3, r2
 8007074:	d107      	bne.n	8007086 <scalbn+0x46>
 8007076:	ee30 0b00 	vadd.f64	d0, d0, d0
 800707a:	4770      	bx	lr
 800707c:	ee10 1a90 	vmov	r1, s1
 8007080:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007084:	3b36      	subs	r3, #54	; 0x36
 8007086:	f24c 3250 	movw	r2, #50000	; 0xc350
 800708a:	4290      	cmp	r0, r2
 800708c:	dd0d      	ble.n	80070aa <scalbn+0x6a>
 800708e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007118 <scalbn+0xd8>
 8007092:	ee10 3a90 	vmov	r3, s1
 8007096:	eeb0 6b47 	vmov.f64	d6, d7
 800709a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8007120 <scalbn+0xe0>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	fe27 7b05 	vselge.f64	d7, d7, d5
 80070a4:	ee27 0b06 	vmul.f64	d0, d7, d6
 80070a8:	4770      	bx	lr
 80070aa:	4418      	add	r0, r3
 80070ac:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80070b0:	4298      	cmp	r0, r3
 80070b2:	dcec      	bgt.n	800708e <scalbn+0x4e>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	dd0a      	ble.n	80070ce <scalbn+0x8e>
 80070b8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80070bc:	ec53 2b10 	vmov	r2, r3, d0
 80070c0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80070c4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80070c8:	ec43 2b10 	vmov	d0, r2, r3
 80070cc:	4770      	bx	lr
 80070ce:	f110 0f35 	cmn.w	r0, #53	; 0x35
 80070d2:	da09      	bge.n	80070e8 <scalbn+0xa8>
 80070d4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8007110 <scalbn+0xd0>
 80070d8:	ee10 3a90 	vmov	r3, s1
 80070dc:	eeb0 6b47 	vmov.f64	d6, d7
 80070e0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8007128 <scalbn+0xe8>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	e7db      	b.n	80070a0 <scalbn+0x60>
 80070e8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80070ec:	ec53 2b10 	vmov	r2, r3, d0
 80070f0:	3036      	adds	r0, #54	; 0x36
 80070f2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80070f6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80070fa:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8007130 <scalbn+0xf0>
 80070fe:	ec43 2b10 	vmov	d0, r2, r3
 8007102:	e7b1      	b.n	8007068 <scalbn+0x28>
 8007104:	f3af 8000 	nop.w
 8007108:	00000000 	.word	0x00000000
 800710c:	43500000 	.word	0x43500000
 8007110:	c2f8f359 	.word	0xc2f8f359
 8007114:	01a56e1f 	.word	0x01a56e1f
 8007118:	8800759c 	.word	0x8800759c
 800711c:	7e37e43c 	.word	0x7e37e43c
 8007120:	8800759c 	.word	0x8800759c
 8007124:	fe37e43c 	.word	0xfe37e43c
 8007128:	c2f8f359 	.word	0xc2f8f359
 800712c:	81a56e1f 	.word	0x81a56e1f
 8007130:	00000000 	.word	0x00000000
 8007134:	3c900000 	.word	0x3c900000
 8007138:	ffff3cb0 	.word	0xffff3cb0
 800713c:	00000000 	.word	0x00000000

08007140 <floor>:
 8007140:	ee10 1a90 	vmov	r1, s1
 8007144:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007148:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800714c:	2b13      	cmp	r3, #19
 800714e:	b530      	push	{r4, r5, lr}
 8007150:	ee10 0a10 	vmov	r0, s0
 8007154:	ee10 5a10 	vmov	r5, s0
 8007158:	dc31      	bgt.n	80071be <floor+0x7e>
 800715a:	2b00      	cmp	r3, #0
 800715c:	da15      	bge.n	800718a <floor+0x4a>
 800715e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8007220 <floor+0xe0>
 8007162:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007166:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800716a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800716e:	dd07      	ble.n	8007180 <floor+0x40>
 8007170:	2900      	cmp	r1, #0
 8007172:	da4e      	bge.n	8007212 <floor+0xd2>
 8007174:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007178:	4308      	orrs	r0, r1
 800717a:	d04d      	beq.n	8007218 <floor+0xd8>
 800717c:	492a      	ldr	r1, [pc, #168]	; (8007228 <floor+0xe8>)
 800717e:	2000      	movs	r0, #0
 8007180:	460b      	mov	r3, r1
 8007182:	4602      	mov	r2, r0
 8007184:	ec43 2b10 	vmov	d0, r2, r3
 8007188:	e020      	b.n	80071cc <floor+0x8c>
 800718a:	4a28      	ldr	r2, [pc, #160]	; (800722c <floor+0xec>)
 800718c:	411a      	asrs	r2, r3
 800718e:	ea01 0402 	and.w	r4, r1, r2
 8007192:	4304      	orrs	r4, r0
 8007194:	d01a      	beq.n	80071cc <floor+0x8c>
 8007196:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007220 <floor+0xe0>
 800719a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800719e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80071a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a6:	ddeb      	ble.n	8007180 <floor+0x40>
 80071a8:	2900      	cmp	r1, #0
 80071aa:	bfbe      	ittt	lt
 80071ac:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80071b0:	fa40 f303 	asrlt.w	r3, r0, r3
 80071b4:	18c9      	addlt	r1, r1, r3
 80071b6:	ea21 0102 	bic.w	r1, r1, r2
 80071ba:	2000      	movs	r0, #0
 80071bc:	e7e0      	b.n	8007180 <floor+0x40>
 80071be:	2b33      	cmp	r3, #51	; 0x33
 80071c0:	dd05      	ble.n	80071ce <floor+0x8e>
 80071c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c6:	d101      	bne.n	80071cc <floor+0x8c>
 80071c8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80071cc:	bd30      	pop	{r4, r5, pc}
 80071ce:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80071d2:	f04f 32ff 	mov.w	r2, #4294967295
 80071d6:	40e2      	lsrs	r2, r4
 80071d8:	4210      	tst	r0, r2
 80071da:	d0f7      	beq.n	80071cc <floor+0x8c>
 80071dc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007220 <floor+0xe0>
 80071e0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80071e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80071e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ec:	ddc8      	ble.n	8007180 <floor+0x40>
 80071ee:	2900      	cmp	r1, #0
 80071f0:	da02      	bge.n	80071f8 <floor+0xb8>
 80071f2:	2b14      	cmp	r3, #20
 80071f4:	d103      	bne.n	80071fe <floor+0xbe>
 80071f6:	3101      	adds	r1, #1
 80071f8:	ea20 0002 	bic.w	r0, r0, r2
 80071fc:	e7c0      	b.n	8007180 <floor+0x40>
 80071fe:	2401      	movs	r4, #1
 8007200:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007204:	fa04 f303 	lsl.w	r3, r4, r3
 8007208:	4418      	add	r0, r3
 800720a:	4285      	cmp	r5, r0
 800720c:	bf88      	it	hi
 800720e:	1909      	addhi	r1, r1, r4
 8007210:	e7f2      	b.n	80071f8 <floor+0xb8>
 8007212:	2000      	movs	r0, #0
 8007214:	4601      	mov	r1, r0
 8007216:	e7b3      	b.n	8007180 <floor+0x40>
 8007218:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800721c:	e7b0      	b.n	8007180 <floor+0x40>
 800721e:	bf00      	nop
 8007220:	8800759c 	.word	0x8800759c
 8007224:	7e37e43c 	.word	0x7e37e43c
 8007228:	bff00000 	.word	0xbff00000
 800722c:	000fffff 	.word	0x000fffff

08007230 <_init>:
 8007230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007232:	bf00      	nop
 8007234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007236:	bc08      	pop	{r3}
 8007238:	469e      	mov	lr, r3
 800723a:	4770      	bx	lr

0800723c <_fini>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	bf00      	nop
 8007240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007242:	bc08      	pop	{r3}
 8007244:	469e      	mov	lr, r3
 8007246:	4770      	bx	lr
