
hand_and_beyond.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08007fc0  08007fc0  00017fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008200  08008200  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008200  08008200  00018200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008208  08008208  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008208  08008208  00018208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800820c  0800820c  0001820c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008210  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043c8  20000078  08008288  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004440  08008288  00024440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1e4  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002779  00000000  00000000  0002e2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  00030a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f9  00000000  00000000  00031608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018909  00000000  00000000  00031f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff99  00000000  00000000  0004a80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099787  00000000  00000000  0005a7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036c8  00000000  00000000  000f3f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f75f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007fa8 	.word	0x08007fa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007fa8 	.word	0x08007fa8

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <vApplicationGetIdleTaskMemory+0x30>)
 8000eba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000094 	.word	0x20000094
 8000ed4:	200000e8 	.word	0x200000e8

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f001 f9c2 	bl	8002264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f838 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee4:	f000 f920 	bl	8001128 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000ee8:	f000 f8f4 	bl	80010d4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000eec:	f000 f89e 	bl	800102c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  EmgConfigInit();
 8000ef0:	f000 fab6 	bl	8001460 <EmgConfigInit>

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  /* USER CODE END RTOS_SEMAPHORES */
  SemaphoreInit();
 8000ef4:	f000 f808 	bl	8000f08 <SemaphoreInit>

  /* USER CODE BEGIN RTOS_THREADS */


  /* definition and creation of motorTask */
  MotorTaskInit();
 8000ef8:	f001 f830 	bl	8001f5c <MotorTaskInit>
//  Task_Init();

  /* definition and creation of emgTask */
  EmgTaskInit();
 8000efc:	f000 fef6 	bl	8001cec <EmgTaskInit>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */

  vTaskStartScheduler();
 8000f00:	f003 fec4 	bl	8004c8c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <main+0x2c>
	...

08000f08 <SemaphoreInit>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
uint32_t SemaphoreInit(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	/* Create the semaphores(s) */

	/* definition and creation of handFlex */
	handFlexHandle = xSemaphoreCreateBinary();
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2001      	movs	r0, #1
 8000f12:	f003 f9c1 	bl	8004298 <xQueueGenericCreate>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <SemaphoreInit+0x44>)
 8000f1a:	6013      	str	r3, [r2, #0]
	if(handFlexHandle == NULL){
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <SemaphoreInit+0x44>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <SemaphoreInit+0x20>
		return ERR_SEMAPHORE_CREATE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	e00e      	b.n	8000f46 <SemaphoreInit+0x3e>
	}

	/* definition and creation of releaseHand */
	handReleaseHandle = xSemaphoreCreateBinary();
 8000f28:	2203      	movs	r2, #3
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f003 f9b3 	bl	8004298 <xQueueGenericCreate>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <SemaphoreInit+0x48>)
 8000f36:	6013      	str	r3, [r2, #0]
	if(handReleaseHandle == NULL){
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <SemaphoreInit+0x48>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <SemaphoreInit+0x3c>
		return ERR_SEMAPHORE_CREATE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	e000      	b.n	8000f46 <SemaphoreInit+0x3e>
	}
	return ERR_NO_ERROR;
 8000f44:	2301      	movs	r3, #1
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000374 	.word	0x20000374
 8000f50:	20000378 	.word	0x20000378

08000f54 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	; 0x50
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	2230      	movs	r2, #48	; 0x30
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f006 ffe0 	bl	8007f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	4b29      	ldr	r3, [pc, #164]	; (8001024 <SystemClock_Config+0xd0>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a28      	ldr	r2, [pc, #160]	; (8001024 <SystemClock_Config+0xd0>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b26      	ldr	r3, [pc, #152]	; (8001024 <SystemClock_Config+0xd0>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	4b23      	ldr	r3, [pc, #140]	; (8001028 <SystemClock_Config+0xd4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <SystemClock_Config+0xd4>)
 8000fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <SystemClock_Config+0xd4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fcc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 ffe4 	bl	8002fac <HAL_RCC_OscConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fea:	f000 f91b 	bl	8001224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	230f      	movs	r3, #15
 8000ff0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2102      	movs	r1, #2
 800100a:	4618      	mov	r0, r3
 800100c:	f002 fa46 	bl	800349c <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001016:	f000 f905 	bl	8001224 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3750      	adds	r7, #80	; 0x50
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001040:	4a22      	ldr	r2, [pc, #136]	; (80010cc <MX_ADC1_Init+0xa0>)
 8001042:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <MX_ADC1_Init+0x9c>)
 800104e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001052:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_ADC1_Init+0x9c>)
 800105c:	2200      	movs	r2, #0
 800105e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_ADC1_Init+0x9c>)
 800106a:	2200      	movs	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <MX_ADC1_Init+0xa4>)
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_ADC1_Init+0x9c>)
 800107c:	2201      	movs	r2, #1
 800107e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_ADC1_Init+0x9c>)
 800108a:	2201      	movs	r2, #1
 800108c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001090:	f001 f95a 	bl	8002348 <HAL_ADC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800109a:	f000 f8c3 	bl	8001224 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_ADC1_Init+0x9c>)
 80010b0:	f001 fada 	bl	8002668 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010ba:	f000 f8b3 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200002e8 	.word	0x200002e8
 80010cc:	40012000 	.word	0x40012000
 80010d0:	0f000001 	.word	0x0f000001

080010d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_USART6_UART_Init+0x4c>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <MX_USART6_UART_Init+0x50>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <MX_USART6_UART_Init+0x4c>)
 80010e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_USART6_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_USART6_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_USART6_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_USART6_UART_Init+0x4c>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_USART6_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_USART6_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_USART6_UART_Init+0x4c>)
 800110c:	f002 fbe6 	bl	80038dc <HAL_UART_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001116:	f000 f885 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000330 	.word	0x20000330
 8001124:	40011400 	.word	0x40011400

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b35      	ldr	r3, [pc, #212]	; (8001218 <MX_GPIO_Init+0xf0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a34      	ldr	r2, [pc, #208]	; (8001218 <MX_GPIO_Init+0xf0>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <MX_GPIO_Init+0xf0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <MX_GPIO_Init+0xf0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <MX_GPIO_Init+0xf0>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <MX_GPIO_Init+0xf0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <MX_GPIO_Init+0xf0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a26      	ldr	r2, [pc, #152]	; (8001218 <MX_GPIO_Init+0xf0>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <MX_GPIO_Init+0xf0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <MX_GPIO_Init+0xf0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <MX_GPIO_Init+0xf0>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_GPIO_Init+0xf0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2120      	movs	r1, #32
 80011b2:	481a      	ldr	r0, [pc, #104]	; (800121c <MX_GPIO_Init+0xf4>)
 80011b4:	f001 fee0 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4814      	ldr	r0, [pc, #80]	; (8001220 <MX_GPIO_Init+0xf8>)
 80011d0:	f001 fd4e 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011d4:	230c      	movs	r3, #12
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e4:	2307      	movs	r3, #7
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	480b      	ldr	r0, [pc, #44]	; (800121c <MX_GPIO_Init+0xf4>)
 80011f0:	f001 fd3e 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011f4:	2320      	movs	r3, #32
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_GPIO_Init+0xf4>)
 800120c:	f001 fd30 	bl	8002c70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001210:	bf00      	nop
 8001212:	3728      	adds	r7, #40	; 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40020000 	.word	0x40020000
 8001220:	40020800 	.word	0x40020800

08001224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
}
 800122a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800122c:	e7fe      	b.n	800122c <Error_Handler+0x8>
	...

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_MspInit+0x54>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a11      	ldr	r2, [pc, #68]	; (8001284 <HAL_MspInit+0x54>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_MspInit+0x54>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_MspInit+0x54>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_MspInit+0x54>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_MspInit+0x54>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	210f      	movs	r1, #15
 8001272:	f06f 0001 	mvn.w	r0, #1
 8001276:	f001 fcd2 	bl	8002c1e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_ADC_MspInit+0x7c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d127      	bne.n	80012fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a15      	ldr	r2, [pc, #84]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_ADC_MspInit+0x80>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e2:	2301      	movs	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e6:	2303      	movs	r3, #3
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <HAL_ADC_MspInit+0x84>)
 80012f6:	f001 fcbb 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	; 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40012000 	.word	0x40012000
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000

08001310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_UART_MspInit+0x84>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12b      	bne.n	800138a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_UART_MspInit+0x88>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_UART_MspInit+0x88>)
 800133c:	f043 0320 	orr.w	r3, r3, #32
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_UART_MspInit+0x88>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f003 0320 	and.w	r3, r3, #32
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_UART_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_UART_MspInit+0x88>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_UART_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800136a:	23c0      	movs	r3, #192	; 0xc0
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800137a:	2308      	movs	r3, #8
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_UART_MspInit+0x8c>)
 8001386:	f001 fc73 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40011400 	.word	0x40011400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020800 	.word	0x40020800

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 ff9a 	bl	8002308 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013d4:	f004 f858 	bl	8005488 <xTaskGetSchedulerState>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013de:	f004 fc33 	bl	8005c48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <SystemInit+0x20>)
 80013ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <SystemInit+0x20>)
 80013f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800140c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001412:	490e      	ldr	r1, [pc, #56]	; (800144c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001414:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001418:	e002      	b.n	8001420 <LoopCopyDataInit>

0800141a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800141c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141e:	3304      	adds	r3, #4

08001420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001424:	d3f9      	bcc.n	800141a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001428:	4c0b      	ldr	r4, [pc, #44]	; (8001458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800142c:	e001      	b.n	8001432 <LoopFillZerobss>

0800142e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001430:	3204      	adds	r2, #4

08001432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001434:	d3fb      	bcc.n	800142e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001436:	f7ff ffd7 	bl	80013e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143a:	f006 fd83 	bl	8007f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143e:	f7ff fd4b 	bl	8000ed8 <main>
  bx  lr    
 8001442:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001444:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001450:	08008210 	.word	0x08008210
  ldr r2, =_sbss
 8001454:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001458:	20004440 	.word	0x20004440

0800145c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC_IRQHandler>
	...

08001460 <EmgConfigInit>:
TaskHandle_t emgTaskHandle;

S_ADCConfig ADC_Config;
S_FilterConfig Filter_Config;

void EmgConfigInit(void){
 8001460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001464:	af00      	add	r7, sp, #0

	//ADC configuration
	ADC_Config.default_bits = 10; // Don't change!
 8001466:	4bd0      	ldr	r3, [pc, #832]	; (80017a8 <EmgConfigInit+0x348>)
 8001468:	220a      	movs	r2, #10
 800146a:	705a      	strb	r2, [r3, #1]
	ADC_Config.adc_bits = 10; // The resolution of your MCU's ADC
 800146c:	4bce      	ldr	r3, [pc, #824]	; (80017a8 <EmgConfigInit+0x348>)
 800146e:	220a      	movs	r2, #10
 8001470:	701a      	strb	r2, [r3, #0]
	ADC_Config.vref = 3.3f; // Reference voltage of MCU's ADC (V)
 8001472:	4bcd      	ldr	r3, [pc, #820]	; (80017a8 <EmgConfigInit+0x348>)
 8001474:	4acd      	ldr	r2, [pc, #820]	; (80017ac <EmgConfigInit+0x34c>)
 8001476:	605a      	str	r2, [r3, #4]
	ADC_Config.default_vref = 5 ;// Default reference voltage of the Arduino Uno (V) Don't Change
 8001478:	4bcb      	ldr	r3, [pc, #812]	; (80017a8 <EmgConfigInit+0x348>)
 800147a:	4acd      	ldr	r2, [pc, #820]	; (80017b0 <EmgConfigInit+0x350>)
 800147c:	609a      	str	r2, [r3, #8]
	ADC_Config.adc_scale = pow(2,ADC_Config.default_bits-ADC_Config.adc_bits)*ADC_Config.vref/ADC_Config.default_vref; // Scales the input signal
 800147e:	4bca      	ldr	r3, [pc, #808]	; (80017a8 <EmgConfigInit+0x348>)
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	461a      	mov	r2, r3
 8001484:	4bc8      	ldr	r3, [pc, #800]	; (80017a8 <EmgConfigInit+0x348>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fffa 	bl	8000484 <__aeabi_i2d>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	ec43 2b11 	vmov	d1, r2, r3
 8001498:	ed9f 0bbf 	vldr	d0, [pc, #764]	; 8001798 <EmgConfigInit+0x338>
 800149c:	f004 fe0e 	bl	80060bc <pow>
 80014a0:	ec55 4b10 	vmov	r4, r5, d0
 80014a4:	4bc0      	ldr	r3, [pc, #768]	; (80017a8 <EmgConfigInit+0x348>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe fffd 	bl	80004a8 <__aeabi_f2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4620      	mov	r0, r4
 80014b4:	4629      	mov	r1, r5
 80014b6:	f7ff f84f 	bl	8000558 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4614      	mov	r4, r2
 80014c0:	461d      	mov	r5, r3
 80014c2:	4bb9      	ldr	r3, [pc, #740]	; (80017a8 <EmgConfigInit+0x348>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe ffee 	bl	80004a8 <__aeabi_f2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7ff f96a 	bl	80007ac <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb12 	bl	8000b08 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4ab0      	ldr	r2, [pc, #704]	; (80017a8 <EmgConfigInit+0x348>)
 80014e8:	60d3      	str	r3, [r2, #12]
	ADC_Config.emg_offset = 1.45; // DC offset of the Mam Sense Board EMG output. (V)
 80014ea:	4baf      	ldr	r3, [pc, #700]	; (80017a8 <EmgConfigInit+0x348>)
 80014ec:	4ab1      	ldr	r2, [pc, #708]	; (80017b4 <EmgConfigInit+0x354>)
 80014ee:	611a      	str	r2, [r3, #16]
	ADC_Config.sig_offset = round(pow(2,ADC_Config.default_bits)*ADC_Config.emg_offset/ADC_Config.default_vref);
 80014f0:	4bad      	ldr	r3, [pc, #692]	; (80017a8 <EmgConfigInit+0x348>)
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ffb5 	bl	8000464 <__aeabi_ui2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	ec43 2b11 	vmov	d1, r2, r3
 8001502:	ed9f 0ba5 	vldr	d0, [pc, #660]	; 8001798 <EmgConfigInit+0x338>
 8001506:	f004 fdd9 	bl	80060bc <pow>
 800150a:	ec55 4b10 	vmov	r4, r5, d0
 800150e:	4ba6      	ldr	r3, [pc, #664]	; (80017a8 <EmgConfigInit+0x348>)
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ffc8 	bl	80004a8 <__aeabi_f2d>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4620      	mov	r0, r4
 800151e:	4629      	mov	r1, r5
 8001520:	f7ff f81a 	bl	8000558 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4614      	mov	r4, r2
 800152a:	461d      	mov	r5, r3
 800152c:	4b9e      	ldr	r3, [pc, #632]	; (80017a8 <EmgConfigInit+0x348>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ffb9 	bl	80004a8 <__aeabi_f2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7ff f935 	bl	80007ac <__aeabi_ddiv>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	ec43 2b17 	vmov	d7, r2, r3
 800154a:	eeb0 0a47 	vmov.f32	s0, s14
 800154e:	eef0 0a67 	vmov.f32	s1, s15
 8001552:	f004 fe85 	bl	8006260 <round>
 8001556:	ec53 2b10 	vmov	r2, r3, d0
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fad3 	bl	8000b08 <__aeabi_d2f>
 8001562:	4603      	mov	r3, r0
 8001564:	4a90      	ldr	r2, [pc, #576]	; (80017a8 <EmgConfigInit+0x348>)
 8001566:	6153      	str	r3, [r2, #20]

	Filter_Config.f0 = 50;      // Cut-off frequency of the notch filter(Hz).
 8001568:	4b93      	ldr	r3, [pc, #588]	; (80017b8 <EmgConfigInit+0x358>)
 800156a:	2232      	movs	r2, #50	; 0x32
 800156c:	801a      	strh	r2, [r3, #0]
	Filter_Config.f1 = 150;     // Second cut-off frequency(Hz). (Must be integer multiple of f0)
 800156e:	4b92      	ldr	r3, [pc, #584]	; (80017b8 <EmgConfigInit+0x358>)
 8001570:	2296      	movs	r2, #150	; 0x96
 8001572:	805a      	strh	r2, [r3, #2]
	Filter_Config.w0 = 2*3.1416*Filter_Config.f0/SAMPLE_FREQUENCY_HZ;  // Digital cut-off frequency (rad/sample)
 8001574:	4b90      	ldr	r3, [pc, #576]	; (80017b8 <EmgConfigInit+0x358>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff83 	bl	8000484 <__aeabi_i2d>
 800157e:	a388      	add	r3, pc, #544	; (adr r3, 80017a0 <EmgConfigInit+0x340>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe ffe8 	bl	8000558 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b89      	ldr	r3, [pc, #548]	; (80017bc <EmgConfigInit+0x35c>)
 8001596:	f7ff f909 	bl	80007ac <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fab1 	bl	8000b08 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a83      	ldr	r2, [pc, #524]	; (80017b8 <EmgConfigInit+0x358>)
 80015aa:	6053      	str	r3, [r2, #4]
	Filter_Config.w1 = 2*3.1416*Filter_Config.f1/SAMPLE_FREQUENCY_HZ;  //
 80015ac:	4b82      	ldr	r3, [pc, #520]	; (80017b8 <EmgConfigInit+0x358>)
 80015ae:	885b      	ldrh	r3, [r3, #2]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff67 	bl	8000484 <__aeabi_i2d>
 80015b6:	a37a      	add	r3, pc, #488	; (adr r3, 80017a0 <EmgConfigInit+0x340>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7fe ffcc 	bl	8000558 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	4b7b      	ldr	r3, [pc, #492]	; (80017bc <EmgConfigInit+0x35c>)
 80015ce:	f7ff f8ed 	bl	80007ac <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fa95 	bl	8000b08 <__aeabi_d2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a75      	ldr	r2, [pc, #468]	; (80017b8 <EmgConfigInit+0x358>)
 80015e2:	6093      	str	r3, [r2, #8]
	Filter_Config.p = 0.95;     //Quailty factor. Must be between 0.8 and 0.995. Default value: 0.95
 80015e4:	4b74      	ldr	r3, [pc, #464]	; (80017b8 <EmgConfigInit+0x358>)
 80015e6:	4a76      	ldr	r2, [pc, #472]	; (80017c0 <EmgConfigInit+0x360>)
 80015e8:	60da      	str	r2, [r3, #12]

	Filter_Config.mag = (1 -2*cos(Filter_Config.w0) +1)/(1 -2*Filter_Config.p*cos(Filter_Config.w0) + Filter_Config.p*Filter_Config.p); // Find magnitude of the filter at w=0 to set the DC gain to 1;
 80015ea:	4b73      	ldr	r3, [pc, #460]	; (80017b8 <EmgConfigInit+0x358>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff5a 	bl	80004a8 <__aeabi_f2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	ec43 2b10 	vmov	d0, r2, r3
 80015fc:	f004 fdd0 	bl	80061a0 <cos>
 8001600:	ec51 0b10 	vmov	r0, r1, d0
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	f7fe fdf0 	bl	80001ec <__adddf3>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	f04f 0000 	mov.w	r0, #0
 8001614:	496b      	ldr	r1, [pc, #428]	; (80017c4 <EmgConfigInit+0x364>)
 8001616:	f7fe fde7 	bl	80001e8 <__aeabi_dsub>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <EmgConfigInit+0x364>)
 8001628:	f7fe fde0 	bl	80001ec <__adddf3>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4690      	mov	r8, r2
 8001632:	4699      	mov	r9, r3
 8001634:	4b60      	ldr	r3, [pc, #384]	; (80017b8 <EmgConfigInit+0x358>)
 8001636:	edd3 7a03 	vldr	s15, [r3, #12]
 800163a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800163e:	ee17 0a90 	vmov	r0, s15
 8001642:	f7fe ff31 	bl	80004a8 <__aeabi_f2d>
 8001646:	4604      	mov	r4, r0
 8001648:	460d      	mov	r5, r1
 800164a:	4b5b      	ldr	r3, [pc, #364]	; (80017b8 <EmgConfigInit+0x358>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff2a 	bl	80004a8 <__aeabi_f2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	ec43 2b10 	vmov	d0, r2, r3
 800165c:	f004 fda0 	bl	80061a0 <cos>
 8001660:	ec53 2b10 	vmov	r2, r3, d0
 8001664:	4620      	mov	r0, r4
 8001666:	4629      	mov	r1, r5
 8001668:	f7fe ff76 	bl	8000558 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	f04f 0000 	mov.w	r0, #0
 8001674:	4953      	ldr	r1, [pc, #332]	; (80017c4 <EmgConfigInit+0x364>)
 8001676:	f7fe fdb7 	bl	80001e8 <__aeabi_dsub>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4614      	mov	r4, r2
 8001680:	461d      	mov	r5, r3
 8001682:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <EmgConfigInit+0x358>)
 8001684:	ed93 7a03 	vldr	s14, [r3, #12]
 8001688:	4b4b      	ldr	r3, [pc, #300]	; (80017b8 <EmgConfigInit+0x358>)
 800168a:	edd3 7a03 	vldr	s15, [r3, #12]
 800168e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001692:	ee17 0a90 	vmov	r0, s15
 8001696:	f7fe ff07 	bl	80004a8 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4620      	mov	r0, r4
 80016a0:	4629      	mov	r1, r5
 80016a2:	f7fe fda3 	bl	80001ec <__adddf3>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4640      	mov	r0, r8
 80016ac:	4649      	mov	r1, r9
 80016ae:	f7ff f87d 	bl	80007ac <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff fa25 	bl	8000b08 <__aeabi_d2f>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a3d      	ldr	r2, [pc, #244]	; (80017b8 <EmgConfigInit+0x358>)
 80016c2:	6113      	str	r3, [r2, #16]

	//Create the coefficient matrices for notch filter at f0
	Filter_Config.num[0] = 1.0 / Filter_Config.mag;
 80016c4:	4b3c      	ldr	r3, [pc, #240]	; (80017b8 <EmgConfigInit+0x358>)
 80016c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80016ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d2:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <EmgConfigInit+0x358>)
 80016d4:	edc3 7a05 	vstr	s15, [r3, #20]
	Filter_Config.num[1] = -2.0 * cos(Filter_Config.w0) / Filter_Config.mag;
 80016d8:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <EmgConfigInit+0x358>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fee3 	bl	80004a8 <__aeabi_f2d>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	ec43 2b10 	vmov	d0, r2, r3
 80016ea:	f004 fd59 	bl	80061a0 <cos>
 80016ee:	ec51 0b10 	vmov	r0, r1, d0
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80016fa:	f7fe ff2d 	bl	8000558 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4614      	mov	r4, r2
 8001704:	461d      	mov	r5, r3
 8001706:	4b2c      	ldr	r3, [pc, #176]	; (80017b8 <EmgConfigInit+0x358>)
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fecc 	bl	80004a8 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4620      	mov	r0, r4
 8001716:	4629      	mov	r1, r5
 8001718:	f7ff f848 	bl	80007ac <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f7ff f9f0 	bl	8000b08 <__aeabi_d2f>
 8001728:	4603      	mov	r3, r0
 800172a:	4a23      	ldr	r2, [pc, #140]	; (80017b8 <EmgConfigInit+0x358>)
 800172c:	6193      	str	r3, [r2, #24]
	Filter_Config.num[2] = 1.0 / Filter_Config.mag;
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <EmgConfigInit+0x358>)
 8001730:	ed93 7a04 	vldr	s14, [r3, #16]
 8001734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <EmgConfigInit+0x358>)
 800173e:	edc3 7a07 	vstr	s15, [r3, #28]

	Filter_Config.den[0] = 1;
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <EmgConfigInit+0x358>)
 8001744:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001748:	621a      	str	r2, [r3, #32]
	Filter_Config.den[1] = -2 * Filter_Config.p * cos(Filter_Config.w0);
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <EmgConfigInit+0x358>)
 800174c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001750:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001758:	ee17 0a90 	vmov	r0, s15
 800175c:	f7fe fea4 	bl	80004a8 <__aeabi_f2d>
 8001760:	4604      	mov	r4, r0
 8001762:	460d      	mov	r5, r1
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <EmgConfigInit+0x358>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fe9d 	bl	80004a8 <__aeabi_f2d>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	ec43 2b10 	vmov	d0, r2, r3
 8001776:	f004 fd13 	bl	80061a0 <cos>
 800177a:	ec53 2b10 	vmov	r2, r3, d0
 800177e:	4620      	mov	r0, r4
 8001780:	4629      	mov	r1, r5
 8001782:	f7fe fee9 	bl	8000558 <__aeabi_dmul>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff f9bb 	bl	8000b08 <__aeabi_d2f>
 8001792:	4603      	mov	r3, r0
 8001794:	e018      	b.n	80017c8 <EmgConfigInit+0x368>
 8001796:	bf00      	nop
 8001798:	00000000 	.word	0x00000000
 800179c:	40000000 	.word	0x40000000
 80017a0:	2e48e8a7 	.word	0x2e48e8a7
 80017a4:	401921ff 	.word	0x401921ff
 80017a8:	20000524 	.word	0x20000524
 80017ac:	40533333 	.word	0x40533333
 80017b0:	40a00000 	.word	0x40a00000
 80017b4:	3fb9999a 	.word	0x3fb9999a
 80017b8:	2000053c 	.word	0x2000053c
 80017bc:	408f4000 	.word	0x408f4000
 80017c0:	3f733333 	.word	0x3f733333
 80017c4:	3ff00000 	.word	0x3ff00000
 80017c8:	4ad0      	ldr	r2, [pc, #832]	; (8001b0c <EmgConfigInit+0x6ac>)
 80017ca:	6253      	str	r3, [r2, #36]	; 0x24
	Filter_Config.den[2] = Filter_Config.p * Filter_Config.p;
 80017cc:	4bcf      	ldr	r3, [pc, #828]	; (8001b0c <EmgConfigInit+0x6ac>)
 80017ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80017d2:	4bce      	ldr	r3, [pc, #824]	; (8001b0c <EmgConfigInit+0x6ac>)
 80017d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80017d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017dc:	4bcb      	ldr	r3, [pc, #812]	; (8001b0c <EmgConfigInit+0x6ac>)
 80017de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	//Optional dual frequency notch filter. Comment this code block out to use dual frequency notch filter
	// Create the coefficient matrices for notch filter at f1
	Filter_Config.mag2 = (1 -2*cos(Filter_Config.w1) +1)/(1 -2*Filter_Config.p*cos(Filter_Config.w1) + Filter_Config.p*Filter_Config.p);
 80017e2:	4bca      	ldr	r3, [pc, #808]	; (8001b0c <EmgConfigInit+0x6ac>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe5e 	bl	80004a8 <__aeabi_f2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	ec43 2b10 	vmov	d0, r2, r3
 80017f4:	f004 fcd4 	bl	80061a0 <cos>
 80017f8:	ec51 0b10 	vmov	r0, r1, d0
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	f7fe fcf4 	bl	80001ec <__adddf3>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	f04f 0000 	mov.w	r0, #0
 800180c:	49c0      	ldr	r1, [pc, #768]	; (8001b10 <EmgConfigInit+0x6b0>)
 800180e:	f7fe fceb 	bl	80001e8 <__aeabi_dsub>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	4bbc      	ldr	r3, [pc, #752]	; (8001b10 <EmgConfigInit+0x6b0>)
 8001820:	f7fe fce4 	bl	80001ec <__adddf3>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4690      	mov	r8, r2
 800182a:	4699      	mov	r9, r3
 800182c:	4bb7      	ldr	r3, [pc, #732]	; (8001b0c <EmgConfigInit+0x6ac>)
 800182e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001832:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001836:	ee17 0a90 	vmov	r0, s15
 800183a:	f7fe fe35 	bl	80004a8 <__aeabi_f2d>
 800183e:	4604      	mov	r4, r0
 8001840:	460d      	mov	r5, r1
 8001842:	4bb2      	ldr	r3, [pc, #712]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe2e 	bl	80004a8 <__aeabi_f2d>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	ec43 2b10 	vmov	d0, r2, r3
 8001854:	f004 fca4 	bl	80061a0 <cos>
 8001858:	ec53 2b10 	vmov	r2, r3, d0
 800185c:	4620      	mov	r0, r4
 800185e:	4629      	mov	r1, r5
 8001860:	f7fe fe7a 	bl	8000558 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	f04f 0000 	mov.w	r0, #0
 800186c:	49a8      	ldr	r1, [pc, #672]	; (8001b10 <EmgConfigInit+0x6b0>)
 800186e:	f7fe fcbb 	bl	80001e8 <__aeabi_dsub>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4614      	mov	r4, r2
 8001878:	461d      	mov	r5, r3
 800187a:	4ba4      	ldr	r3, [pc, #656]	; (8001b0c <EmgConfigInit+0x6ac>)
 800187c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001880:	4ba2      	ldr	r3, [pc, #648]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001882:	edd3 7a03 	vldr	s15, [r3, #12]
 8001886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188a:	ee17 0a90 	vmov	r0, s15
 800188e:	f7fe fe0b 	bl	80004a8 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7fe fca7 	bl	80001ec <__adddf3>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4640      	mov	r0, r8
 80018a4:	4649      	mov	r1, r9
 80018a6:	f7fe ff81 	bl	80007ac <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f929 	bl	8000b08 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a94      	ldr	r2, [pc, #592]	; (8001b0c <EmgConfigInit+0x6ac>)
 80018ba:	62d3      	str	r3, [r2, #44]	; 0x2c

	Filter_Config.num2[0] = 1.0 / Filter_Config.mag2;
 80018bc:	4b93      	ldr	r3, [pc, #588]	; (8001b0c <EmgConfigInit+0x6ac>)
 80018be:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80018c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ca:	4b90      	ldr	r3, [pc, #576]	; (8001b0c <EmgConfigInit+0x6ac>)
 80018cc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	Filter_Config.num2[1] = -2.0 * cos(Filter_Config.w1) / Filter_Config.mag2;
 80018d0:	4b8e      	ldr	r3, [pc, #568]	; (8001b0c <EmgConfigInit+0x6ac>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fde7 	bl	80004a8 <__aeabi_f2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	ec43 2b10 	vmov	d0, r2, r3
 80018e2:	f004 fc5d 	bl	80061a0 <cos>
 80018e6:	ec51 0b10 	vmov	r0, r1, d0
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80018f2:	f7fe fe31 	bl	8000558 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4614      	mov	r4, r2
 80018fc:	461d      	mov	r5, r3
 80018fe:	4b83      	ldr	r3, [pc, #524]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fdd0 	bl	80004a8 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe ff4c 	bl	80007ac <__aeabi_ddiv>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f8f4 	bl	8000b08 <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	4a7a      	ldr	r2, [pc, #488]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001924:	6353      	str	r3, [r2, #52]	; 0x34
	Filter_Config.num2[2] = 1.0 / Filter_Config.mag2;
 8001926:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001928:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800192c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001934:	4b75      	ldr	r3, [pc, #468]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001936:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	Filter_Config.den2[0] = 1;
 800193a:	4b74      	ldr	r3, [pc, #464]	; (8001b0c <EmgConfigInit+0x6ac>)
 800193c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001940:	63da      	str	r2, [r3, #60]	; 0x3c
	Filter_Config.den2[1] = -2 * Filter_Config.p * cos(Filter_Config.w1);
 8001942:	4b72      	ldr	r3, [pc, #456]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001944:	edd3 7a03 	vldr	s15, [r3, #12]
 8001948:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800194c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001950:	ee17 0a90 	vmov	r0, s15
 8001954:	f7fe fda8 	bl	80004a8 <__aeabi_f2d>
 8001958:	4604      	mov	r4, r0
 800195a:	460d      	mov	r5, r1
 800195c:	4b6b      	ldr	r3, [pc, #428]	; (8001b0c <EmgConfigInit+0x6ac>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fda1 	bl	80004a8 <__aeabi_f2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	ec43 2b10 	vmov	d0, r2, r3
 800196e:	f004 fc17 	bl	80061a0 <cos>
 8001972:	ec53 2b10 	vmov	r2, r3, d0
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe fded 	bl	8000558 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f7ff f8bf 	bl	8000b08 <__aeabi_d2f>
 800198a:	4603      	mov	r3, r0
 800198c:	4a5f      	ldr	r2, [pc, #380]	; (8001b0c <EmgConfigInit+0x6ac>)
 800198e:	6413      	str	r3, [r2, #64]	; 0x40
	Filter_Config.den2[2] = Filter_Config.p * Filter_Config.p;
 8001990:	4b5e      	ldr	r3, [pc, #376]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001992:	ed93 7a03 	vldr	s14, [r3, #12]
 8001996:	4b5d      	ldr	r3, [pc, #372]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001998:	edd3 7a03 	vldr	s15, [r3, #12]
 800199c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a0:	4b5a      	ldr	r3, [pc, #360]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019a2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	//Convolve two filters to obtain dual notch filter at frequencies f0 and f1
	Filter_Config.num3[0] = Filter_Config.num[0] * Filter_Config.num2[0];
 80019a6:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019a8:	ed93 7a05 	vldr	s14, [r3, #20]
 80019ac:	4b57      	ldr	r3, [pc, #348]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019ae:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b6:	4b55      	ldr	r3, [pc, #340]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019b8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	Filter_Config.num3[1] = Filter_Config.num2[0] * Filter_Config.num[1] + Filter_Config.num2[1] * Filter_Config.num[0];
 80019bc:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019be:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019c2:	4b52      	ldr	r3, [pc, #328]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80019c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019cc:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019ce:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80019d2:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80019d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e0:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019e2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	Filter_Config.num3[2] = Filter_Config.num2[0] * Filter_Config.num[2] + Filter_Config.num2[1] * Filter_Config.num[1] + Filter_Config.num2[2] * Filter_Config.num[0];
 80019e6:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019e8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019ec:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80019f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f6:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019f8:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80019fc:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <EmgConfigInit+0x6ac>)
 80019fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0a:	4b40      	ldr	r3, [pc, #256]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a0c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001a10:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a12:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a20:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	Filter_Config.num3[3] = Filter_Config.num2[1] * Filter_Config.num[2] + Filter_Config.num2[2] * Filter_Config.num[1];
 8001a24:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a26:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a2c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a36:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001a3a:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a3c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a4a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	Filter_Config.num3[4] = Filter_Config.num2[2] * Filter_Config.num[2];
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a50:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a56:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a60:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	Filter_Config.den3[0] = 1;
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a6a:	65da      	str	r2, [r3, #92]	; 0x5c
	Filter_Config.den3[1] = Filter_Config.den2[0] * Filter_Config.den[1] + Filter_Config.den2[1] * Filter_Config.den[0];
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a6e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a74:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a7e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a84:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a92:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	Filter_Config.den3[2] = Filter_Config.den2[0] * Filter_Config.den[2] + Filter_Config.den2[1] * Filter_Config.den[1] + Filter_Config.den2[2] * Filter_Config.den[0];
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a98:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001a9e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001aa8:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001aae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001abc:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001ac2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001ad0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	Filter_Config.den3[3] = Filter_Config.den2[1] * Filter_Config.den[2] + Filter_Config.den2[2] * Filter_Config.den[1];
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001ad6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001adc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001ae6:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001aec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001afa:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	Filter_Config.den3[4] = Filter_Config.den2[2] * Filter_Config.den[2];
 8001afe:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001b00:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001b04:	4b01      	ldr	r3, [pc, #4]	; (8001b0c <EmgConfigInit+0x6ac>)
 8001b06:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b0a:	e003      	b.n	8001b14 <EmgConfigInit+0x6b4>
 8001b0c:	2000053c 	.word	0x2000053c
 8001b10:	3ff00000 	.word	0x3ff00000
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <EmgConfigInit+0x6c4>)
 8001b1a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

}
 8001b1e:	bf00      	nop
 8001b20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b24:	2000053c 	.word	0x2000053c

08001b28 <EmgTaskFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MotorTask */
void EmgTaskFunction(void * argument)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
//
//	  vTaskDelayUntil(&xLastWakeTime, xSamplingPeriod);
//
//	  EmgNotchFilter(raw, emg);

	  current_time = HAL_GetTick();
 8001b30:	f000 fbfe 	bl	8002330 <HAL_GetTick>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4a5d      	ldr	r2, [pc, #372]	; (8001cac <EmgTaskFunction+0x184>)
 8001b38:	6013      	str	r3, [r2, #0]

	  if(current_time - start_time >= SAMPLE_PERIOD)
 8001b3a:	4b5c      	ldr	r3, [pc, #368]	; (8001cac <EmgTaskFunction+0x184>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b5c      	ldr	r3, [pc, #368]	; (8001cb0 <EmgTaskFunction+0x188>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d0f4      	beq.n	8001b30 <EmgTaskFunction+0x8>
	  {
		  start_time = current_time;
 8001b46:	4b59      	ldr	r3, [pc, #356]	; (8001cac <EmgTaskFunction+0x184>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a59      	ldr	r2, [pc, #356]	; (8001cb0 <EmgTaskFunction+0x188>)
 8001b4c:	6013      	str	r3, [r2, #0]

		  HAL_ADC_Start(&hadc1);
 8001b4e:	4859      	ldr	r0, [pc, #356]	; (8001cb4 <EmgTaskFunction+0x18c>)
 8001b50:	f000 fc3e 	bl	80023d0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	4856      	ldr	r0, [pc, #344]	; (8001cb4 <EmgTaskFunction+0x18c>)
 8001b5a:	f000 fced 	bl	8002538 <HAL_ADC_PollForConversion>
		  raw[count%100] = round( HAL_ADC_GetValue(&hadc1)*ADC_Config.adc_scale-ADC_Config.sig_offset);
 8001b5e:	4855      	ldr	r0, [pc, #340]	; (8001cb4 <EmgTaskFunction+0x18c>)
 8001b60:	f000 fd75 	bl	800264e <HAL_ADC_GetValue>
 8001b64:	ee07 0a90 	vmov	s15, r0
 8001b68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b6c:	4b52      	ldr	r3, [pc, #328]	; (8001cb8 <EmgTaskFunction+0x190>)
 8001b6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b76:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <EmgTaskFunction+0x190>)
 8001b78:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b80:	ee17 0a90 	vmov	r0, s15
 8001b84:	f7fe fc90 	bl	80004a8 <__aeabi_f2d>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	ec43 2b10 	vmov	d0, r2, r3
 8001b90:	f004 fb66 	bl	8006260 <round>
 8001b94:	ec51 0b10 	vmov	r0, r1, d0
 8001b98:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <EmgTaskFunction+0x194>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a48      	ldr	r2, [pc, #288]	; (8001cc0 <EmgTaskFunction+0x198>)
 8001b9e:	fba2 4203 	umull	r4, r2, r2, r3
 8001ba2:	0954      	lsrs	r4, r2, #5
 8001ba4:	2264      	movs	r2, #100	; 0x64
 8001ba6:	fb04 f202 	mul.w	r2, r4, r2
 8001baa:	1a9c      	subs	r4, r3, r2
 8001bac:	f7fe ff84 	bl	8000ab8 <__aeabi_d2iz>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <EmgTaskFunction+0x19c>)
 8001bb6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
//		  raw[count%100] = HAL_ADC_GetValue(&hadc1);
//		  printf("raw = %d\n",emg[count%100]);

		  EmgNotchFilter(raw, emg);
 8001bba:	4943      	ldr	r1, [pc, #268]	; (8001cc8 <EmgTaskFunction+0x1a0>)
 8001bbc:	4841      	ldr	r0, [pc, #260]	; (8001cc4 <EmgTaskFunction+0x19c>)
 8001bbe:	f000 f8af 	bl	8001d20 <EmgNotchFilter>

		  curr_avg = abs(emg[count%100])*alpha + prev_avg*prev_alpha;  //Calculate the current average.
 8001bc2:	4b3e      	ldr	r3, [pc, #248]	; (8001cbc <EmgTaskFunction+0x194>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <EmgTaskFunction+0x198>)
 8001bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	2164      	movs	r1, #100	; 0x64
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	4a3c      	ldr	r2, [pc, #240]	; (8001cc8 <EmgTaskFunction+0x1a0>)
 8001bd8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bfb8      	it	lt
 8001be0:	425b      	neglt	r3, r3
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	ee07 3a90 	vmov	s15, r3
 8001be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bec:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001ccc <EmgTaskFunction+0x1a4>
 8001bf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bf4:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <EmgTaskFunction+0x1a8>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001cd4 <EmgTaskFunction+0x1ac>
 8001bfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <EmgTaskFunction+0x1b0>)
 8001c08:	edc3 7a00 	vstr	s15, [r3]
		  prev_avg=curr_avg;
 8001c0c:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <EmgTaskFunction+0x1b0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <EmgTaskFunction+0x1a8>)
 8001c12:	6013      	str	r3, [r2, #0]

//		  printf("filtered = %d\n",emg[count%100]);

		  if(command_counter>0){
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <EmgTaskFunction+0x1b4>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d010      	beq.n	8001c3e <EmgTaskFunction+0x116>
			command_counter--;
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <EmgTaskFunction+0x1b4>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <EmgTaskFunction+0x1b4>)
 8001c26:	801a      	strh	r2, [r3, #0]
			if(command_counter==0){
 8001c28:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <EmgTaskFunction+0x1b4>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d106      	bne.n	8001c3e <EmgTaskFunction+0x116>
			  xSemaphoreGive(handReleaseHandle);
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <EmgTaskFunction+0x1b8>)
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	2300      	movs	r3, #0
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	f002 fb87 	bl	800434c <xQueueGenericSend>
			}
		  }

		  if(abs(emg[count%100]) - prev_avg >= THRESHOLD_AVARAGE_UPPER_LIMIT){
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <EmgTaskFunction+0x194>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <EmgTaskFunction+0x198>)
 8001c44:	fba3 1302 	umull	r1, r3, r3, r2
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	2164      	movs	r1, #100	; 0x64
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <EmgTaskFunction+0x1a0>)
 8001c54:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bfb8      	it	lt
 8001c5c:	425b      	neglt	r3, r3
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <EmgTaskFunction+0x1a8>)
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c72:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001ce4 <EmgTaskFunction+0x1bc>
 8001c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7e:	db0e      	blt.n	8001c9e <EmgTaskFunction+0x176>
			if(command_counter==0){
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <EmgTaskFunction+0x1b4>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d106      	bne.n	8001c96 <EmgTaskFunction+0x16e>
			 xSemaphoreGive(handFlexHandle);
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <EmgTaskFunction+0x1c0>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	f002 fb5b 	bl	800434c <xQueueGenericSend>
			}
			command_counter = SAMPLE_FREQUENCY_HZ;
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <EmgTaskFunction+0x1b4>)
 8001c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c9c:	801a      	strh	r2, [r3, #0]
		  }
		  count++;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <EmgTaskFunction+0x194>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <EmgTaskFunction+0x194>)
 8001ca6:	6013      	str	r3, [r2, #0]
	  current_time = HAL_GetTick();
 8001ca8:	e742      	b.n	8001b30 <EmgTaskFunction+0x8>
 8001caa:	bf00      	nop
 8001cac:	20000380 	.word	0x20000380
 8001cb0:	2000037c 	.word	0x2000037c
 8001cb4:	200002e8 	.word	0x200002e8
 8001cb8:	20000524 	.word	0x20000524
 8001cbc:	20000004 	.word	0x20000004
 8001cc0:	51eb851f 	.word	0x51eb851f
 8001cc4:	20000384 	.word	0x20000384
 8001cc8:	2000044c 	.word	0x2000044c
 8001ccc:	3dcccccd 	.word	0x3dcccccd
 8001cd0:	2000051c 	.word	0x2000051c
 8001cd4:	3f666666 	.word	0x3f666666
 8001cd8:	20000518 	.word	0x20000518
 8001cdc:	20000514 	.word	0x20000514
 8001ce0:	20000378 	.word	0x20000378
 8001ce4:	42a00000 	.word	0x42a00000
 8001ce8:	20000374 	.word	0x20000374

08001cec <EmgTaskInit>:
  }
  /* USER CODE END MotorTask */
}

void EmgTaskInit(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af02      	add	r7, sp, #8
	  TaskFunction_t EmgTask = EmgTaskFunction;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <EmgTaskInit+0x28>)
 8001cf4:	607b      	str	r3, [r7, #4]
	  xTaskCreate(	EmgTask,
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <EmgTaskInit+0x2c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2300      	movs	r3, #0
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	4905      	ldr	r1, [pc, #20]	; (8001d1c <EmgTaskInit+0x30>)
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f002 fe89 	bl	8004a1e <xTaskCreate>
					"EMG Task",
					128,
					NULL,//(void *) &hadc1
					tskIDLE_PRIORITY,
	  				emgTaskHandle );
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	08001b29 	.word	0x08001b29
 8001d18:	20000520 	.word	0x20000520
 8001d1c:	08007fc0 	.word	0x08007fc0

08001d20 <EmgNotchFilter>:
void EmgNotchFilter(int16_t *raw, int16_t *emg)
{
 8001d20:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
	emg[count%100] = round(raw[count%100]*Filter_Config.num[0] + raw[(count-1)%100]*Filter_Config.num[1] + raw[(count-2)%100]*Filter_Config.num[2] - emg[(count-1)%100]*Filter_Config.den[1] - emg[(count-2)%100]*Filter_Config.den[2]);
 8001d2c:	4b54      	ldr	r3, [pc, #336]	; (8001e80 <EmgNotchFilter+0x160>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <EmgNotchFilter+0x164>)
 8001d32:	fba3 1302 	umull	r1, r3, r3, r2
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2164      	movs	r1, #100	; 0x64
 8001d3a:	fb01 f303 	mul.w	r3, r1, r3
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d52:	4b4d      	ldr	r3, [pc, #308]	; (8001e88 <EmgNotchFilter+0x168>)
 8001d54:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5c:	4b48      	ldr	r3, [pc, #288]	; (8001e80 <EmgNotchFilter+0x160>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <EmgNotchFilter+0x164>)
 8001d64:	fba3 1302 	umull	r1, r3, r3, r2
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	2164      	movs	r1, #100	; 0x64
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d84:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <EmgNotchFilter+0x168>)
 8001d86:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <EmgNotchFilter+0x160>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1e9a      	subs	r2, r3, #2
 8001d98:	4b3a      	ldr	r3, [pc, #232]	; (8001e84 <EmgNotchFilter+0x164>)
 8001d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2164      	movs	r1, #100	; 0x64
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <EmgNotchFilter+0x168>)
 8001dbc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <EmgNotchFilter+0x160>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <EmgNotchFilter+0x164>)
 8001dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	2164      	movs	r1, #100	; 0x64
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <EmgNotchFilter+0x168>)
 8001df2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <EmgNotchFilter+0x160>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	1e9a      	subs	r2, r3, #2
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <EmgNotchFilter+0x164>)
 8001e06:	fba3 1302 	umull	r1, r3, r3, r2
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2164      	movs	r1, #100	; 0x64
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <EmgNotchFilter+0x168>)
 8001e28:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e34:	ee17 0a90 	vmov	r0, s15
 8001e38:	f7fe fb36 	bl	80004a8 <__aeabi_f2d>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	ec43 2b10 	vmov	d0, r2, r3
 8001e44:	f004 fa0c 	bl	8006260 <round>
 8001e48:	ec59 8b10 	vmov	r8, r9, d0
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <EmgNotchFilter+0x160>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <EmgNotchFilter+0x164>)
 8001e52:	fba3 1302 	umull	r1, r3, r3, r2
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2164      	movs	r1, #100	; 0x64
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	18d4      	adds	r4, r2, r3
 8001e66:	4640      	mov	r0, r8
 8001e68:	4649      	mov	r1, r9
 8001e6a:	f7fe fe25 	bl	8000ab8 <__aeabi_d2iz>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	8023      	strh	r3, [r4, #0]

}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000004 	.word	0x20000004
 8001e84:	51eb851f 	.word	0x51eb851f
 8001e88:	2000053c 	.word	0x2000053c

08001e8c <MotorTaskFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MotorTask */
void MotorTaskFunction(void const * argument)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	uint32_t movement_detect = (uint32_t) argument;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	613b      	str	r3, [r7, #16]

	uint8_t tx_buffer[8];

	/*Setting the speed of the servo motors*/
	int counter = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
	while(counter <= CHANNEL_4){
 8001e9c:	e011      	b.n	8001ec2 <MotorTaskFunction+0x36>
		Set_Speed(tx_buffer, counter);
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f893 	bl	8001fd4 <Set_Speed>
		HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 8001eae:	f107 0108 	add.w	r1, r7, #8
 8001eb2:	2364      	movs	r3, #100	; 0x64
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4826      	ldr	r0, [pc, #152]	; (8001f50 <MotorTaskFunction+0xc4>)
 8001eb8:	f001 fd5d 	bl	8003976 <HAL_UART_Transmit>
		counter++;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
	while(counter <= CHANNEL_4){
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	ddea      	ble.n	8001e9e <MotorTaskFunction+0x12>
//		printf("@@@@@@@@@@@@@@@@@@@@ HAND RELEASED @@@@@@@@@@@@@@@@@@@@@@@@\n");




		xSemaphoreTake(handFlexHandle, portMAX_DELAY);
 8001ec8:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <MotorTaskFunction+0xc8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fb39 	bl	8004548 <xQueueSemaphoreTake>

		switch(movement_detect){
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d82b      	bhi.n	8001f34 <MotorTaskFunction+0xa8>
 8001edc:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <MotorTaskFunction+0x58>)
 8001ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee2:	bf00      	nop
 8001ee4:	08001ef9 	.word	0x08001ef9
 8001ee8:	08001f05 	.word	0x08001f05
 8001eec:	08001f11 	.word	0x08001f11
 8001ef0:	08001f1d 	.word	0x08001f1d
 8001ef4:	08001f29 	.word	0x08001f29
			case FIST:
				Fist(tx_buffer);
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 f885 	bl	800200c <Fist>
				break;
 8001f02:	e017      	b.n	8001f34 <MotorTaskFunction+0xa8>

			case OKAY_SIGN:
				Okay_sign(tx_buffer);
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f8b9 	bl	8002080 <Okay_sign>
				break;
 8001f0e:	e011      	b.n	8001f34 <MotorTaskFunction+0xa8>

			case PEACE_SIGN:
				Peace_sign(tx_buffer);
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f8e1 	bl	80020dc <Peace_sign>
				break;
 8001f1a:	e00b      	b.n	8001f34 <MotorTaskFunction+0xa8>

			case POINTING:
				Pointing(tx_buffer);
 8001f1c:	f107 0308 	add.w	r3, r7, #8
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f909 	bl	8002138 <Pointing>
				break;
 8001f26:	e005      	b.n	8001f34 <MotorTaskFunction+0xa8>

			case GOOD_SIGN:
				Good_sign(tx_buffer);
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f931 	bl	8002194 <Good_sign>
				break;
 8001f32:	bf00      	nop
		}

		xSemaphoreTake(handReleaseHandle, portMAX_DELAY);
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <MotorTaskFunction+0xcc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 fb03 	bl	8004548 <xQueueSemaphoreTake>
		Release(tx_buffer);
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f952 	bl	80021f0 <Release>
		xSemaphoreTake(handFlexHandle, portMAX_DELAY);
 8001f4c:	e7bc      	b.n	8001ec8 <MotorTaskFunction+0x3c>
 8001f4e:	bf00      	nop
 8001f50:	20000330 	.word	0x20000330
 8001f54:	20000374 	.word	0x20000374
 8001f58:	20000378 	.word	0x20000378

08001f5c <MotorTaskInit>:
	}

}

void MotorTaskInit(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af02      	add	r7, sp, #8
	  TaskFunction_t MotorTask = MotorTaskFunction;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MotorTaskInit+0x28>)
 8001f64:	607b      	str	r3, [r7, #4]
	  xTaskCreate(	MotorTask,
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <MotorTaskInit+0x2c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2300      	movs	r3, #0
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	4905      	ldr	r1, [pc, #20]	; (8001f8c <MotorTaskInit+0x30>)
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f002 fd51 	bl	8004a1e <xTaskCreate>
					"Motor Task",
					128,
					0,
					tskIDLE_PRIORITY,
	  				motorTaskHandle );
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	08001e8d 	.word	0x08001e8d
 8001f88:	200005ac 	.word	0x200005ac
 8001f8c:	08007fcc 	.word	0x08007fcc

08001f90 <Set_Target>:

void Set_Target(uint8_t *buffer, const uint8_t CHANNEL, uint8_t target_low, uint8_t target_high){
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	70fb      	strb	r3, [r7, #3]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	70bb      	strb	r3, [r7, #2]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	707b      	strb	r3, [r7, #1]
	buffer[0] = 0x84;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2284      	movs	r2, #132	; 0x84
 8001fae:	701a      	strb	r2, [r3, #0]
	buffer[1] = CHANNEL;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	701a      	strb	r2, [r3, #0]
	buffer[2] = target_low;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3302      	adds	r3, #2
 8001fbc:	78ba      	ldrb	r2, [r7, #2]
 8001fbe:	701a      	strb	r2, [r3, #0]
	buffer[3] = target_high;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3303      	adds	r3, #3
 8001fc4:	787a      	ldrb	r2, [r7, #1]
 8001fc6:	701a      	strb	r2, [r3, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <Set_Speed>:

/*Storing the speed to 140us/ms and channel number to a buffer.*/

void Set_Speed(uint8_t *buffer, const uint8_t CHANNEL){
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
	buffer[0] = 0x87;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2287      	movs	r2, #135	; 0x87
 8001fe4:	701a      	strb	r2, [r3, #0]
	buffer[1] = CHANNEL;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	701a      	strb	r2, [r3, #0]
	buffer[2] =	0x0C;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0x01;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3303      	adds	r3, #3
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <Fist>:

void Fist(uint8_t *tx_buffer){
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    Set_Target(tx_buffer, CHANNEL_0, TARGET_MIN_LOW, TARGET_MIN_HIGH);
 8002014:	2308      	movs	r3, #8
 8002016:	2260      	movs	r2, #96	; 0x60
 8002018:	2100      	movs	r1, #0
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffb8 	bl	8001f90 <Set_Target>
  	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 8002020:	2364      	movs	r3, #100	; 0x64
 8002022:	2204      	movs	r2, #4
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4815      	ldr	r0, [pc, #84]	; (800207c <Fist+0x70>)
 8002028:	f001 fca5 	bl	8003976 <HAL_UART_Transmit>
    Set_Target(tx_buffer, CHANNEL_1, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 800202c:	2354      	movs	r3, #84	; 0x54
 800202e:	2230      	movs	r2, #48	; 0x30
 8002030:	2101      	movs	r1, #1
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffac 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 8002038:	2364      	movs	r3, #100	; 0x64
 800203a:	2204      	movs	r2, #4
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	480f      	ldr	r0, [pc, #60]	; (800207c <Fist+0x70>)
 8002040:	f001 fc99 	bl	8003976 <HAL_UART_Transmit>
	Set_Target(tx_buffer, CHANNEL_2, TARGET_MIN_LOW, TARGET_MIN_HIGH);
 8002044:	2308      	movs	r3, #8
 8002046:	2260      	movs	r2, #96	; 0x60
 8002048:	2102      	movs	r1, #2
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffa0 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 8002050:	2364      	movs	r3, #100	; 0x64
 8002052:	2204      	movs	r2, #4
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4809      	ldr	r0, [pc, #36]	; (800207c <Fist+0x70>)
 8002058:	f001 fc8d 	bl	8003976 <HAL_UART_Transmit>
	Set_Target(tx_buffer, CHANNEL_4, TARGET_MIN_LOW, TARGET_MIN_HIGH);
 800205c:	2308      	movs	r3, #8
 800205e:	2260      	movs	r2, #96	; 0x60
 8002060:	2104      	movs	r1, #4
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ff94 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 8002068:	2364      	movs	r3, #100	; 0x64
 800206a:	2204      	movs	r2, #4
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4803      	ldr	r0, [pc, #12]	; (800207c <Fist+0x70>)
 8002070:	f001 fc81 	bl	8003976 <HAL_UART_Transmit>
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000330 	.word	0x20000330

08002080 <Okay_sign>:

void Okay_sign(uint8_t *tx_buffer){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    Set_Target(tx_buffer, CHANNEL_1, TARGET_MIN_LOW, TARGET_MIN_HIGH);
 8002088:	2308      	movs	r3, #8
 800208a:	2260      	movs	r2, #96	; 0x60
 800208c:	2101      	movs	r1, #1
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ff7e 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 8002094:	2364      	movs	r3, #100	; 0x64
 8002096:	2204      	movs	r2, #4
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	480f      	ldr	r0, [pc, #60]	; (80020d8 <Okay_sign+0x58>)
 800209c:	f001 fc6b 	bl	8003976 <HAL_UART_Transmit>
	Set_Target(tx_buffer, CHANNEL_2, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 80020a0:	2354      	movs	r3, #84	; 0x54
 80020a2:	2230      	movs	r2, #48	; 0x30
 80020a4:	2102      	movs	r1, #2
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ff72 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 80020ac:	2364      	movs	r3, #100	; 0x64
 80020ae:	2204      	movs	r2, #4
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4809      	ldr	r0, [pc, #36]	; (80020d8 <Okay_sign+0x58>)
 80020b4:	f001 fc5f 	bl	8003976 <HAL_UART_Transmit>
	Set_Target(tx_buffer, CHANNEL_4, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 80020b8:	2354      	movs	r3, #84	; 0x54
 80020ba:	2230      	movs	r2, #48	; 0x30
 80020bc:	2104      	movs	r1, #4
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ff66 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 80020c4:	2364      	movs	r3, #100	; 0x64
 80020c6:	2204      	movs	r2, #4
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4803      	ldr	r0, [pc, #12]	; (80020d8 <Okay_sign+0x58>)
 80020cc:	f001 fc53 	bl	8003976 <HAL_UART_Transmit>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000330 	.word	0x20000330

080020dc <Peace_sign>:

void Peace_sign(uint8_t *tx_buffer){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    Set_Target(tx_buffer, CHANNEL_0, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 80020e4:	2354      	movs	r3, #84	; 0x54
 80020e6:	2230      	movs	r2, #48	; 0x30
 80020e8:	2100      	movs	r1, #0
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff50 	bl	8001f90 <Set_Target>
  	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 80020f0:	2364      	movs	r3, #100	; 0x64
 80020f2:	2204      	movs	r2, #4
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	480f      	ldr	r0, [pc, #60]	; (8002134 <Peace_sign+0x58>)
 80020f8:	f001 fc3d 	bl	8003976 <HAL_UART_Transmit>
	Set_Target(tx_buffer, CHANNEL_2, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 80020fc:	2354      	movs	r3, #84	; 0x54
 80020fe:	2230      	movs	r2, #48	; 0x30
 8002100:	2102      	movs	r1, #2
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff44 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 8002108:	2364      	movs	r3, #100	; 0x64
 800210a:	2204      	movs	r2, #4
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4809      	ldr	r0, [pc, #36]	; (8002134 <Peace_sign+0x58>)
 8002110:	f001 fc31 	bl	8003976 <HAL_UART_Transmit>
	Set_Target(tx_buffer, CHANNEL_4, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 8002114:	2354      	movs	r3, #84	; 0x54
 8002116:	2230      	movs	r2, #48	; 0x30
 8002118:	2104      	movs	r1, #4
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ff38 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 8002120:	2364      	movs	r3, #100	; 0x64
 8002122:	2204      	movs	r2, #4
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4803      	ldr	r0, [pc, #12]	; (8002134 <Peace_sign+0x58>)
 8002128:	f001 fc25 	bl	8003976 <HAL_UART_Transmit>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000330 	.word	0x20000330

08002138 <Pointing>:

void Pointing(uint8_t *tx_buffer){
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    Set_Target(tx_buffer, CHANNEL_0, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 8002140:	2354      	movs	r3, #84	; 0x54
 8002142:	2230      	movs	r2, #48	; 0x30
 8002144:	2100      	movs	r1, #0
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ff22 	bl	8001f90 <Set_Target>
  	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 800214c:	2364      	movs	r3, #100	; 0x64
 800214e:	2204      	movs	r2, #4
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	480f      	ldr	r0, [pc, #60]	; (8002190 <Pointing+0x58>)
 8002154:	f001 fc0f 	bl	8003976 <HAL_UART_Transmit>
	Set_Target(tx_buffer, CHANNEL_2, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 8002158:	2354      	movs	r3, #84	; 0x54
 800215a:	2230      	movs	r2, #48	; 0x30
 800215c:	2102      	movs	r1, #2
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ff16 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 8002164:	2364      	movs	r3, #100	; 0x64
 8002166:	2204      	movs	r2, #4
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4809      	ldr	r0, [pc, #36]	; (8002190 <Pointing+0x58>)
 800216c:	f001 fc03 	bl	8003976 <HAL_UART_Transmit>
	Set_Target(tx_buffer, CHANNEL_4, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 8002170:	2354      	movs	r3, #84	; 0x54
 8002172:	2230      	movs	r2, #48	; 0x30
 8002174:	2104      	movs	r1, #4
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ff0a 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 800217c:	2364      	movs	r3, #100	; 0x64
 800217e:	2204      	movs	r2, #4
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4803      	ldr	r0, [pc, #12]	; (8002190 <Pointing+0x58>)
 8002184:	f001 fbf7 	bl	8003976 <HAL_UART_Transmit>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000330 	.word	0x20000330

08002194 <Good_sign>:

void Good_sign(uint8_t *tx_buffer){
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
    Set_Target(tx_buffer, CHANNEL_1, TARGET_MIN_LOW, TARGET_MIN_HIGH);
 800219c:	2308      	movs	r3, #8
 800219e:	2260      	movs	r2, #96	; 0x60
 80021a0:	2101      	movs	r1, #1
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fef4 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 80021a8:	2364      	movs	r3, #100	; 0x64
 80021aa:	2204      	movs	r2, #4
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	480f      	ldr	r0, [pc, #60]	; (80021ec <Good_sign+0x58>)
 80021b0:	f001 fbe1 	bl	8003976 <HAL_UART_Transmit>
	Set_Target(tx_buffer, CHANNEL_2, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 80021b4:	2354      	movs	r3, #84	; 0x54
 80021b6:	2230      	movs	r2, #48	; 0x30
 80021b8:	2102      	movs	r1, #2
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fee8 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 80021c0:	2364      	movs	r3, #100	; 0x64
 80021c2:	2204      	movs	r2, #4
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4809      	ldr	r0, [pc, #36]	; (80021ec <Good_sign+0x58>)
 80021c8:	f001 fbd5 	bl	8003976 <HAL_UART_Transmit>
	Set_Target(tx_buffer, CHANNEL_4, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 80021cc:	2354      	movs	r3, #84	; 0x54
 80021ce:	2230      	movs	r2, #48	; 0x30
 80021d0:	2104      	movs	r1, #4
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fedc 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 80021d8:	2364      	movs	r3, #100	; 0x64
 80021da:	2204      	movs	r2, #4
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4803      	ldr	r0, [pc, #12]	; (80021ec <Good_sign+0x58>)
 80021e0:	f001 fbc9 	bl	8003976 <HAL_UART_Transmit>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000330 	.word	0x20000330

080021f0 <Release>:
void Release(uint8_t *tx_buffer){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	Set_Target(tx_buffer, CHANNEL_0, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 80021f8:	2354      	movs	r3, #84	; 0x54
 80021fa:	2230      	movs	r2, #48	; 0x30
 80021fc:	2100      	movs	r1, #0
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff fec6 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 8002204:	2364      	movs	r3, #100	; 0x64
 8002206:	2204      	movs	r2, #4
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4815      	ldr	r0, [pc, #84]	; (8002260 <Release+0x70>)
 800220c:	f001 fbb3 	bl	8003976 <HAL_UART_Transmit>
    Set_Target(tx_buffer, CHANNEL_1, TARGET_MIN_LOW, TARGET_MIN_HIGH);
 8002210:	2308      	movs	r3, #8
 8002212:	2260      	movs	r2, #96	; 0x60
 8002214:	2101      	movs	r1, #1
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff feba 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 800221c:	2364      	movs	r3, #100	; 0x64
 800221e:	2204      	movs	r2, #4
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	480f      	ldr	r0, [pc, #60]	; (8002260 <Release+0x70>)
 8002224:	f001 fba7 	bl	8003976 <HAL_UART_Transmit>
	Set_Target(tx_buffer, CHANNEL_2, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 8002228:	2354      	movs	r3, #84	; 0x54
 800222a:	2230      	movs	r2, #48	; 0x30
 800222c:	2102      	movs	r1, #2
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff feae 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 8002234:	2364      	movs	r3, #100	; 0x64
 8002236:	2204      	movs	r2, #4
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4809      	ldr	r0, [pc, #36]	; (8002260 <Release+0x70>)
 800223c:	f001 fb9b 	bl	8003976 <HAL_UART_Transmit>
//	Set_Target(tx_buffer, CHANNEL_3, TARGET_MAX_LOW, TARGET_MAX_HIGH);
//	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
	Set_Target(tx_buffer, CHANNEL_4, TARGET_MAX_LOW, TARGET_MAX_HIGH);
 8002240:	2354      	movs	r3, #84	; 0x54
 8002242:	2230      	movs	r2, #48	; 0x30
 8002244:	2104      	movs	r1, #4
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fea2 	bl	8001f90 <Set_Target>
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, 100);
 800224c:	2364      	movs	r3, #100	; 0x64
 800224e:	2204      	movs	r2, #4
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4803      	ldr	r0, [pc, #12]	; (8002260 <Release+0x70>)
 8002254:	f001 fb8f 	bl	8003976 <HAL_UART_Transmit>
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000330 	.word	0x20000330

08002264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_Init+0x40>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <HAL_Init+0x40>)
 800226e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_Init+0x40>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_Init+0x40>)
 800227a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800227e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_Init+0x40>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228c:	2003      	movs	r0, #3
 800228e:	f000 fcbb 	bl	8002c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002292:	200f      	movs	r0, #15
 8002294:	f000 f808 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002298:	f7fe ffca 	bl	8001230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_InitTick+0x54>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_InitTick+0x58>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fcc5 	bl	8002c56 <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00e      	b.n	80022f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d80a      	bhi.n	80022f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f000 fc9b 	bl	8002c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <HAL_InitTick+0x5c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000000 	.word	0x20000000
 8002300:	2000000c 	.word	0x2000000c
 8002304:	20000008 	.word	0x20000008

08002308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	2000000c 	.word	0x2000000c
 800232c:	200005b0 	.word	0x200005b0

08002330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	200005b0 	.word	0x200005b0

08002348 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e033      	b.n	80023c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe ff8e 	bl	8001288 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d118      	bne.n	80023b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800238e:	f023 0302 	bic.w	r3, r3, #2
 8002392:	f043 0202 	orr.w	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa86 	bl	80028ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f023 0303 	bic.w	r3, r3, #3
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
 80023b6:	e001      	b.n	80023bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_Start+0x1a>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e097      	b.n	800251a <HAL_ADC_Start+0x14a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d018      	beq.n	8002432 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002410:	4b45      	ldr	r3, [pc, #276]	; (8002528 <HAL_ADC_Start+0x158>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a45      	ldr	r2, [pc, #276]	; (800252c <HAL_ADC_Start+0x15c>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0c9a      	lsrs	r2, r3, #18
 800241c:	4613      	mov	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002424:	e002      	b.n	800242c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3b01      	subs	r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f9      	bne.n	8002426 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d15f      	bne.n	8002500 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800246a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247e:	d106      	bne.n	800248e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	f023 0206 	bic.w	r2, r3, #6
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
 800248c:	e002      	b.n	8002494 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_ADC_Start+0x160>)
 800249e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10f      	bne.n	80024d6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d129      	bne.n	8002518 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e020      	b.n	8002518 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a16      	ldr	r2, [pc, #88]	; (8002534 <HAL_ADC_Start+0x164>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d11b      	bne.n	8002518 <HAL_ADC_Start+0x148>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d114      	bne.n	8002518 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	e00b      	b.n	8002518 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f043 0210 	orr.w	r2, r3, #16
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000
 800252c:	431bde83 	.word	0x431bde83
 8002530:	40012300 	.word	0x40012300
 8002534:	40012000 	.word	0x40012000

08002538 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002554:	d113      	bne.n	800257e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002564:	d10b      	bne.n	800257e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f043 0220 	orr.w	r2, r3, #32
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e063      	b.n	8002646 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800257e:	f7ff fed7 	bl	8002330 <HAL_GetTick>
 8002582:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002584:	e021      	b.n	80025ca <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d01d      	beq.n	80025ca <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <HAL_ADC_PollForConversion+0x6c>
 8002594:	f7ff fecc 	bl	8002330 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d212      	bcs.n	80025ca <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d00b      	beq.n	80025ca <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f043 0204 	orr.w	r2, r3, #4
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e03d      	b.n	8002646 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d1d6      	bne.n	8002586 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0212 	mvn.w	r2, #18
 80025e0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d123      	bne.n	8002644 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002600:	2b00      	cmp	r3, #0
 8002602:	d11f      	bne.n	8002644 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800261c:	2b00      	cmp	r3, #0
 800261e:	d111      	bne.n	8002644 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1c>
 8002680:	2302      	movs	r3, #2
 8002682:	e105      	b.n	8002890 <HAL_ADC_ConfigChannel+0x228>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b09      	cmp	r3, #9
 8002692:	d925      	bls.n	80026e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68d9      	ldr	r1, [r3, #12]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	3b1e      	subs	r3, #30
 80026aa:	2207      	movs	r2, #7
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43da      	mvns	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	400a      	ands	r2, r1
 80026b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68d9      	ldr	r1, [r3, #12]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	4603      	mov	r3, r0
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4403      	add	r3, r0
 80026d2:	3b1e      	subs	r3, #30
 80026d4:	409a      	lsls	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	e022      	b.n	8002726 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	2207      	movs	r2, #7
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	400a      	ands	r2, r1
 8002702:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6919      	ldr	r1, [r3, #16]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	4603      	mov	r3, r0
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4403      	add	r3, r0
 800271c:	409a      	lsls	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b06      	cmp	r3, #6
 800272c:	d824      	bhi.n	8002778 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	3b05      	subs	r3, #5
 8002740:	221f      	movs	r2, #31
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	400a      	ands	r2, r1
 800274e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3b05      	subs	r3, #5
 800276a:	fa00 f203 	lsl.w	r2, r0, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	e04c      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d824      	bhi.n	80027ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b23      	subs	r3, #35	; 0x23
 8002792:	221f      	movs	r2, #31
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43da      	mvns	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	400a      	ands	r2, r1
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	3b23      	subs	r3, #35	; 0x23
 80027bc:	fa00 f203 	lsl.w	r2, r0, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
 80027c8:	e023      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	3b41      	subs	r3, #65	; 0x41
 80027dc:	221f      	movs	r2, #31
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	400a      	ands	r2, r1
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4618      	mov	r0, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	3b41      	subs	r3, #65	; 0x41
 8002806:	fa00 f203 	lsl.w	r2, r0, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_ADC_ConfigChannel+0x234>)
 8002814:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <HAL_ADC_ConfigChannel+0x238>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d109      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1cc>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b12      	cmp	r3, #18
 8002826:	d105      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_ADC_ConfigChannel+0x238>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d123      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b10      	cmp	r3, #16
 8002844:	d003      	beq.n	800284e <HAL_ADC_ConfigChannel+0x1e6>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b11      	cmp	r3, #17
 800284c:	d11b      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b10      	cmp	r3, #16
 8002860:	d111      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_ADC_ConfigChannel+0x23c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <HAL_ADC_ConfigChannel+0x240>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	0c9a      	lsrs	r2, r3, #18
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002878:	e002      	b.n	8002880 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3b01      	subs	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f9      	bne.n	800287a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40012300 	.word	0x40012300
 80028a0:	40012000 	.word	0x40012000
 80028a4:	20000000 	.word	0x20000000
 80028a8:	431bde83 	.word	0x431bde83

080028ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b4:	4b79      	ldr	r3, [pc, #484]	; (8002a9c <ADC_Init+0x1f0>)
 80028b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	021a      	lsls	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6899      	ldr	r1, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <ADC_Init+0x1f4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002952:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6899      	ldr	r1, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	e00f      	b.n	80029aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0202 	bic.w	r2, r2, #2
 80029b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7e1b      	ldrb	r3, [r3, #24]
 80029c4:	005a      	lsls	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	3b01      	subs	r3, #1
 8002a04:	035a      	lsls	r2, r3, #13
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	e007      	b.n	8002a20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	051a      	lsls	r2, r3, #20
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a62:	025a      	lsls	r2, r3, #9
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6899      	ldr	r1, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	029a      	lsls	r2, r3, #10
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40012300 	.word	0x40012300
 8002aa0:	0f000001 	.word	0x0f000001

08002aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad6:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	60d3      	str	r3, [r2, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <__NVIC_GetPriorityGrouping+0x18>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0307 	and.w	r3, r3, #7
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	db0a      	blt.n	8002b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	490c      	ldr	r1, [pc, #48]	; (8002b54 <__NVIC_SetPriority+0x4c>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	0112      	lsls	r2, r2, #4
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b30:	e00a      	b.n	8002b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	4908      	ldr	r1, [pc, #32]	; (8002b58 <__NVIC_SetPriority+0x50>)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	3b04      	subs	r3, #4
 8002b40:	0112      	lsls	r2, r2, #4
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	440b      	add	r3, r1
 8002b46:	761a      	strb	r2, [r3, #24]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000e100 	.word	0xe000e100
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f1c3 0307 	rsb	r3, r3, #7
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	bf28      	it	cs
 8002b7a:	2304      	movcs	r3, #4
 8002b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2b06      	cmp	r3, #6
 8002b84:	d902      	bls.n	8002b8c <NVIC_EncodePriority+0x30>
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3b03      	subs	r3, #3
 8002b8a:	e000      	b.n	8002b8e <NVIC_EncodePriority+0x32>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	f04f 32ff 	mov.w	r2, #4294967295
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	43d9      	mvns	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	4313      	orrs	r3, r2
         );
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	; 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd4:	d301      	bcc.n	8002bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00f      	b.n	8002bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <SysTick_Config+0x40>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be2:	210f      	movs	r1, #15
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295
 8002be8:	f7ff ff8e 	bl	8002b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SysTick_Config+0x40>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <SysTick_Config+0x40>)
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	e000e010 	.word	0xe000e010

08002c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ff47 	bl	8002aa4 <__NVIC_SetPriorityGrouping>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c30:	f7ff ff5c 	bl	8002aec <__NVIC_GetPriorityGrouping>
 8002c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	6978      	ldr	r0, [r7, #20]
 8002c3c:	f7ff ff8e 	bl	8002b5c <NVIC_EncodePriority>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff5d 	bl	8002b08 <__NVIC_SetPriority>
}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff ffb0 	bl	8002bc4 <SysTick_Config>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	e159      	b.n	8002f40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f040 8148 	bne.w	8002f3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d005      	beq.n	8002cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d130      	bne.n	8002d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	2203      	movs	r2, #3
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 0201 	and.w	r2, r3, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d017      	beq.n	8002d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d123      	bne.n	8002db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	08da      	lsrs	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3208      	adds	r2, #8
 8002d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	220f      	movs	r2, #15
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	08da      	lsrs	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3208      	adds	r2, #8
 8002dae:	69b9      	ldr	r1, [r7, #24]
 8002db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0203 	and.w	r2, r3, #3
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a2 	beq.w	8002f3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b57      	ldr	r3, [pc, #348]	; (8002f58 <HAL_GPIO_Init+0x2e8>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a56      	ldr	r2, [pc, #344]	; (8002f58 <HAL_GPIO_Init+0x2e8>)
 8002e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b54      	ldr	r3, [pc, #336]	; (8002f58 <HAL_GPIO_Init+0x2e8>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_GPIO_Init+0x2ec>)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a49      	ldr	r2, [pc, #292]	; (8002f60 <HAL_GPIO_Init+0x2f0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d019      	beq.n	8002e72 <HAL_GPIO_Init+0x202>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a48      	ldr	r2, [pc, #288]	; (8002f64 <HAL_GPIO_Init+0x2f4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_GPIO_Init+0x1fe>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a47      	ldr	r2, [pc, #284]	; (8002f68 <HAL_GPIO_Init+0x2f8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00d      	beq.n	8002e6a <HAL_GPIO_Init+0x1fa>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a46      	ldr	r2, [pc, #280]	; (8002f6c <HAL_GPIO_Init+0x2fc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d007      	beq.n	8002e66 <HAL_GPIO_Init+0x1f6>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a45      	ldr	r2, [pc, #276]	; (8002f70 <HAL_GPIO_Init+0x300>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_GPIO_Init+0x1f2>
 8002e5e:	2304      	movs	r3, #4
 8002e60:	e008      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e62:	2307      	movs	r3, #7
 8002e64:	e006      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e66:	2303      	movs	r3, #3
 8002e68:	e004      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e002      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e72:	2300      	movs	r3, #0
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	f002 0203 	and.w	r2, r2, #3
 8002e7a:	0092      	lsls	r2, r2, #2
 8002e7c:	4093      	lsls	r3, r2
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e84:	4935      	ldr	r1, [pc, #212]	; (8002f5c <HAL_GPIO_Init+0x2ec>)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	089b      	lsrs	r3, r3, #2
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eb6:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee0:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ee6:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f0a:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f10:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f34:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b0f      	cmp	r3, #15
 8002f44:	f67f aea2 	bls.w	8002c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3724      	adds	r7, #36	; 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40013800 	.word	0x40013800
 8002f60:	40020000 	.word	0x40020000
 8002f64:	40020400 	.word	0x40020400
 8002f68:	40020800 	.word	0x40020800
 8002f6c:	40020c00 	.word	0x40020c00
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40013c00 	.word	0x40013c00

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f94:	e003      	b.n	8002f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e267      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d075      	beq.n	80030b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fca:	4b88      	ldr	r3, [pc, #544]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd6:	4b85      	ldr	r3, [pc, #532]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d112      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe2:	4b82      	ldr	r3, [pc, #520]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fee:	d10b      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	4b7e      	ldr	r3, [pc, #504]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d05b      	beq.n	80030b4 <HAL_RCC_OscConfig+0x108>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d157      	bne.n	80030b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e242      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d106      	bne.n	8003020 <HAL_RCC_OscConfig+0x74>
 8003012:	4b76      	ldr	r3, [pc, #472]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a75      	ldr	r2, [pc, #468]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e01d      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x98>
 800302a:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6f      	ldr	r2, [pc, #444]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b6d      	ldr	r3, [pc, #436]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6c      	ldr	r2, [pc, #432]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003044:	4b69      	ldr	r3, [pc, #420]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a68      	ldr	r2, [pc, #416]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b66      	ldr	r3, [pc, #408]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a65      	ldr	r2, [pc, #404]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff f964 	bl	8002330 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7ff f960 	bl	8002330 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e207      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0xc0>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7ff f950 	bl	8002330 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003094:	f7ff f94c 	bl	8002330 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e1f3      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0xe8>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d063      	beq.n	800318a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ce:	4b47      	ldr	r3, [pc, #284]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d11c      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b44      	ldr	r3, [pc, #272]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d116      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e1c7      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fe:	4b3b      	ldr	r3, [pc, #236]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4937      	ldr	r1, [pc, #220]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003112:	e03a      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800311c:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_RCC_OscConfig+0x244>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7ff f905 	bl	8002330 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312a:	f7ff f901 	bl	8002330 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e1a8      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b28      	ldr	r3, [pc, #160]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4925      	ldr	r1, [pc, #148]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
 800315c:	e015      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315e:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <HAL_RCC_OscConfig+0x244>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7ff f8e4 	bl	8002330 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316c:	f7ff f8e0 	bl	8002330 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e187      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d036      	beq.n	8003204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <HAL_RCC_OscConfig+0x248>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7ff f8c4 	bl	8002330 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ac:	f7ff f8c0 	bl	8002330 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e167      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80031c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x200>
 80031ca:	e01b      	b.n	8003204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_OscConfig+0x248>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d2:	f7ff f8ad 	bl	8002330 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	e00e      	b.n	80031f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031da:	f7ff f8a9 	bl	8002330 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d907      	bls.n	80031f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e150      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
 80031ec:	40023800 	.word	0x40023800
 80031f0:	42470000 	.word	0x42470000
 80031f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f8:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80031fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ea      	bne.n	80031da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 8097 	beq.w	8003340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003216:	4b81      	ldr	r3, [pc, #516]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	4b7d      	ldr	r3, [pc, #500]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a7c      	ldr	r2, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b7a      	ldr	r3, [pc, #488]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b77      	ldr	r3, [pc, #476]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d118      	bne.n	8003280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324e:	4b74      	ldr	r3, [pc, #464]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a73      	ldr	r2, [pc, #460]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325a:	f7ff f869 	bl	8002330 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7ff f865 	bl	8002330 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e10c      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x2ea>
 8003288:	4b64      	ldr	r3, [pc, #400]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a63      	ldr	r2, [pc, #396]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
 8003294:	e01c      	b.n	80032d0 <HAL_RCC_OscConfig+0x324>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b05      	cmp	r3, #5
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x30c>
 800329e:	4b5f      	ldr	r3, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a5e      	ldr	r2, [pc, #376]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a5b      	ldr	r2, [pc, #364]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0x324>
 80032b8:	4b58      	ldr	r3, [pc, #352]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	4a57      	ldr	r2, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
 80032c4:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ca:	f023 0304 	bic.w	r3, r3, #4
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7ff f82a 	bl	8002330 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f7ff f826 	bl	8002330 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e0cb      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0ee      	beq.n	80032e0 <HAL_RCC_OscConfig+0x334>
 8003302:	e014      	b.n	800332e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7ff f814 	bl	8002330 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330a:	e00a      	b.n	8003322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7ff f810 	bl	8002330 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0b5      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003322:	4b3e      	ldr	r3, [pc, #248]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1ee      	bne.n	800330c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332e:	7dfb      	ldrb	r3, [r7, #23]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	4a38      	ldr	r2, [pc, #224]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80a1 	beq.w	800348c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800334a:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b08      	cmp	r3, #8
 8003354:	d05c      	beq.n	8003410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d141      	bne.n	80033e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe ffe4 	bl	8002330 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe ffe0 	bl	8002330 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e087      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	3b01      	subs	r3, #1
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fe ffb9 	bl	8002330 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fe ffb5 	bl	8002330 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e05c      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x416>
 80033e0:	e054      	b.n	800348c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe ffa2 	bl	8002330 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe ff9e 	bl	8002330 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e045      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x444>
 800340e:	e03d      	b.n	800348c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e038      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
 800341c:	40023800 	.word	0x40023800
 8003420:	40007000 	.word	0x40007000
 8003424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x4ec>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d028      	beq.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d121      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d11a      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800345e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0cc      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b68      	ldr	r3, [pc, #416]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d90c      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b65      	ldr	r3, [pc, #404]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0b8      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f0:	4b59      	ldr	r3, [pc, #356]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a58      	ldr	r2, [pc, #352]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003508:	4b53      	ldr	r3, [pc, #332]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a52      	ldr	r2, [pc, #328]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	494d      	ldr	r1, [pc, #308]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d044      	beq.n	80035bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d119      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e07f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d003      	beq.n	800355a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003556:	2b03      	cmp	r3, #3
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e067      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4934      	ldr	r1, [pc, #208]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800358c:	f7fe fed0 	bl	8002330 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fe fecc 	bl	8002330 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e04f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d20c      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e032      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4916      	ldr	r1, [pc, #88]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	490e      	ldr	r1, [pc, #56]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003622:	f000 f821 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003626:	4602      	mov	r2, r0
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	490a      	ldr	r1, [pc, #40]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	5ccb      	ldrb	r3, [r1, r3]
 8003636:	fa22 f303 	lsr.w	r3, r2, r3
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe fe30 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023c00 	.word	0x40023c00
 8003658:	40023800 	.word	0x40023800
 800365c:	08007fe0 	.word	0x08007fe0
 8003660:	20000000 	.word	0x20000000
 8003664:	20000008 	.word	0x20000008

08003668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800366c:	b094      	sub	sp, #80	; 0x50
 800366e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
 8003674:	2300      	movs	r3, #0
 8003676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003678:	2300      	movs	r3, #0
 800367a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003680:	4b79      	ldr	r3, [pc, #484]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b08      	cmp	r3, #8
 800368a:	d00d      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x40>
 800368c:	2b08      	cmp	r3, #8
 800368e:	f200 80e1 	bhi.w	8003854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x34>
 8003696:	2b04      	cmp	r3, #4
 8003698:	d003      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800369a:	e0db      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b73      	ldr	r3, [pc, #460]	; (800386c <HAL_RCC_GetSysClockFreq+0x204>)
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036a0:	e0db      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a2:	4b73      	ldr	r3, [pc, #460]	; (8003870 <HAL_RCC_GetSysClockFreq+0x208>)
 80036a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036a6:	e0d8      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a8:	4b6f      	ldr	r3, [pc, #444]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b2:	4b6d      	ldr	r3, [pc, #436]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d063      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b6a      	ldr	r3, [pc, #424]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	2200      	movs	r2, #0
 80036c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
 80036d2:	2300      	movs	r3, #0
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
 80036d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036da:	4622      	mov	r2, r4
 80036dc:	462b      	mov	r3, r5
 80036de:	f04f 0000 	mov.w	r0, #0
 80036e2:	f04f 0100 	mov.w	r1, #0
 80036e6:	0159      	lsls	r1, r3, #5
 80036e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ec:	0150      	lsls	r0, r2, #5
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4621      	mov	r1, r4
 80036f4:	1a51      	subs	r1, r2, r1
 80036f6:	6139      	str	r1, [r7, #16]
 80036f8:	4629      	mov	r1, r5
 80036fa:	eb63 0301 	sbc.w	r3, r3, r1
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800370c:	4659      	mov	r1, fp
 800370e:	018b      	lsls	r3, r1, #6
 8003710:	4651      	mov	r1, sl
 8003712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003716:	4651      	mov	r1, sl
 8003718:	018a      	lsls	r2, r1, #6
 800371a:	4651      	mov	r1, sl
 800371c:	ebb2 0801 	subs.w	r8, r2, r1
 8003720:	4659      	mov	r1, fp
 8003722:	eb63 0901 	sbc.w	r9, r3, r1
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800373a:	4690      	mov	r8, r2
 800373c:	4699      	mov	r9, r3
 800373e:	4623      	mov	r3, r4
 8003740:	eb18 0303 	adds.w	r3, r8, r3
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	462b      	mov	r3, r5
 8003748:	eb49 0303 	adc.w	r3, r9, r3
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800375a:	4629      	mov	r1, r5
 800375c:	024b      	lsls	r3, r1, #9
 800375e:	4621      	mov	r1, r4
 8003760:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003764:	4621      	mov	r1, r4
 8003766:	024a      	lsls	r2, r1, #9
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800376e:	2200      	movs	r2, #0
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
 8003772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003778:	f7fd fa16 	bl	8000ba8 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4613      	mov	r3, r2
 8003782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003784:	e058      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003786:	4b38      	ldr	r3, [pc, #224]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	099b      	lsrs	r3, r3, #6
 800378c:	2200      	movs	r2, #0
 800378e:	4618      	mov	r0, r3
 8003790:	4611      	mov	r1, r2
 8003792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003796:	623b      	str	r3, [r7, #32]
 8003798:	2300      	movs	r3, #0
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
 800379c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	0159      	lsls	r1, r3, #5
 80037ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b2:	0150      	lsls	r0, r2, #5
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4641      	mov	r1, r8
 80037ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80037be:	4649      	mov	r1, r9
 80037c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037d8:	ebb2 040a 	subs.w	r4, r2, sl
 80037dc:	eb63 050b 	sbc.w	r5, r3, fp
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	00eb      	lsls	r3, r5, #3
 80037ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ee:	00e2      	lsls	r2, r4, #3
 80037f0:	4614      	mov	r4, r2
 80037f2:	461d      	mov	r5, r3
 80037f4:	4643      	mov	r3, r8
 80037f6:	18e3      	adds	r3, r4, r3
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	464b      	mov	r3, r9
 80037fc:	eb45 0303 	adc.w	r3, r5, r3
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800380e:	4629      	mov	r1, r5
 8003810:	028b      	lsls	r3, r1, #10
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003818:	4621      	mov	r1, r4
 800381a:	028a      	lsls	r2, r1, #10
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003822:	2200      	movs	r2, #0
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	61fa      	str	r2, [r7, #28]
 8003828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800382c:	f7fd f9bc 	bl	8000ba8 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	3301      	adds	r3, #1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800384a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003852:	e002      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetSysClockFreq+0x204>)
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800385a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800385c:	4618      	mov	r0, r3
 800385e:	3750      	adds	r7, #80	; 0x50
 8003860:	46bd      	mov	sp, r7
 8003862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800
 800386c:	00f42400 	.word	0x00f42400
 8003870:	007a1200 	.word	0x007a1200

08003874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_RCC_GetHCLKFreq+0x14>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000000 	.word	0x20000000

0800388c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003890:	f7ff fff0 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0a9b      	lsrs	r3, r3, #10
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08007ff0 	.word	0x08007ff0

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038b8:	f7ff ffdc 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0b5b      	lsrs	r3, r3, #13
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	08007ff0 	.word	0x08007ff0

080038dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e03f      	b.n	800396e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fd04 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	; 0x24
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800391e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f929 	bl	8003b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b08a      	sub	sp, #40	; 0x28
 800397a:	af02      	add	r7, sp, #8
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	d17c      	bne.n	8003a90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_UART_Transmit+0x2c>
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e075      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Transmit+0x3e>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e06e      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2221      	movs	r2, #33	; 0x21
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ca:	f7fe fcb1 	bl	8002330 <HAL_GetTick>
 80039ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d108      	bne.n	80039f8 <HAL_UART_Transmit+0x82>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e003      	b.n	8003a00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a08:	e02a      	b.n	8003a60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2180      	movs	r1, #128	; 0x80
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f840 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e036      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	e007      	b.n	8003a52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	781a      	ldrb	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1cf      	bne.n	8003a0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2140      	movs	r1, #64	; 0x40
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f810 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e006      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b090      	sub	sp, #64	; 0x40
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aaa:	e050      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d04c      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0x30>
 8003aba:	f7fe fc39 	bl	8002330 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d241      	bcs.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aea:	637a      	str	r2, [r7, #52]	; 0x34
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e5      	bne.n	8003aca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3314      	adds	r3, #20
 8003b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3314      	adds	r3, #20
 8003b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b1e:	623a      	str	r2, [r7, #32]
 8003b20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	69f9      	ldr	r1, [r7, #28]
 8003b24:	6a3a      	ldr	r2, [r7, #32]
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e5      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e00f      	b.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d09f      	beq.n	8003aac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3740      	adds	r7, #64	; 0x40
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b7c:	b0c0      	sub	sp, #256	; 0x100
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	68d9      	ldr	r1, [r3, #12]
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	ea40 0301 	orr.w	r3, r0, r1
 8003ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bd0:	f021 010c 	bic.w	r1, r1, #12
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bde:	430b      	orrs	r3, r1
 8003be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	6999      	ldr	r1, [r3, #24]
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	ea40 0301 	orr.w	r3, r0, r1
 8003bfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b8f      	ldr	r3, [pc, #572]	; (8003e44 <UART_SetConfig+0x2cc>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d005      	beq.n	8003c18 <UART_SetConfig+0xa0>
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4b8d      	ldr	r3, [pc, #564]	; (8003e48 <UART_SetConfig+0x2d0>)
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d104      	bne.n	8003c22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7ff fe4c 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8003c1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c20:	e003      	b.n	8003c2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c22:	f7ff fe33 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8003c26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c34:	f040 810c 	bne.w	8003e50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c4a:	4622      	mov	r2, r4
 8003c4c:	462b      	mov	r3, r5
 8003c4e:	1891      	adds	r1, r2, r2
 8003c50:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c52:	415b      	adcs	r3, r3
 8003c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	eb12 0801 	adds.w	r8, r2, r1
 8003c60:	4629      	mov	r1, r5
 8003c62:	eb43 0901 	adc.w	r9, r3, r1
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	4623      	mov	r3, r4
 8003c80:	eb18 0303 	adds.w	r3, r8, r3
 8003c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c88:	462b      	mov	r3, r5
 8003c8a:	eb49 0303 	adc.w	r3, r9, r3
 8003c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	18db      	adds	r3, r3, r3
 8003caa:	653b      	str	r3, [r7, #80]	; 0x50
 8003cac:	4613      	mov	r3, r2
 8003cae:	eb42 0303 	adc.w	r3, r2, r3
 8003cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003cb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cbc:	f7fc ff74 	bl	8000ba8 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	011c      	lsls	r4, r3, #4
 8003cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003cdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	1891      	adds	r1, r2, r2
 8003ce6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ce8:	415b      	adcs	r3, r3
 8003cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	eb12 0a01 	adds.w	sl, r2, r1
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	eb43 0b01 	adc.w	fp, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d10:	4692      	mov	sl, r2
 8003d12:	469b      	mov	fp, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	eb1a 0303 	adds.w	r3, sl, r3
 8003d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d1e:	464b      	mov	r3, r9
 8003d20:	eb4b 0303 	adc.w	r3, fp, r3
 8003d24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	18db      	adds	r3, r3, r3
 8003d40:	643b      	str	r3, [r7, #64]	; 0x40
 8003d42:	4613      	mov	r3, r2
 8003d44:	eb42 0303 	adc.w	r3, r2, r3
 8003d48:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d52:	f7fc ff29 	bl	8000ba8 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2264      	movs	r2, #100	; 0x64
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	1acb      	subs	r3, r1, r3
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003d74:	fba3 2302 	umull	r2, r3, r3, r2
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d80:	441c      	add	r4, r3
 8003d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d94:	4642      	mov	r2, r8
 8003d96:	464b      	mov	r3, r9
 8003d98:	1891      	adds	r1, r2, r2
 8003d9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d9c:	415b      	adcs	r3, r3
 8003d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003da4:	4641      	mov	r1, r8
 8003da6:	1851      	adds	r1, r2, r1
 8003da8:	6339      	str	r1, [r7, #48]	; 0x30
 8003daa:	4649      	mov	r1, r9
 8003dac:	414b      	adcs	r3, r1
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dbc:	4659      	mov	r1, fp
 8003dbe:	00cb      	lsls	r3, r1, #3
 8003dc0:	4651      	mov	r1, sl
 8003dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	00ca      	lsls	r2, r1, #3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dd8:	464b      	mov	r3, r9
 8003dda:	460a      	mov	r2, r1
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003df0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003df8:	460b      	mov	r3, r1
 8003dfa:	18db      	adds	r3, r3, r3
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dfe:	4613      	mov	r3, r2
 8003e00:	eb42 0303 	adc.w	r3, r2, r3
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e0e:	f7fc fecb 	bl	8000ba8 <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003e18:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	2164      	movs	r1, #100	; 0x64
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	3332      	adds	r3, #50	; 0x32
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	f003 0207 	and.w	r2, r3, #7
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4422      	add	r2, r4
 8003e3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e40:	e106      	b.n	8004050 <UART_SetConfig+0x4d8>
 8003e42:	bf00      	nop
 8003e44:	40011000 	.word	0x40011000
 8003e48:	40011400 	.word	0x40011400
 8003e4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e54:	2200      	movs	r2, #0
 8003e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e62:	4642      	mov	r2, r8
 8003e64:	464b      	mov	r3, r9
 8003e66:	1891      	adds	r1, r2, r2
 8003e68:	6239      	str	r1, [r7, #32]
 8003e6a:	415b      	adcs	r3, r3
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e72:	4641      	mov	r1, r8
 8003e74:	1854      	adds	r4, r2, r1
 8003e76:	4649      	mov	r1, r9
 8003e78:	eb43 0501 	adc.w	r5, r3, r1
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	00eb      	lsls	r3, r5, #3
 8003e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e8a:	00e2      	lsls	r2, r4, #3
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	461d      	mov	r5, r3
 8003e90:	4643      	mov	r3, r8
 8003e92:	18e3      	adds	r3, r4, r3
 8003e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e98:	464b      	mov	r3, r9
 8003e9a:	eb45 0303 	adc.w	r3, r5, r3
 8003e9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	008b      	lsls	r3, r1, #2
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec8:	4621      	mov	r1, r4
 8003eca:	008a      	lsls	r2, r1, #2
 8003ecc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ed0:	f7fc fe6a 	bl	8000ba8 <__aeabi_uldivmod>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4b60      	ldr	r3, [pc, #384]	; (800405c <UART_SetConfig+0x4e4>)
 8003eda:	fba3 2302 	umull	r2, r3, r3, r2
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	011c      	lsls	r4, r3, #4
 8003ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ef0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	1891      	adds	r1, r2, r2
 8003efa:	61b9      	str	r1, [r7, #24]
 8003efc:	415b      	adcs	r3, r3
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f04:	4641      	mov	r1, r8
 8003f06:	1851      	adds	r1, r2, r1
 8003f08:	6139      	str	r1, [r7, #16]
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	414b      	adcs	r3, r1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	00cb      	lsls	r3, r1, #3
 8003f20:	4651      	mov	r1, sl
 8003f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f26:	4651      	mov	r1, sl
 8003f28:	00ca      	lsls	r2, r1, #3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4642      	mov	r2, r8
 8003f32:	189b      	adds	r3, r3, r2
 8003f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f38:	464b      	mov	r3, r9
 8003f3a:	460a      	mov	r2, r1
 8003f3c:	eb42 0303 	adc.w	r3, r2, r3
 8003f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	008b      	lsls	r3, r1, #2
 8003f60:	4641      	mov	r1, r8
 8003f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f66:	4641      	mov	r1, r8
 8003f68:	008a      	lsls	r2, r1, #2
 8003f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f6e:	f7fc fe1b 	bl	8000ba8 <__aeabi_uldivmod>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4611      	mov	r1, r2
 8003f78:	4b38      	ldr	r3, [pc, #224]	; (800405c <UART_SetConfig+0x4e4>)
 8003f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2264      	movs	r2, #100	; 0x64
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	1acb      	subs	r3, r1, r3
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	3332      	adds	r3, #50	; 0x32
 8003f8c:	4a33      	ldr	r2, [pc, #204]	; (800405c <UART_SetConfig+0x4e4>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f98:	441c      	add	r4, r3
 8003f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	673b      	str	r3, [r7, #112]	; 0x70
 8003fa2:	677a      	str	r2, [r7, #116]	; 0x74
 8003fa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fa8:	4642      	mov	r2, r8
 8003faa:	464b      	mov	r3, r9
 8003fac:	1891      	adds	r1, r2, r2
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	415b      	adcs	r3, r3
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb8:	4641      	mov	r1, r8
 8003fba:	1851      	adds	r1, r2, r1
 8003fbc:	6039      	str	r1, [r7, #0]
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	414b      	adcs	r3, r1
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	00cb      	lsls	r3, r1, #3
 8003fd4:	4651      	mov	r1, sl
 8003fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fda:	4651      	mov	r1, sl
 8003fdc:	00ca      	lsls	r2, r1, #3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fea:	464b      	mov	r3, r9
 8003fec:	460a      	mov	r2, r1
 8003fee:	eb42 0303 	adc.w	r3, r2, r3
 8003ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ffe:	667a      	str	r2, [r7, #100]	; 0x64
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800400c:	4649      	mov	r1, r9
 800400e:	008b      	lsls	r3, r1, #2
 8004010:	4641      	mov	r1, r8
 8004012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004016:	4641      	mov	r1, r8
 8004018:	008a      	lsls	r2, r1, #2
 800401a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800401e:	f7fc fdc3 	bl	8000ba8 <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4b0d      	ldr	r3, [pc, #52]	; (800405c <UART_SetConfig+0x4e4>)
 8004028:	fba3 1302 	umull	r1, r3, r3, r2
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	2164      	movs	r1, #100	; 0x64
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	3332      	adds	r3, #50	; 0x32
 800403a:	4a08      	ldr	r2, [pc, #32]	; (800405c <UART_SetConfig+0x4e4>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	f003 020f 	and.w	r2, r3, #15
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4422      	add	r2, r4
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	bf00      	nop
 8004052:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004056:	46bd      	mov	sp, r7
 8004058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405c:	51eb851f 	.word	0x51eb851f

08004060 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f103 0208 	add.w	r2, r3, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f103 0208 	add.w	r2, r3, #8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f103 0208 	add.w	r2, r3, #8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040ba:	b480      	push	{r7}
 80040bc:	b085      	sub	sp, #20
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d103      	bne.n	8004122 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	e00c      	b.n	800413c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3308      	adds	r3, #8
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e002      	b.n	8004130 <vListInsert+0x2e>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	429a      	cmp	r2, r3
 800413a:	d2f6      	bcs.n	800412a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	601a      	str	r2, [r3, #0]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6892      	ldr	r2, [r2, #8]
 800418a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6852      	ldr	r2, [r2, #4]
 8004194:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d103      	bne.n	80041a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	1e5a      	subs	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80041f2:	f001 fc97 	bl	8005b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	68f9      	ldr	r1, [r7, #12]
 8004200:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	441a      	add	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004222:	3b01      	subs	r3, #1
 8004224:	68f9      	ldr	r1, [r7, #12]
 8004226:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	441a      	add	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	22ff      	movs	r2, #255	; 0xff
 8004236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	22ff      	movs	r2, #255	; 0xff
 800423e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d114      	bne.n	8004272 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01a      	beq.n	8004286 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3310      	adds	r3, #16
 8004254:	4618      	mov	r0, r3
 8004256:	f000 ff5b 	bl	8005110 <xTaskRemoveFromEventList>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d012      	beq.n	8004286 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <xQueueGenericReset+0xcc>)
 8004262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	e009      	b.n	8004286 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3310      	adds	r3, #16
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fef2 	bl	8004060 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3324      	adds	r3, #36	; 0x24
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff feed 	bl	8004060 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004286:	f001 fc7d 	bl	8005b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800428a:	2301      	movs	r3, #1
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	e000ed04 	.word	0xe000ed04

08004298 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	; 0x28
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	613b      	str	r3, [r7, #16]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	3348      	adds	r3, #72	; 0x48
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 fd09 	bl	8005ce8 <pvPortMalloc>
 80042d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d011      	beq.n	8004302 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	3348      	adds	r3, #72	; 0x48
 80042e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042f0:	79fa      	ldrb	r2, [r7, #7]
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f805 	bl	800430c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004302:	69bb      	ldr	r3, [r7, #24]
	}
 8004304:	4618      	mov	r0, r3
 8004306:	3720      	adds	r7, #32
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	e002      	b.n	800432e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800433a:	2101      	movs	r1, #1
 800433c:	69b8      	ldr	r0, [r7, #24]
 800433e:	f7ff ff43 	bl	80041c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08e      	sub	sp, #56	; 0x38
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800435a:	2300      	movs	r3, #0
 800435c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <xQueueGenericSend+0x32>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d103      	bne.n	800438c <xQueueGenericSend+0x40>
 8004384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <xQueueGenericSend+0x44>
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <xQueueGenericSend+0x46>
 8004390:	2300      	movs	r3, #0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <xQueueGenericSend+0x60>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d103      	bne.n	80043ba <xQueueGenericSend+0x6e>
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <xQueueGenericSend+0x72>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <xQueueGenericSend+0x74>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <xQueueGenericSend+0x8e>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	623b      	str	r3, [r7, #32]
}
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043da:	f001 f855 	bl	8005488 <xTaskGetSchedulerState>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <xQueueGenericSend+0x9e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <xQueueGenericSend+0xa2>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <xQueueGenericSend+0xa4>
 80043ee:	2300      	movs	r3, #0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <xQueueGenericSend+0xbe>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	61fb      	str	r3, [r7, #28]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800440a:	f001 fb8b 	bl	8005b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <xQueueGenericSend+0xd4>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d129      	bne.n	8004474 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004426:	f000 f9b3 	bl	8004790 <prvCopyDataToQueue>
 800442a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	3324      	adds	r3, #36	; 0x24
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fe69 	bl	8005110 <xTaskRemoveFromEventList>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d013      	beq.n	800446c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004444:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <xQueueGenericSend+0x1f8>)
 8004446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	e00a      	b.n	800446c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800445c:	4b39      	ldr	r3, [pc, #228]	; (8004544 <xQueueGenericSend+0x1f8>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800446c:	f001 fb8a 	bl	8005b84 <vPortExitCritical>
				return pdPASS;
 8004470:	2301      	movs	r3, #1
 8004472:	e063      	b.n	800453c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800447a:	f001 fb83 	bl	8005b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800447e:	2300      	movs	r3, #0
 8004480:	e05c      	b.n	800453c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fea1 	bl	80051d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004492:	2301      	movs	r3, #1
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004496:	f001 fb75 	bl	8005b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800449a:	f000 fc57 	bl	8004d4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800449e:	f001 fb41 	bl	8005b24 <vPortEnterCritical>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ae:	d103      	bne.n	80044b8 <xQueueGenericSend+0x16c>
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044be:	b25b      	sxtb	r3, r3
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d103      	bne.n	80044ce <xQueueGenericSend+0x182>
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ce:	f001 fb59 	bl	8005b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044d2:	1d3a      	adds	r2, r7, #4
 80044d4:	f107 0314 	add.w	r3, r7, #20
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fe90 	bl	8005200 <xTaskCheckForTimeOut>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d124      	bne.n	8004530 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044e8:	f000 fa24 	bl	8004934 <prvIsQueueFull>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d018      	beq.n	8004524 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	3310      	adds	r3, #16
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fde4 	bl	80050c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004502:	f000 f9af 	bl	8004864 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004506:	f000 fc2f 	bl	8004d68 <xTaskResumeAll>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	f47f af7c 	bne.w	800440a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <xQueueGenericSend+0x1f8>)
 8004514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	e772      	b.n	800440a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004526:	f000 f99d 	bl	8004864 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800452a:	f000 fc1d 	bl	8004d68 <xTaskResumeAll>
 800452e:	e76c      	b.n	800440a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004532:	f000 f997 	bl	8004864 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004536:	f000 fc17 	bl	8004d68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800453a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800453c:	4618      	mov	r0, r3
 800453e:	3738      	adds	r7, #56	; 0x38
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08e      	sub	sp, #56	; 0x38
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004552:	2300      	movs	r3, #0
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800455a:	2300      	movs	r3, #0
 800455c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	623b      	str	r3, [r7, #32]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	61fb      	str	r3, [r7, #28]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004598:	f000 ff76 	bl	8005488 <xTaskGetSchedulerState>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <xQueueSemaphoreTake+0x60>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <xQueueSemaphoreTake+0x64>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <xQueueSemaphoreTake+0x66>
 80045ac:	2300      	movs	r3, #0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	61bb      	str	r3, [r7, #24]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045c8:	f001 faac 	bl	8005b24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d024      	beq.n	8004622 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	1e5a      	subs	r2, r3, #1
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80045e8:	f001 f8f6 	bl	80057d8 <pvTaskIncrementMutexHeldCount>
 80045ec:	4602      	mov	r2, r0
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00f      	beq.n	800461a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	3310      	adds	r3, #16
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fd86 	bl	8005110 <xTaskRemoveFromEventList>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800460a:	4b54      	ldr	r3, [pc, #336]	; (800475c <xQueueSemaphoreTake+0x214>)
 800460c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800461a:	f001 fab3 	bl	8005b84 <vPortExitCritical>
				return pdPASS;
 800461e:	2301      	movs	r3, #1
 8004620:	e097      	b.n	8004752 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d111      	bne.n	800464c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	617b      	str	r3, [r7, #20]
}
 8004640:	bf00      	nop
 8004642:	e7fe      	b.n	8004642 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004644:	f001 fa9e 	bl	8005b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004648:	2300      	movs	r3, #0
 800464a:	e082      	b.n	8004752 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004652:	f107 030c 	add.w	r3, r7, #12
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fdbc 	bl	80051d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800465c:	2301      	movs	r3, #1
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004660:	f001 fa90 	bl	8005b84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004664:	f000 fb72 	bl	8004d4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004668:	f001 fa5c 	bl	8005b24 <vPortEnterCritical>
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004672:	b25b      	sxtb	r3, r3
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d103      	bne.n	8004682 <xQueueSemaphoreTake+0x13a>
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004688:	b25b      	sxtb	r3, r3
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d103      	bne.n	8004698 <xQueueSemaphoreTake+0x150>
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004698:	f001 fa74 	bl	8005b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800469c:	463a      	mov	r2, r7
 800469e:	f107 030c 	add.w	r3, r7, #12
 80046a2:	4611      	mov	r1, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fdab 	bl	8005200 <xTaskCheckForTimeOut>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d132      	bne.n	8004716 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046b2:	f000 f929 	bl	8004908 <prvIsQueueEmpty>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d026      	beq.n	800470a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80046c4:	f001 fa2e 	bl	8005b24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fef9 	bl	80054c4 <xTaskPriorityInherit>
 80046d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80046d4:	f001 fa56 	bl	8005b84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	3324      	adds	r3, #36	; 0x24
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	4611      	mov	r1, r2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fcf1 	bl	80050c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046e8:	f000 f8bc 	bl	8004864 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046ec:	f000 fb3c 	bl	8004d68 <xTaskResumeAll>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f47f af68 	bne.w	80045c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <xQueueSemaphoreTake+0x214>)
 80046fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	e75e      	b.n	80045c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800470a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800470c:	f000 f8aa 	bl	8004864 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004710:	f000 fb2a 	bl	8004d68 <xTaskResumeAll>
 8004714:	e758      	b.n	80045c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004718:	f000 f8a4 	bl	8004864 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800471c:	f000 fb24 	bl	8004d68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004720:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004722:	f000 f8f1 	bl	8004908 <prvIsQueueEmpty>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	f43f af4d 	beq.w	80045c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00d      	beq.n	8004750 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004734:	f001 f9f6 	bl	8005b24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800473a:	f000 f811 	bl	8004760 <prvGetDisinheritPriorityAfterTimeout>
 800473e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004746:	4618      	mov	r0, r3
 8004748:	f000 ffb8 	bl	80056bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800474c:	f001 fa1a 	bl	8005b84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004750:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004752:	4618      	mov	r0, r3
 8004754:	3738      	adds	r7, #56	; 0x38
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	e000ed04 	.word	0xe000ed04

08004760 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f1c3 0307 	rsb	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e001      	b.n	8004782 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004782:	68fb      	ldr	r3, [r7, #12]
	}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d14d      	bne.n	8004852 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fef8 	bl	80055b0 <xTaskPriorityDisinherit>
 80047c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	e043      	b.n	8004852 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d119      	bne.n	8004804 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6858      	ldr	r0, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	461a      	mov	r2, r3
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	f003 fbd6 	bl	8007f8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	441a      	add	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d32b      	bcc.n	8004852 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	e026      	b.n	8004852 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68d8      	ldr	r0, [r3, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	461a      	mov	r2, r3
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	f003 fbbc 	bl	8007f8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	425b      	negs	r3, r3
 800481e:	441a      	add	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d207      	bcs.n	8004840 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	425b      	negs	r3, r3
 800483a:	441a      	add	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d105      	bne.n	8004852 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	3b01      	subs	r3, #1
 8004850:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800485a:	697b      	ldr	r3, [r7, #20]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800486c:	f001 f95a 	bl	8005b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004876:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004878:	e011      	b.n	800489e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d012      	beq.n	80048a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3324      	adds	r3, #36	; 0x24
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fc42 	bl	8005110 <xTaskRemoveFromEventList>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004892:	f000 fd17 	bl	80052c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	3b01      	subs	r3, #1
 800489a:	b2db      	uxtb	r3, r3
 800489c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800489e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	dce9      	bgt.n	800487a <prvUnlockQueue+0x16>
 80048a6:	e000      	b.n	80048aa <prvUnlockQueue+0x46>
					break;
 80048a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	22ff      	movs	r2, #255	; 0xff
 80048ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048b2:	f001 f967 	bl	8005b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048b6:	f001 f935 	bl	8005b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048c2:	e011      	b.n	80048e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d012      	beq.n	80048f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3310      	adds	r3, #16
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fc1d 	bl	8005110 <xTaskRemoveFromEventList>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048dc:	f000 fcf2 	bl	80052c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048e0:	7bbb      	ldrb	r3, [r7, #14]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	dce9      	bgt.n	80048c4 <prvUnlockQueue+0x60>
 80048f0:	e000      	b.n	80048f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	22ff      	movs	r2, #255	; 0xff
 80048f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048fc:	f001 f942 	bl	8005b84 <vPortExitCritical>
}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004910:	f001 f908 	bl	8005b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	2b00      	cmp	r3, #0
 800491a:	d102      	bne.n	8004922 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800491c:	2301      	movs	r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	e001      	b.n	8004926 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004926:	f001 f92d 	bl	8005b84 <vPortExitCritical>

	return xReturn;
 800492a:	68fb      	ldr	r3, [r7, #12]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800493c:	f001 f8f2 	bl	8005b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004948:	429a      	cmp	r2, r3
 800494a:	d102      	bne.n	8004952 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	e001      	b.n	8004956 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004956:	f001 f915 	bl	8005b84 <vPortExitCritical>

	return xReturn;
 800495a:	68fb      	ldr	r3, [r7, #12]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08e      	sub	sp, #56	; 0x38
 8004968:	af04      	add	r7, sp, #16
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	623b      	str	r3, [r7, #32]
}
 800498a:	bf00      	nop
 800498c:	e7fe      	b.n	800498c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <xTaskCreateStatic+0x46>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	61fb      	str	r3, [r7, #28]
}
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049aa:	2354      	movs	r3, #84	; 0x54
 80049ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b54      	cmp	r3, #84	; 0x54
 80049b2:	d00a      	beq.n	80049ca <xTaskCreateStatic+0x66>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	61bb      	str	r3, [r7, #24]
}
 80049c6:	bf00      	nop
 80049c8:	e7fe      	b.n	80049c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01e      	beq.n	8004a10 <xTaskCreateStatic+0xac>
 80049d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01b      	beq.n	8004a10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049ea:	2300      	movs	r3, #0
 80049ec:	9303      	str	r3, [sp, #12]
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	9302      	str	r3, [sp, #8]
 80049f2:	f107 0314 	add.w	r3, r7, #20
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f850 	bl	8004aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a0a:	f000 f8d5 	bl	8004bb8 <prvAddNewTaskToReadyList>
 8004a0e:	e001      	b.n	8004a14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a14:	697b      	ldr	r3, [r7, #20]
	}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3728      	adds	r7, #40	; 0x28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b08c      	sub	sp, #48	; 0x30
 8004a22:	af04      	add	r7, sp, #16
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 f958 	bl	8005ce8 <pvPortMalloc>
 8004a38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00e      	beq.n	8004a5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a40:	2054      	movs	r0, #84	; 0x54
 8004a42:	f001 f951 	bl	8005ce8 <pvPortMalloc>
 8004a46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
 8004a54:	e005      	b.n	8004a62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a56:	6978      	ldr	r0, [r7, #20]
 8004a58:	f001 fa12 	bl	8005e80 <vPortFree>
 8004a5c:	e001      	b.n	8004a62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d017      	beq.n	8004a98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	2300      	movs	r3, #0
 8004a74:	9303      	str	r3, [sp, #12]
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	9302      	str	r3, [sp, #8]
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	9301      	str	r3, [sp, #4]
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f80e 	bl	8004aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a8c:	69f8      	ldr	r0, [r7, #28]
 8004a8e:	f000 f893 	bl	8004bb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a92:	2301      	movs	r3, #1
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	e002      	b.n	8004a9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a98:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
	}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f023 0307 	bic.w	r3, r3, #7
 8004ace:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	617b      	str	r3, [r7, #20]
}
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01f      	beq.n	8004b36 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	e012      	b.n	8004b22 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	7819      	ldrb	r1, [r3, #0]
 8004b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	3334      	adds	r3, #52	; 0x34
 8004b0c:	460a      	mov	r2, r1
 8004b0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d006      	beq.n	8004b2a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	2b0f      	cmp	r3, #15
 8004b26:	d9e9      	bls.n	8004afc <prvInitialiseNewTask+0x54>
 8004b28:	e000      	b.n	8004b2c <prvInitialiseNewTask+0x84>
			{
				break;
 8004b2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b34:	e003      	b.n	8004b3e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b40:	2b06      	cmp	r3, #6
 8004b42:	d901      	bls.n	8004b48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b44:	2306      	movs	r3, #6
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	2200      	movs	r2, #0
 8004b58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fa9e 	bl	80040a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	3318      	adds	r3, #24
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fa99 	bl	80040a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	f1c3 0207 	rsb	r2, r3, #7
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	2200      	movs	r2, #0
 8004b88:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	68f9      	ldr	r1, [r7, #12]
 8004b96:	69b8      	ldr	r0, [r7, #24]
 8004b98:	f000 fe98 	bl	80058cc <pxPortInitialiseStack>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bae:	bf00      	nop
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004bc0:	f000 ffb0 	bl	8005b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004bc4:	4b2a      	ldr	r3, [pc, #168]	; (8004c70 <prvAddNewTaskToReadyList+0xb8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	4a29      	ldr	r2, [pc, #164]	; (8004c70 <prvAddNewTaskToReadyList+0xb8>)
 8004bcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004bce:	4b29      	ldr	r3, [pc, #164]	; (8004c74 <prvAddNewTaskToReadyList+0xbc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bd6:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <prvAddNewTaskToReadyList+0xbc>)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bdc:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <prvAddNewTaskToReadyList+0xb8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d110      	bne.n	8004c06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004be4:	f000 fb92 	bl	800530c <prvInitialiseTaskLists>
 8004be8:	e00d      	b.n	8004c06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bea:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <prvAddNewTaskToReadyList+0xc0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bf2:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <prvAddNewTaskToReadyList+0xbc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d802      	bhi.n	8004c06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c00:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <prvAddNewTaskToReadyList+0xbc>)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c06:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <prvAddNewTaskToReadyList+0xc4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <prvAddNewTaskToReadyList+0xc4>)
 8004c0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	2201      	movs	r2, #1
 8004c16:	409a      	lsls	r2, r3
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <prvAddNewTaskToReadyList+0xc8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <prvAddNewTaskToReadyList+0xc8>)
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4a15      	ldr	r2, [pc, #84]	; (8004c84 <prvAddNewTaskToReadyList+0xcc>)
 8004c30:	441a      	add	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f7ff fa3e 	bl	80040ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c3e:	f000 ffa1 	bl	8005b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <prvAddNewTaskToReadyList+0xc0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00e      	beq.n	8004c68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <prvAddNewTaskToReadyList+0xbc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d207      	bcs.n	8004c68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <prvAddNewTaskToReadyList+0xd0>)
 8004c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	200006b4 	.word	0x200006b4
 8004c74:	200005b4 	.word	0x200005b4
 8004c78:	200006c0 	.word	0x200006c0
 8004c7c:	200006d0 	.word	0x200006d0
 8004c80:	200006bc 	.word	0x200006bc
 8004c84:	200005b8 	.word	0x200005b8
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	; 0x28
 8004c90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c9a:	463a      	mov	r2, r7
 8004c9c:	1d39      	adds	r1, r7, #4
 8004c9e:	f107 0308 	add.w	r3, r7, #8
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fc f8fe 	bl	8000ea4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	9202      	str	r2, [sp, #8]
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	460a      	mov	r2, r1
 8004cba:	491e      	ldr	r1, [pc, #120]	; (8004d34 <vTaskStartScheduler+0xa8>)
 8004cbc:	481e      	ldr	r0, [pc, #120]	; (8004d38 <vTaskStartScheduler+0xac>)
 8004cbe:	f7ff fe51 	bl	8004964 <xTaskCreateStatic>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4a1d      	ldr	r2, [pc, #116]	; (8004d3c <vTaskStartScheduler+0xb0>)
 8004cc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cc8:	4b1c      	ldr	r3, [pc, #112]	; (8004d3c <vTaskStartScheduler+0xb0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	e001      	b.n	8004cda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d116      	bne.n	8004d0e <vTaskStartScheduler+0x82>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	613b      	str	r3, [r7, #16]
}
 8004cf2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cf4:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <vTaskStartScheduler+0xb4>)
 8004cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cfc:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <vTaskStartScheduler+0xb8>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d02:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <vTaskStartScheduler+0xbc>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d08:	f000 fe6a 	bl	80059e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d0c:	e00e      	b.n	8004d2c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d10a      	bne.n	8004d2c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	60fb      	str	r3, [r7, #12]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <vTaskStartScheduler+0x9e>
}
 8004d2c:	bf00      	nop
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	08007fd8 	.word	0x08007fd8
 8004d38:	080052dd 	.word	0x080052dd
 8004d3c:	200006d8 	.word	0x200006d8
 8004d40:	200006d4 	.word	0x200006d4
 8004d44:	200006c0 	.word	0x200006c0
 8004d48:	200006b8 	.word	0x200006b8

08004d4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <vTaskSuspendAll+0x18>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	4a03      	ldr	r2, [pc, #12]	; (8004d64 <vTaskSuspendAll+0x18>)
 8004d58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d5a:	bf00      	nop
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	200006dc 	.word	0x200006dc

08004d68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d76:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <xTaskResumeAll+0x114>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	603b      	str	r3, [r7, #0]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d94:	f000 fec6 	bl	8005b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d98:	4b38      	ldr	r3, [pc, #224]	; (8004e7c <xTaskResumeAll+0x114>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	4a37      	ldr	r2, [pc, #220]	; (8004e7c <xTaskResumeAll+0x114>)
 8004da0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004da2:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <xTaskResumeAll+0x114>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d161      	bne.n	8004e6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004daa:	4b35      	ldr	r3, [pc, #212]	; (8004e80 <xTaskResumeAll+0x118>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d05d      	beq.n	8004e6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004db2:	e02e      	b.n	8004e12 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004db4:	4b33      	ldr	r3, [pc, #204]	; (8004e84 <xTaskResumeAll+0x11c>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3318      	adds	r3, #24
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff f9d7 	bl	8004174 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff f9d2 	bl	8004174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <xTaskResumeAll+0x120>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <xTaskResumeAll+0x120>)
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <xTaskResumeAll+0x124>)
 8004df0:	441a      	add	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f7ff f95e 	bl	80040ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e02:	4b23      	ldr	r3, [pc, #140]	; (8004e90 <xTaskResumeAll+0x128>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004e0c:	4b21      	ldr	r3, [pc, #132]	; (8004e94 <xTaskResumeAll+0x12c>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <xTaskResumeAll+0x11c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1cc      	bne.n	8004db4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e20:	f000 fb12 	bl	8005448 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e24:	4b1c      	ldr	r3, [pc, #112]	; (8004e98 <xTaskResumeAll+0x130>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d010      	beq.n	8004e52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e30:	f000 f836 	bl	8004ea0 <xTaskIncrementTick>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004e3a:	4b16      	ldr	r3, [pc, #88]	; (8004e94 <xTaskResumeAll+0x12c>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f1      	bne.n	8004e30 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <xTaskResumeAll+0x130>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e52:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <xTaskResumeAll+0x12c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e5e:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <xTaskResumeAll+0x134>)
 8004e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e6e:	f000 fe89 	bl	8005b84 <vPortExitCritical>

	return xAlreadyYielded;
 8004e72:	68bb      	ldr	r3, [r7, #8]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	200006dc 	.word	0x200006dc
 8004e80:	200006b4 	.word	0x200006b4
 8004e84:	20000674 	.word	0x20000674
 8004e88:	200006bc 	.word	0x200006bc
 8004e8c:	200005b8 	.word	0x200005b8
 8004e90:	200005b4 	.word	0x200005b4
 8004e94:	200006c8 	.word	0x200006c8
 8004e98:	200006c4 	.word	0x200006c4
 8004e9c:	e000ed04 	.word	0xe000ed04

08004ea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eaa:	4b4e      	ldr	r3, [pc, #312]	; (8004fe4 <xTaskIncrementTick+0x144>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f040 808e 	bne.w	8004fd0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004eb4:	4b4c      	ldr	r3, [pc, #304]	; (8004fe8 <xTaskIncrementTick+0x148>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ebc:	4a4a      	ldr	r2, [pc, #296]	; (8004fe8 <xTaskIncrementTick+0x148>)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d120      	bne.n	8004f0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ec8:	4b48      	ldr	r3, [pc, #288]	; (8004fec <xTaskIncrementTick+0x14c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	603b      	str	r3, [r7, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	e7fe      	b.n	8004ee6 <xTaskIncrementTick+0x46>
 8004ee8:	4b40      	ldr	r3, [pc, #256]	; (8004fec <xTaskIncrementTick+0x14c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	4b40      	ldr	r3, [pc, #256]	; (8004ff0 <xTaskIncrementTick+0x150>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a3e      	ldr	r2, [pc, #248]	; (8004fec <xTaskIncrementTick+0x14c>)
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	4a3e      	ldr	r2, [pc, #248]	; (8004ff0 <xTaskIncrementTick+0x150>)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b3d      	ldr	r3, [pc, #244]	; (8004ff4 <xTaskIncrementTick+0x154>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3301      	adds	r3, #1
 8004f02:	4a3c      	ldr	r2, [pc, #240]	; (8004ff4 <xTaskIncrementTick+0x154>)
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	f000 fa9f 	bl	8005448 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f0a:	4b3b      	ldr	r3, [pc, #236]	; (8004ff8 <xTaskIncrementTick+0x158>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d348      	bcc.n	8004fa6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f14:	4b35      	ldr	r3, [pc, #212]	; (8004fec <xTaskIncrementTick+0x14c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d104      	bne.n	8004f28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1e:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <xTaskIncrementTick+0x158>)
 8004f20:	f04f 32ff 	mov.w	r2, #4294967295
 8004f24:	601a      	str	r2, [r3, #0]
					break;
 8004f26:	e03e      	b.n	8004fa6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f28:	4b30      	ldr	r3, [pc, #192]	; (8004fec <xTaskIncrementTick+0x14c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d203      	bcs.n	8004f48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f40:	4a2d      	ldr	r2, [pc, #180]	; (8004ff8 <xTaskIncrementTick+0x158>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f46:	e02e      	b.n	8004fa6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff f911 	bl	8004174 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d004      	beq.n	8004f64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	3318      	adds	r3, #24
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff f908 	bl	8004174 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	2201      	movs	r2, #1
 8004f6a:	409a      	lsls	r2, r3
 8004f6c:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <xTaskIncrementTick+0x15c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	4a22      	ldr	r2, [pc, #136]	; (8004ffc <xTaskIncrementTick+0x15c>)
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4a1f      	ldr	r2, [pc, #124]	; (8005000 <xTaskIncrementTick+0x160>)
 8004f84:	441a      	add	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f7ff f894 	bl	80040ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f96:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <xTaskIncrementTick+0x164>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d3b9      	bcc.n	8004f14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fa4:	e7b6      	b.n	8004f14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fa6:	4b17      	ldr	r3, [pc, #92]	; (8005004 <xTaskIncrementTick+0x164>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fac:	4914      	ldr	r1, [pc, #80]	; (8005000 <xTaskIncrementTick+0x160>)
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d901      	bls.n	8004fc2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004fc2:	4b11      	ldr	r3, [pc, #68]	; (8005008 <xTaskIncrementTick+0x168>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e004      	b.n	8004fda <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fd0:	4b0e      	ldr	r3, [pc, #56]	; (800500c <xTaskIncrementTick+0x16c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	4a0d      	ldr	r2, [pc, #52]	; (800500c <xTaskIncrementTick+0x16c>)
 8004fd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fda:	697b      	ldr	r3, [r7, #20]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	200006dc 	.word	0x200006dc
 8004fe8:	200006b8 	.word	0x200006b8
 8004fec:	2000066c 	.word	0x2000066c
 8004ff0:	20000670 	.word	0x20000670
 8004ff4:	200006cc 	.word	0x200006cc
 8004ff8:	200006d4 	.word	0x200006d4
 8004ffc:	200006bc 	.word	0x200006bc
 8005000:	200005b8 	.word	0x200005b8
 8005004:	200005b4 	.word	0x200005b4
 8005008:	200006c8 	.word	0x200006c8
 800500c:	200006c4 	.word	0x200006c4

08005010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005016:	4b27      	ldr	r3, [pc, #156]	; (80050b4 <vTaskSwitchContext+0xa4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800501e:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <vTaskSwitchContext+0xa8>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005024:	e03f      	b.n	80050a6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005026:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <vTaskSwitchContext+0xa8>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800502c:	4b23      	ldr	r3, [pc, #140]	; (80050bc <vTaskSwitchContext+0xac>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	fab3 f383 	clz	r3, r3
 8005038:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800503a:	7afb      	ldrb	r3, [r7, #11]
 800503c:	f1c3 031f 	rsb	r3, r3, #31
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	491f      	ldr	r1, [pc, #124]	; (80050c0 <vTaskSwitchContext+0xb0>)
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	607b      	str	r3, [r7, #4]
}
 8005068:	bf00      	nop
 800506a:	e7fe      	b.n	800506a <vTaskSwitchContext+0x5a>
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4a12      	ldr	r2, [pc, #72]	; (80050c0 <vTaskSwitchContext+0xb0>)
 8005078:	4413      	add	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	3308      	adds	r3, #8
 800508e:	429a      	cmp	r2, r3
 8005090:	d104      	bne.n	800509c <vTaskSwitchContext+0x8c>
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	605a      	str	r2, [r3, #4]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <vTaskSwitchContext+0xb4>)
 80050a4:	6013      	str	r3, [r2, #0]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	200006dc 	.word	0x200006dc
 80050b8:	200006c8 	.word	0x200006c8
 80050bc:	200006bc 	.word	0x200006bc
 80050c0:	200005b8 	.word	0x200005b8
 80050c4:	200005b4 	.word	0x200005b4

080050c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	60fb      	str	r3, [r7, #12]
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <vTaskPlaceOnEventList+0x44>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3318      	adds	r3, #24
 80050f4:	4619      	mov	r1, r3
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff f803 	bl	8004102 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050fc:	2101      	movs	r1, #1
 80050fe:	6838      	ldr	r0, [r7, #0]
 8005100:	f000 fb7e 	bl	8005800 <prvAddCurrentTaskToDelayedList>
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	200005b4 	.word	0x200005b4

08005110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	3318      	adds	r3, #24
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff f817 	bl	8004174 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005146:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <xTaskRemoveFromEventList+0xac>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d11c      	bne.n	8005188 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	3304      	adds	r3, #4
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff f80e 	bl	8004174 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	2201      	movs	r2, #1
 800515e:	409a      	lsls	r2, r3
 8005160:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <xTaskRemoveFromEventList+0xb0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4313      	orrs	r3, r2
 8005166:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <xTaskRemoveFromEventList+0xb0>)
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <xTaskRemoveFromEventList+0xb4>)
 8005178:	441a      	add	r2, r3
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7fe ff9a 	bl	80040ba <vListInsertEnd>
 8005186:	e005      	b.n	8005194 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	3318      	adds	r3, #24
 800518c:	4619      	mov	r1, r3
 800518e:	480e      	ldr	r0, [pc, #56]	; (80051c8 <xTaskRemoveFromEventList+0xb8>)
 8005190:	f7fe ff93 	bl	80040ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <xTaskRemoveFromEventList+0xbc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	429a      	cmp	r2, r3
 80051a0:	d905      	bls.n	80051ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051a2:	2301      	movs	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <xTaskRemoveFromEventList+0xc0>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	e001      	b.n	80051b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051b2:	697b      	ldr	r3, [r7, #20]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	200006dc 	.word	0x200006dc
 80051c0:	200006bc 	.word	0x200006bc
 80051c4:	200005b8 	.word	0x200005b8
 80051c8:	20000674 	.word	0x20000674
 80051cc:	200005b4 	.word	0x200005b4
 80051d0:	200006c8 	.word	0x200006c8

080051d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <vTaskInternalSetTimeOutState+0x24>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <vTaskInternalSetTimeOutState+0x28>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	605a      	str	r2, [r3, #4]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	200006cc 	.word	0x200006cc
 80051fc:	200006b8 	.word	0x200006b8

08005200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	613b      	str	r3, [r7, #16]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	60fb      	str	r3, [r7, #12]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005242:	f000 fc6f 	bl	8005b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <xTaskCheckForTimeOut+0xbc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d102      	bne.n	8005266 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	e023      	b.n	80052ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <xTaskCheckForTimeOut+0xc0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d007      	beq.n	8005282 <xTaskCheckForTimeOut+0x82>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	429a      	cmp	r2, r3
 800527a:	d302      	bcc.n	8005282 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e015      	b.n	80052ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	429a      	cmp	r2, r3
 800528a:	d20b      	bcs.n	80052a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	1ad2      	subs	r2, r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ff9b 	bl	80051d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e004      	b.n	80052ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052aa:	2301      	movs	r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052ae:	f000 fc69 	bl	8005b84 <vPortExitCritical>

	return xReturn;
 80052b2:	69fb      	ldr	r3, [r7, #28]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	200006b8 	.word	0x200006b8
 80052c0:	200006cc 	.word	0x200006cc

080052c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052c8:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <vTaskMissedYield+0x14>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	200006c8 	.word	0x200006c8

080052dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052e4:	f000 f852 	bl	800538c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052e8:	4b06      	ldr	r3, [pc, #24]	; (8005304 <prvIdleTask+0x28>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d9f9      	bls.n	80052e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <prvIdleTask+0x2c>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005300:	e7f0      	b.n	80052e4 <prvIdleTask+0x8>
 8005302:	bf00      	nop
 8005304:	200005b8 	.word	0x200005b8
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005312:	2300      	movs	r3, #0
 8005314:	607b      	str	r3, [r7, #4]
 8005316:	e00c      	b.n	8005332 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4a12      	ldr	r2, [pc, #72]	; (800536c <prvInitialiseTaskLists+0x60>)
 8005324:	4413      	add	r3, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fe9a 	bl	8004060 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3301      	adds	r3, #1
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b06      	cmp	r3, #6
 8005336:	d9ef      	bls.n	8005318 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005338:	480d      	ldr	r0, [pc, #52]	; (8005370 <prvInitialiseTaskLists+0x64>)
 800533a:	f7fe fe91 	bl	8004060 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800533e:	480d      	ldr	r0, [pc, #52]	; (8005374 <prvInitialiseTaskLists+0x68>)
 8005340:	f7fe fe8e 	bl	8004060 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005344:	480c      	ldr	r0, [pc, #48]	; (8005378 <prvInitialiseTaskLists+0x6c>)
 8005346:	f7fe fe8b 	bl	8004060 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800534a:	480c      	ldr	r0, [pc, #48]	; (800537c <prvInitialiseTaskLists+0x70>)
 800534c:	f7fe fe88 	bl	8004060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005350:	480b      	ldr	r0, [pc, #44]	; (8005380 <prvInitialiseTaskLists+0x74>)
 8005352:	f7fe fe85 	bl	8004060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <prvInitialiseTaskLists+0x78>)
 8005358:	4a05      	ldr	r2, [pc, #20]	; (8005370 <prvInitialiseTaskLists+0x64>)
 800535a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <prvInitialiseTaskLists+0x7c>)
 800535e:	4a05      	ldr	r2, [pc, #20]	; (8005374 <prvInitialiseTaskLists+0x68>)
 8005360:	601a      	str	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	200005b8 	.word	0x200005b8
 8005370:	20000644 	.word	0x20000644
 8005374:	20000658 	.word	0x20000658
 8005378:	20000674 	.word	0x20000674
 800537c:	20000688 	.word	0x20000688
 8005380:	200006a0 	.word	0x200006a0
 8005384:	2000066c 	.word	0x2000066c
 8005388:	20000670 	.word	0x20000670

0800538c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005392:	e019      	b.n	80053c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005394:	f000 fbc6 	bl	8005b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005398:	4b10      	ldr	r3, [pc, #64]	; (80053dc <prvCheckTasksWaitingTermination+0x50>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fe fee5 	bl	8004174 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <prvCheckTasksWaitingTermination+0x54>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	4a0b      	ldr	r2, [pc, #44]	; (80053e0 <prvCheckTasksWaitingTermination+0x54>)
 80053b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <prvCheckTasksWaitingTermination+0x58>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	4a0a      	ldr	r2, [pc, #40]	; (80053e4 <prvCheckTasksWaitingTermination+0x58>)
 80053bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053be:	f000 fbe1 	bl	8005b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f810 	bl	80053e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <prvCheckTasksWaitingTermination+0x58>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e1      	bne.n	8005394 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000688 	.word	0x20000688
 80053e0:	200006b4 	.word	0x200006b4
 80053e4:	2000069c 	.word	0x2000069c

080053e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d108      	bne.n	800540c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fd3e 	bl	8005e80 <vPortFree>
				vPortFree( pxTCB );
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fd3b 	bl	8005e80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800540a:	e018      	b.n	800543e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005412:	2b01      	cmp	r3, #1
 8005414:	d103      	bne.n	800541e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fd32 	bl	8005e80 <vPortFree>
	}
 800541c:	e00f      	b.n	800543e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005424:	2b02      	cmp	r3, #2
 8005426:	d00a      	beq.n	800543e <prvDeleteTCB+0x56>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60fb      	str	r3, [r7, #12]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <prvDeleteTCB+0x54>
	}
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800544e:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <prvResetNextTaskUnblockTime+0x38>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <prvResetNextTaskUnblockTime+0x3c>)
 800545a:	f04f 32ff 	mov.w	r2, #4294967295
 800545e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005460:	e008      	b.n	8005474 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <prvResetNextTaskUnblockTime+0x38>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a04      	ldr	r2, [pc, #16]	; (8005484 <prvResetNextTaskUnblockTime+0x3c>)
 8005472:	6013      	str	r3, [r2, #0]
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	2000066c 	.word	0x2000066c
 8005484:	200006d4 	.word	0x200006d4

08005488 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800548e:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <xTaskGetSchedulerState+0x34>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005496:	2301      	movs	r3, #1
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	e008      	b.n	80054ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549c:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <xTaskGetSchedulerState+0x38>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d102      	bne.n	80054aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054a4:	2302      	movs	r3, #2
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	e001      	b.n	80054ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054aa:	2300      	movs	r3, #0
 80054ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054ae:	687b      	ldr	r3, [r7, #4]
	}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	200006c0 	.word	0x200006c0
 80054c0:	200006dc 	.word	0x200006dc

080054c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d05e      	beq.n	8005598 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054de:	4b31      	ldr	r3, [pc, #196]	; (80055a4 <xTaskPriorityInherit+0xe0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d24e      	bcs.n	8005586 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	db06      	blt.n	80054fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f0:	4b2c      	ldr	r3, [pc, #176]	; (80055a4 <xTaskPriorityInherit+0xe0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	f1c3 0207 	rsb	r2, r3, #7
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6959      	ldr	r1, [r3, #20]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <xTaskPriorityInherit+0xe4>)
 8005510:	4413      	add	r3, r2
 8005512:	4299      	cmp	r1, r3
 8005514:	d12f      	bne.n	8005576 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	3304      	adds	r3, #4
 800551a:	4618      	mov	r0, r3
 800551c:	f7fe fe2a 	bl	8004174 <uxListRemove>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	2201      	movs	r2, #1
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	43da      	mvns	r2, r3
 8005532:	4b1e      	ldr	r3, [pc, #120]	; (80055ac <xTaskPriorityInherit+0xe8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4013      	ands	r3, r2
 8005538:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <xTaskPriorityInherit+0xe8>)
 800553a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800553c:	4b19      	ldr	r3, [pc, #100]	; (80055a4 <xTaskPriorityInherit+0xe0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	2201      	movs	r2, #1
 800554c:	409a      	lsls	r2, r3
 800554e:	4b17      	ldr	r3, [pc, #92]	; (80055ac <xTaskPriorityInherit+0xe8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4313      	orrs	r3, r2
 8005554:	4a15      	ldr	r2, [pc, #84]	; (80055ac <xTaskPriorityInherit+0xe8>)
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4a10      	ldr	r2, [pc, #64]	; (80055a8 <xTaskPriorityInherit+0xe4>)
 8005566:	441a      	add	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f7fe fda3 	bl	80040ba <vListInsertEnd>
 8005574:	e004      	b.n	8005580 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005576:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <xTaskPriorityInherit+0xe0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005580:	2301      	movs	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e008      	b.n	8005598 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <xTaskPriorityInherit+0xe0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	429a      	cmp	r2, r3
 8005592:	d201      	bcs.n	8005598 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005594:	2301      	movs	r3, #1
 8005596:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005598:	68fb      	ldr	r3, [r7, #12]
	}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	200005b4 	.word	0x200005b4
 80055a8:	200005b8 	.word	0x200005b8
 80055ac:	200006bc 	.word	0x200006bc

080055b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d06e      	beq.n	80056a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055c6:	4b3a      	ldr	r3, [pc, #232]	; (80056b0 <xTaskPriorityDisinherit+0x100>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d00a      	beq.n	80055e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	60bb      	str	r3, [r7, #8]
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005608:	1e5a      	subs	r2, r3, #1
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	429a      	cmp	r2, r3
 8005618:	d044      	beq.n	80056a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561e:	2b00      	cmp	r3, #0
 8005620:	d140      	bne.n	80056a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3304      	adds	r3, #4
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe fda4 	bl	8004174 <uxListRemove>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d115      	bne.n	800565e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005636:	491f      	ldr	r1, [pc, #124]	; (80056b4 <xTaskPriorityDisinherit+0x104>)
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xTaskPriorityDisinherit+0xae>
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	2201      	movs	r2, #1
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43da      	mvns	r2, r3
 8005654:	4b18      	ldr	r3, [pc, #96]	; (80056b8 <xTaskPriorityDisinherit+0x108>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4013      	ands	r3, r2
 800565a:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <xTaskPriorityDisinherit+0x108>)
 800565c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	f1c3 0207 	rsb	r2, r3, #7
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	2201      	movs	r2, #1
 8005678:	409a      	lsls	r2, r3
 800567a:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <xTaskPriorityDisinherit+0x108>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4313      	orrs	r3, r2
 8005680:	4a0d      	ldr	r2, [pc, #52]	; (80056b8 <xTaskPriorityDisinherit+0x108>)
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4a08      	ldr	r2, [pc, #32]	; (80056b4 <xTaskPriorityDisinherit+0x104>)
 8005692:	441a      	add	r2, r3
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	3304      	adds	r3, #4
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f7fe fd0d 	bl	80040ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056a4:	697b      	ldr	r3, [r7, #20]
	}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	200005b4 	.word	0x200005b4
 80056b4:	200005b8 	.word	0x200005b8
 80056b8:	200006bc 	.word	0x200006bc

080056bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80056ca:	2301      	movs	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d077      	beq.n	80057c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	60fb      	str	r3, [r7, #12]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d902      	bls.n	8005702 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	e002      	b.n	8005708 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	429a      	cmp	r2, r3
 8005710:	d058      	beq.n	80057c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	429a      	cmp	r2, r3
 800571a:	d153      	bne.n	80057c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800571c:	4b2b      	ldr	r3, [pc, #172]	; (80057cc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	429a      	cmp	r2, r3
 8005724:	d10a      	bne.n	800573c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	60bb      	str	r3, [r7, #8]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005740:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	db04      	blt.n	800575a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f1c3 0207 	rsb	r2, r3, #7
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	6959      	ldr	r1, [r3, #20]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4a19      	ldr	r2, [pc, #100]	; (80057d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800576a:	4413      	add	r3, r2
 800576c:	4299      	cmp	r1, r3
 800576e:	d129      	bne.n	80057c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	3304      	adds	r3, #4
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe fcfd 	bl	8004174 <uxListRemove>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	2201      	movs	r2, #1
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43da      	mvns	r2, r3
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4013      	ands	r3, r2
 8005792:	4a10      	ldr	r2, [pc, #64]	; (80057d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005794:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	2201      	movs	r2, #1
 800579c:	409a      	lsls	r2, r3
 800579e:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	4a0b      	ldr	r2, [pc, #44]	; (80057d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4a06      	ldr	r2, [pc, #24]	; (80057d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80057b6:	441a      	add	r2, r3
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f7fe fc7b 	bl	80040ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057c4:	bf00      	nop
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	200005b4 	.word	0x200005b4
 80057d0:	200005b8 	.word	0x200005b8
 80057d4:	200006bc 	.word	0x200006bc

080057d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80057dc:	4b07      	ldr	r3, [pc, #28]	; (80057fc <pvTaskIncrementMutexHeldCount+0x24>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <pvTaskIncrementMutexHeldCount+0x24>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057ea:	3201      	adds	r2, #1
 80057ec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80057ee:	4b03      	ldr	r3, [pc, #12]	; (80057fc <pvTaskIncrementMutexHeldCount+0x24>)
 80057f0:	681b      	ldr	r3, [r3, #0]
	}
 80057f2:	4618      	mov	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	200005b4 	.word	0x200005b4

08005800 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800580a:	4b29      	ldr	r3, [pc, #164]	; (80058b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005810:	4b28      	ldr	r3, [pc, #160]	; (80058b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3304      	adds	r3, #4
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fcac 	bl	8004174 <uxListRemove>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10b      	bne.n	800583a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005822:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	2201      	movs	r2, #1
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43da      	mvns	r2, r3
 8005830:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4013      	ands	r3, r2
 8005836:	4a20      	ldr	r2, [pc, #128]	; (80058b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005838:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005840:	d10a      	bne.n	8005858 <prvAddCurrentTaskToDelayedList+0x58>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005848:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3304      	adds	r3, #4
 800584e:	4619      	mov	r1, r3
 8005850:	481a      	ldr	r0, [pc, #104]	; (80058bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005852:	f7fe fc32 	bl	80040ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005856:	e026      	b.n	80058a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4413      	add	r3, r2
 800585e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005860:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	429a      	cmp	r2, r3
 800586e:	d209      	bcs.n	8005884 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005870:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3304      	adds	r3, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7fe fc40 	bl	8004102 <vListInsert>
}
 8005882:	e010      	b.n	80058a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005884:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3304      	adds	r3, #4
 800588e:	4619      	mov	r1, r3
 8005890:	4610      	mov	r0, r2
 8005892:	f7fe fc36 	bl	8004102 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	d202      	bcs.n	80058a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80058a0:	4a09      	ldr	r2, [pc, #36]	; (80058c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6013      	str	r3, [r2, #0]
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	200006b8 	.word	0x200006b8
 80058b4:	200005b4 	.word	0x200005b4
 80058b8:	200006bc 	.word	0x200006bc
 80058bc:	200006a0 	.word	0x200006a0
 80058c0:	20000670 	.word	0x20000670
 80058c4:	2000066c 	.word	0x2000066c
 80058c8:	200006d4 	.word	0x200006d4

080058cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3b04      	subs	r3, #4
 80058dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3b04      	subs	r3, #4
 80058ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f023 0201 	bic.w	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3b04      	subs	r3, #4
 80058fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058fc:	4a0c      	ldr	r2, [pc, #48]	; (8005930 <pxPortInitialiseStack+0x64>)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3b14      	subs	r3, #20
 8005906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3b04      	subs	r3, #4
 8005912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f06f 0202 	mvn.w	r2, #2
 800591a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3b20      	subs	r3, #32
 8005920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005922:	68fb      	ldr	r3, [r7, #12]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	08005935 	.word	0x08005935

08005934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800593e:	4b12      	ldr	r3, [pc, #72]	; (8005988 <prvTaskExitError+0x54>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d00a      	beq.n	800595e <prvTaskExitError+0x2a>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	60fb      	str	r3, [r7, #12]
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <prvTaskExitError+0x28>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	60bb      	str	r3, [r7, #8]
}
 8005970:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005972:	bf00      	nop
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0fc      	beq.n	8005974 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800597a:	bf00      	nop
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	20000010 	.word	0x20000010
 800598c:	00000000 	.word	0x00000000

08005990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <pxCurrentTCBConst2>)
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	6808      	ldr	r0, [r1, #0]
 8005996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	f380 8809 	msr	PSP, r0
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f380 8811 	msr	BASEPRI, r0
 80059aa:	4770      	bx	lr
 80059ac:	f3af 8000 	nop.w

080059b0 <pxCurrentTCBConst2>:
 80059b0:	200005b4 	.word	0x200005b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop

080059b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059b8:	4808      	ldr	r0, [pc, #32]	; (80059dc <prvPortStartFirstTask+0x24>)
 80059ba:	6800      	ldr	r0, [r0, #0]
 80059bc:	6800      	ldr	r0, [r0, #0]
 80059be:	f380 8808 	msr	MSP, r0
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f380 8814 	msr	CONTROL, r0
 80059ca:	b662      	cpsie	i
 80059cc:	b661      	cpsie	f
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	df00      	svc	0
 80059d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059da:	bf00      	nop
 80059dc:	e000ed08 	.word	0xe000ed08

080059e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059e6:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <xPortStartScheduler+0x120>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a46      	ldr	r2, [pc, #280]	; (8005b04 <xPortStartScheduler+0x124>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10a      	bne.n	8005a06 <xPortStartScheduler+0x26>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	613b      	str	r3, [r7, #16]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a06:	4b3e      	ldr	r3, [pc, #248]	; (8005b00 <xPortStartScheduler+0x120>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a3f      	ldr	r2, [pc, #252]	; (8005b08 <xPortStartScheduler+0x128>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10a      	bne.n	8005a26 <xPortStartScheduler+0x46>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	60fb      	str	r3, [r7, #12]
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a26:	4b39      	ldr	r3, [pc, #228]	; (8005b0c <xPortStartScheduler+0x12c>)
 8005a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	22ff      	movs	r2, #255	; 0xff
 8005a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <xPortStartScheduler+0x130>)
 8005a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a50:	2207      	movs	r2, #7
 8005a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a54:	e009      	b.n	8005a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a56:	4b2f      	ldr	r3, [pc, #188]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	4a2d      	ldr	r2, [pc, #180]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d0ef      	beq.n	8005a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a76:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f1c3 0307 	rsb	r3, r3, #7
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d00a      	beq.n	8005a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	60bb      	str	r3, [r7, #8]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a98:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005aa2:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aaa:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <xPortStartScheduler+0x138>)
 8005abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ac2:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ace:	f000 f8dd 	bl	8005c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ad2:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <xPortStartScheduler+0x13c>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ad8:	f000 f8fc 	bl	8005cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <xPortStartScheduler+0x140>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0f      	ldr	r2, [pc, #60]	; (8005b20 <xPortStartScheduler+0x140>)
 8005ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ae8:	f7ff ff66 	bl	80059b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005aec:	f7ff fa90 	bl	8005010 <vTaskSwitchContext>
	prvTaskExitError();
 8005af0:	f7ff ff20 	bl	8005934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	e000ed00 	.word	0xe000ed00
 8005b04:	410fc271 	.word	0x410fc271
 8005b08:	410fc270 	.word	0x410fc270
 8005b0c:	e000e400 	.word	0xe000e400
 8005b10:	200006e0 	.word	0x200006e0
 8005b14:	200006e4 	.word	0x200006e4
 8005b18:	e000ed20 	.word	0xe000ed20
 8005b1c:	20000010 	.word	0x20000010
 8005b20:	e000ef34 	.word	0xe000ef34

08005b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	607b      	str	r3, [r7, #4]
}
 8005b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b3e:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3301      	adds	r3, #1
 8005b44:	4a0d      	ldr	r2, [pc, #52]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10f      	bne.n	8005b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <vPortEnterCritical+0x5c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	603b      	str	r3, [r7, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <vPortEnterCritical+0x4a>
	}
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	20000010 	.word	0x20000010
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b8a:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <vPortExitCritical+0x50>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <vPortExitCritical+0x24>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	607b      	str	r3, [r7, #4]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <vPortExitCritical+0x50>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <vPortExitCritical+0x50>)
 8005bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bb2:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <vPortExitCritical+0x50>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d105      	bne.n	8005bc6 <vPortExitCritical+0x42>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000010 	.word	0x20000010
	...

08005be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005be0:	f3ef 8009 	mrs	r0, PSP
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <pxCurrentTCBConst>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f01e 0f10 	tst.w	lr, #16
 8005bf0:	bf08      	it	eq
 8005bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfa:	6010      	str	r0, [r2, #0]
 8005bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c04:	f380 8811 	msr	BASEPRI, r0
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f7ff f9fe 	bl	8005010 <vTaskSwitchContext>
 8005c14:	f04f 0000 	mov.w	r0, #0
 8005c18:	f380 8811 	msr	BASEPRI, r0
 8005c1c:	bc09      	pop	{r0, r3}
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	6808      	ldr	r0, [r1, #0]
 8005c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c26:	f01e 0f10 	tst.w	lr, #16
 8005c2a:	bf08      	it	eq
 8005c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c30:	f380 8809 	msr	PSP, r0
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	f3af 8000 	nop.w

08005c40 <pxCurrentTCBConst>:
 8005c40:	200005b4 	.word	0x200005b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop

08005c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c62:	f7ff f91d 	bl	8004ea0 <xTaskIncrementTick>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <xPortSysTickHandler+0x40>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	2300      	movs	r3, #0
 8005c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f383 8811 	msr	BASEPRI, r3
}
 8005c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <vPortSetupTimerInterrupt+0x38>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <vPortSetupTimerInterrupt+0x3c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <vPortSetupTimerInterrupt+0x40>)
 8005ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <vPortSetupTimerInterrupt+0x44>)
 8005caa:	3b01      	subs	r3, #1
 8005cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cae:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	e000e010 	.word	0xe000e010
 8005cc4:	e000e018 	.word	0xe000e018
 8005cc8:	20000000 	.word	0x20000000
 8005ccc:	10624dd3 	.word	0x10624dd3
 8005cd0:	e000e014 	.word	0xe000e014

08005cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ce4 <vPortEnableVFP+0x10>
 8005cd8:	6801      	ldr	r1, [r0, #0]
 8005cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cde:	6001      	str	r1, [r0, #0]
 8005ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ce2:	bf00      	nop
 8005ce4:	e000ed88 	.word	0xe000ed88

08005ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08a      	sub	sp, #40	; 0x28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cf4:	f7ff f82a 	bl	8004d4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cf8:	4b5b      	ldr	r3, [pc, #364]	; (8005e68 <pvPortMalloc+0x180>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d00:	f000 f920 	bl	8005f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d04:	4b59      	ldr	r3, [pc, #356]	; (8005e6c <pvPortMalloc+0x184>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 8093 	bne.w	8005e38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01d      	beq.n	8005d54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d18:	2208      	movs	r2, #8
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d014      	beq.n	8005d54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f023 0307 	bic.w	r3, r3, #7
 8005d30:	3308      	adds	r3, #8
 8005d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <pvPortMalloc+0x6c>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	617b      	str	r3, [r7, #20]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d06e      	beq.n	8005e38 <pvPortMalloc+0x150>
 8005d5a:	4b45      	ldr	r3, [pc, #276]	; (8005e70 <pvPortMalloc+0x188>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d869      	bhi.n	8005e38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d64:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <pvPortMalloc+0x18c>)
 8005d66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d68:	4b42      	ldr	r3, [pc, #264]	; (8005e74 <pvPortMalloc+0x18c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d6e:	e004      	b.n	8005d7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d903      	bls.n	8005d8c <pvPortMalloc+0xa4>
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f1      	bne.n	8005d70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d8c:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <pvPortMalloc+0x180>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d050      	beq.n	8005e38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	4413      	add	r3, r2
 8005d9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	2308      	movs	r3, #8
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d91f      	bls.n	8005df8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <pvPortMalloc+0xf8>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	613b      	str	r3, [r7, #16]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005df2:	69b8      	ldr	r0, [r7, #24]
 8005df4:	f000 f908 	bl	8006008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005df8:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <pvPortMalloc+0x188>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <pvPortMalloc+0x188>)
 8005e04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e06:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <pvPortMalloc+0x188>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <pvPortMalloc+0x190>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d203      	bcs.n	8005e1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <pvPortMalloc+0x188>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <pvPortMalloc+0x190>)
 8005e18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <pvPortMalloc+0x184>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <pvPortMalloc+0x194>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <pvPortMalloc+0x194>)
 8005e36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e38:	f7fe ff96 	bl	8004d68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <pvPortMalloc+0x174>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60fb      	str	r3, [r7, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <pvPortMalloc+0x172>
	return pvReturn;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3728      	adds	r7, #40	; 0x28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	200042f0 	.word	0x200042f0
 8005e6c:	20004304 	.word	0x20004304
 8005e70:	200042f4 	.word	0x200042f4
 8005e74:	200042e8 	.word	0x200042e8
 8005e78:	200042f8 	.word	0x200042f8
 8005e7c:	200042fc 	.word	0x200042fc

08005e80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04d      	beq.n	8005f2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e92:	2308      	movs	r3, #8
 8005e94:	425b      	negs	r3, r3
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4413      	add	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <vPortFree+0xb8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <vPortFree+0x44>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	60fb      	str	r3, [r7, #12]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <vPortFree+0x62>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	60bb      	str	r3, [r7, #8]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <vPortFree+0xb8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01e      	beq.n	8005f2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d11a      	bne.n	8005f2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <vPortFree+0xb8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	401a      	ands	r2, r3
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f08:	f7fe ff20 	bl	8004d4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <vPortFree+0xbc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <vPortFree+0xbc>)
 8005f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f1a:	6938      	ldr	r0, [r7, #16]
 8005f1c:	f000 f874 	bl	8006008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <vPortFree+0xc0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <vPortFree+0xc0>)
 8005f28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f2a:	f7fe ff1d 	bl	8004d68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f2e:	bf00      	nop
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20004304 	.word	0x20004304
 8005f3c:	200042f4 	.word	0x200042f4
 8005f40:	20004300 	.word	0x20004300

08005f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f50:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <prvHeapInit+0xac>)
 8005f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00c      	beq.n	8005f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3307      	adds	r3, #7
 8005f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0307 	bic.w	r3, r3, #7
 8005f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <prvHeapInit+0xac>)
 8005f74:	4413      	add	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f82:	4b1c      	ldr	r3, [pc, #112]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f90:	2208      	movs	r2, #8
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0307 	bic.w	r3, r3, #7
 8005f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <prvHeapInit+0xb8>)
 8005fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <prvHeapInit+0xbc>)
 8005fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fdc:	4b09      	ldr	r3, [pc, #36]	; (8006004 <prvHeapInit+0xc0>)
 8005fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fe2:	601a      	str	r2, [r3, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	200006e8 	.word	0x200006e8
 8005ff4:	200042e8 	.word	0x200042e8
 8005ff8:	200042f0 	.word	0x200042f0
 8005ffc:	200042f8 	.word	0x200042f8
 8006000:	200042f4 	.word	0x200042f4
 8006004:	20004304 	.word	0x20004304

08006008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006010:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <prvInsertBlockIntoFreeList+0xac>)
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e002      	b.n	800601c <prvInsertBlockIntoFreeList+0x14>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d8f7      	bhi.n	8006016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	4413      	add	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d108      	bne.n	800604a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	441a      	add	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	441a      	add	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d118      	bne.n	8006090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d00d      	beq.n	8006086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	441a      	add	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e008      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e003      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d002      	beq.n	80060a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	200042e8 	.word	0x200042e8
 80060b8:	200042f0 	.word	0x200042f0

080060bc <pow>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	ed2d 8b02 	vpush	{d8}
 80060c2:	eeb0 8a40 	vmov.f32	s16, s0
 80060c6:	eef0 8a60 	vmov.f32	s17, s1
 80060ca:	ec55 4b11 	vmov	r4, r5, d1
 80060ce:	f000 fa97 	bl	8006600 <__ieee754_pow>
 80060d2:	4622      	mov	r2, r4
 80060d4:	462b      	mov	r3, r5
 80060d6:	4620      	mov	r0, r4
 80060d8:	4629      	mov	r1, r5
 80060da:	ec57 6b10 	vmov	r6, r7, d0
 80060de:	f7fa fcd5 	bl	8000a8c <__aeabi_dcmpun>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d13b      	bne.n	800615e <pow+0xa2>
 80060e6:	ec51 0b18 	vmov	r0, r1, d8
 80060ea:	2200      	movs	r2, #0
 80060ec:	2300      	movs	r3, #0
 80060ee:	f7fa fc9b 	bl	8000a28 <__aeabi_dcmpeq>
 80060f2:	b1b8      	cbz	r0, 8006124 <pow+0x68>
 80060f4:	2200      	movs	r2, #0
 80060f6:	2300      	movs	r3, #0
 80060f8:	4620      	mov	r0, r4
 80060fa:	4629      	mov	r1, r5
 80060fc:	f7fa fc94 	bl	8000a28 <__aeabi_dcmpeq>
 8006100:	2800      	cmp	r0, #0
 8006102:	d146      	bne.n	8006192 <pow+0xd6>
 8006104:	ec45 4b10 	vmov	d0, r4, r5
 8006108:	f000 f89e 	bl	8006248 <finite>
 800610c:	b338      	cbz	r0, 800615e <pow+0xa2>
 800610e:	2200      	movs	r2, #0
 8006110:	2300      	movs	r3, #0
 8006112:	4620      	mov	r0, r4
 8006114:	4629      	mov	r1, r5
 8006116:	f7fa fc91 	bl	8000a3c <__aeabi_dcmplt>
 800611a:	b300      	cbz	r0, 800615e <pow+0xa2>
 800611c:	f001 ff0c 	bl	8007f38 <__errno>
 8006120:	2322      	movs	r3, #34	; 0x22
 8006122:	e01b      	b.n	800615c <pow+0xa0>
 8006124:	ec47 6b10 	vmov	d0, r6, r7
 8006128:	f000 f88e 	bl	8006248 <finite>
 800612c:	b9e0      	cbnz	r0, 8006168 <pow+0xac>
 800612e:	eeb0 0a48 	vmov.f32	s0, s16
 8006132:	eef0 0a68 	vmov.f32	s1, s17
 8006136:	f000 f887 	bl	8006248 <finite>
 800613a:	b1a8      	cbz	r0, 8006168 <pow+0xac>
 800613c:	ec45 4b10 	vmov	d0, r4, r5
 8006140:	f000 f882 	bl	8006248 <finite>
 8006144:	b180      	cbz	r0, 8006168 <pow+0xac>
 8006146:	4632      	mov	r2, r6
 8006148:	463b      	mov	r3, r7
 800614a:	4630      	mov	r0, r6
 800614c:	4639      	mov	r1, r7
 800614e:	f7fa fc9d 	bl	8000a8c <__aeabi_dcmpun>
 8006152:	2800      	cmp	r0, #0
 8006154:	d0e2      	beq.n	800611c <pow+0x60>
 8006156:	f001 feef 	bl	8007f38 <__errno>
 800615a:	2321      	movs	r3, #33	; 0x21
 800615c:	6003      	str	r3, [r0, #0]
 800615e:	ecbd 8b02 	vpop	{d8}
 8006162:	ec47 6b10 	vmov	d0, r6, r7
 8006166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006168:	2200      	movs	r2, #0
 800616a:	2300      	movs	r3, #0
 800616c:	4630      	mov	r0, r6
 800616e:	4639      	mov	r1, r7
 8006170:	f7fa fc5a 	bl	8000a28 <__aeabi_dcmpeq>
 8006174:	2800      	cmp	r0, #0
 8006176:	d0f2      	beq.n	800615e <pow+0xa2>
 8006178:	eeb0 0a48 	vmov.f32	s0, s16
 800617c:	eef0 0a68 	vmov.f32	s1, s17
 8006180:	f000 f862 	bl	8006248 <finite>
 8006184:	2800      	cmp	r0, #0
 8006186:	d0ea      	beq.n	800615e <pow+0xa2>
 8006188:	ec45 4b10 	vmov	d0, r4, r5
 800618c:	f000 f85c 	bl	8006248 <finite>
 8006190:	e7c3      	b.n	800611a <pow+0x5e>
 8006192:	4f01      	ldr	r7, [pc, #4]	; (8006198 <pow+0xdc>)
 8006194:	2600      	movs	r6, #0
 8006196:	e7e2      	b.n	800615e <pow+0xa2>
 8006198:	3ff00000 	.word	0x3ff00000
 800619c:	00000000 	.word	0x00000000

080061a0 <cos>:
 80061a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061a2:	ec53 2b10 	vmov	r2, r3, d0
 80061a6:	4826      	ldr	r0, [pc, #152]	; (8006240 <cos+0xa0>)
 80061a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80061ac:	4281      	cmp	r1, r0
 80061ae:	dc06      	bgt.n	80061be <cos+0x1e>
 80061b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006238 <cos+0x98>
 80061b4:	b005      	add	sp, #20
 80061b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80061ba:	f000 b899 	b.w	80062f0 <__kernel_cos>
 80061be:	4821      	ldr	r0, [pc, #132]	; (8006244 <cos+0xa4>)
 80061c0:	4281      	cmp	r1, r0
 80061c2:	dd09      	ble.n	80061d8 <cos+0x38>
 80061c4:	ee10 0a10 	vmov	r0, s0
 80061c8:	4619      	mov	r1, r3
 80061ca:	f7fa f80d 	bl	80001e8 <__aeabi_dsub>
 80061ce:	ec41 0b10 	vmov	d0, r0, r1
 80061d2:	b005      	add	sp, #20
 80061d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80061d8:	4668      	mov	r0, sp
 80061da:	f000 ff3d 	bl	8007058 <__ieee754_rem_pio2>
 80061de:	f000 0003 	and.w	r0, r0, #3
 80061e2:	2801      	cmp	r0, #1
 80061e4:	d00b      	beq.n	80061fe <cos+0x5e>
 80061e6:	2802      	cmp	r0, #2
 80061e8:	d016      	beq.n	8006218 <cos+0x78>
 80061ea:	b9e0      	cbnz	r0, 8006226 <cos+0x86>
 80061ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061f0:	ed9d 0b00 	vldr	d0, [sp]
 80061f4:	f000 f87c 	bl	80062f0 <__kernel_cos>
 80061f8:	ec51 0b10 	vmov	r0, r1, d0
 80061fc:	e7e7      	b.n	80061ce <cos+0x2e>
 80061fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006202:	ed9d 0b00 	vldr	d0, [sp]
 8006206:	f000 f93b 	bl	8006480 <__kernel_sin>
 800620a:	ec53 2b10 	vmov	r2, r3, d0
 800620e:	ee10 0a10 	vmov	r0, s0
 8006212:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006216:	e7da      	b.n	80061ce <cos+0x2e>
 8006218:	ed9d 1b02 	vldr	d1, [sp, #8]
 800621c:	ed9d 0b00 	vldr	d0, [sp]
 8006220:	f000 f866 	bl	80062f0 <__kernel_cos>
 8006224:	e7f1      	b.n	800620a <cos+0x6a>
 8006226:	ed9d 1b02 	vldr	d1, [sp, #8]
 800622a:	ed9d 0b00 	vldr	d0, [sp]
 800622e:	2001      	movs	r0, #1
 8006230:	f000 f926 	bl	8006480 <__kernel_sin>
 8006234:	e7e0      	b.n	80061f8 <cos+0x58>
 8006236:	bf00      	nop
	...
 8006240:	3fe921fb 	.word	0x3fe921fb
 8006244:	7fefffff 	.word	0x7fefffff

08006248 <finite>:
 8006248:	b082      	sub	sp, #8
 800624a:	ed8d 0b00 	vstr	d0, [sp]
 800624e:	9801      	ldr	r0, [sp, #4]
 8006250:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006254:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006258:	0fc0      	lsrs	r0, r0, #31
 800625a:	b002      	add	sp, #8
 800625c:	4770      	bx	lr
	...

08006260 <round>:
 8006260:	ec53 2b10 	vmov	r2, r3, d0
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800626a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800626e:	2813      	cmp	r0, #19
 8006270:	ee10 5a10 	vmov	r5, s0
 8006274:	4619      	mov	r1, r3
 8006276:	dc18      	bgt.n	80062aa <round+0x4a>
 8006278:	2800      	cmp	r0, #0
 800627a:	da09      	bge.n	8006290 <round+0x30>
 800627c:	3001      	adds	r0, #1
 800627e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8006282:	d103      	bne.n	800628c <round+0x2c>
 8006284:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8006288:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800628c:	2300      	movs	r3, #0
 800628e:	e02a      	b.n	80062e6 <round+0x86>
 8006290:	4c16      	ldr	r4, [pc, #88]	; (80062ec <round+0x8c>)
 8006292:	4104      	asrs	r4, r0
 8006294:	ea03 0604 	and.w	r6, r3, r4
 8006298:	4316      	orrs	r6, r2
 800629a:	d011      	beq.n	80062c0 <round+0x60>
 800629c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80062a0:	4103      	asrs	r3, r0
 80062a2:	440b      	add	r3, r1
 80062a4:	ea23 0104 	bic.w	r1, r3, r4
 80062a8:	e7f0      	b.n	800628c <round+0x2c>
 80062aa:	2833      	cmp	r0, #51	; 0x33
 80062ac:	dd0b      	ble.n	80062c6 <round+0x66>
 80062ae:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80062b2:	d105      	bne.n	80062c0 <round+0x60>
 80062b4:	ee10 0a10 	vmov	r0, s0
 80062b8:	f7f9 ff98 	bl	80001ec <__adddf3>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	ec43 2b10 	vmov	d0, r2, r3
 80062c4:	bd70      	pop	{r4, r5, r6, pc}
 80062c6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80062ca:	f04f 34ff 	mov.w	r4, #4294967295
 80062ce:	40f4      	lsrs	r4, r6
 80062d0:	4214      	tst	r4, r2
 80062d2:	d0f5      	beq.n	80062c0 <round+0x60>
 80062d4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 80062d8:	2301      	movs	r3, #1
 80062da:	4083      	lsls	r3, r0
 80062dc:	195b      	adds	r3, r3, r5
 80062de:	bf28      	it	cs
 80062e0:	3101      	addcs	r1, #1
 80062e2:	ea23 0304 	bic.w	r3, r3, r4
 80062e6:	461a      	mov	r2, r3
 80062e8:	460b      	mov	r3, r1
 80062ea:	e7e9      	b.n	80062c0 <round+0x60>
 80062ec:	000fffff 	.word	0x000fffff

080062f0 <__kernel_cos>:
 80062f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	ec57 6b10 	vmov	r6, r7, d0
 80062f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80062fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006300:	ed8d 1b00 	vstr	d1, [sp]
 8006304:	da07      	bge.n	8006316 <__kernel_cos+0x26>
 8006306:	ee10 0a10 	vmov	r0, s0
 800630a:	4639      	mov	r1, r7
 800630c:	f7fa fbd4 	bl	8000ab8 <__aeabi_d2iz>
 8006310:	2800      	cmp	r0, #0
 8006312:	f000 8088 	beq.w	8006426 <__kernel_cos+0x136>
 8006316:	4632      	mov	r2, r6
 8006318:	463b      	mov	r3, r7
 800631a:	4630      	mov	r0, r6
 800631c:	4639      	mov	r1, r7
 800631e:	f7fa f91b 	bl	8000558 <__aeabi_dmul>
 8006322:	4b51      	ldr	r3, [pc, #324]	; (8006468 <__kernel_cos+0x178>)
 8006324:	2200      	movs	r2, #0
 8006326:	4604      	mov	r4, r0
 8006328:	460d      	mov	r5, r1
 800632a:	f7fa f915 	bl	8000558 <__aeabi_dmul>
 800632e:	a340      	add	r3, pc, #256	; (adr r3, 8006430 <__kernel_cos+0x140>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	4682      	mov	sl, r0
 8006336:	468b      	mov	fp, r1
 8006338:	4620      	mov	r0, r4
 800633a:	4629      	mov	r1, r5
 800633c:	f7fa f90c 	bl	8000558 <__aeabi_dmul>
 8006340:	a33d      	add	r3, pc, #244	; (adr r3, 8006438 <__kernel_cos+0x148>)
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f7f9 ff51 	bl	80001ec <__adddf3>
 800634a:	4622      	mov	r2, r4
 800634c:	462b      	mov	r3, r5
 800634e:	f7fa f903 	bl	8000558 <__aeabi_dmul>
 8006352:	a33b      	add	r3, pc, #236	; (adr r3, 8006440 <__kernel_cos+0x150>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7f9 ff46 	bl	80001e8 <__aeabi_dsub>
 800635c:	4622      	mov	r2, r4
 800635e:	462b      	mov	r3, r5
 8006360:	f7fa f8fa 	bl	8000558 <__aeabi_dmul>
 8006364:	a338      	add	r3, pc, #224	; (adr r3, 8006448 <__kernel_cos+0x158>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	f7f9 ff3f 	bl	80001ec <__adddf3>
 800636e:	4622      	mov	r2, r4
 8006370:	462b      	mov	r3, r5
 8006372:	f7fa f8f1 	bl	8000558 <__aeabi_dmul>
 8006376:	a336      	add	r3, pc, #216	; (adr r3, 8006450 <__kernel_cos+0x160>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7f9 ff34 	bl	80001e8 <__aeabi_dsub>
 8006380:	4622      	mov	r2, r4
 8006382:	462b      	mov	r3, r5
 8006384:	f7fa f8e8 	bl	8000558 <__aeabi_dmul>
 8006388:	a333      	add	r3, pc, #204	; (adr r3, 8006458 <__kernel_cos+0x168>)
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f7f9 ff2d 	bl	80001ec <__adddf3>
 8006392:	4622      	mov	r2, r4
 8006394:	462b      	mov	r3, r5
 8006396:	f7fa f8df 	bl	8000558 <__aeabi_dmul>
 800639a:	4622      	mov	r2, r4
 800639c:	462b      	mov	r3, r5
 800639e:	f7fa f8db 	bl	8000558 <__aeabi_dmul>
 80063a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063a6:	4604      	mov	r4, r0
 80063a8:	460d      	mov	r5, r1
 80063aa:	4630      	mov	r0, r6
 80063ac:	4639      	mov	r1, r7
 80063ae:	f7fa f8d3 	bl	8000558 <__aeabi_dmul>
 80063b2:	460b      	mov	r3, r1
 80063b4:	4602      	mov	r2, r0
 80063b6:	4629      	mov	r1, r5
 80063b8:	4620      	mov	r0, r4
 80063ba:	f7f9 ff15 	bl	80001e8 <__aeabi_dsub>
 80063be:	4b2b      	ldr	r3, [pc, #172]	; (800646c <__kernel_cos+0x17c>)
 80063c0:	4598      	cmp	r8, r3
 80063c2:	4606      	mov	r6, r0
 80063c4:	460f      	mov	r7, r1
 80063c6:	dc10      	bgt.n	80063ea <__kernel_cos+0xfa>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4650      	mov	r0, sl
 80063ce:	4659      	mov	r1, fp
 80063d0:	f7f9 ff0a 	bl	80001e8 <__aeabi_dsub>
 80063d4:	460b      	mov	r3, r1
 80063d6:	4926      	ldr	r1, [pc, #152]	; (8006470 <__kernel_cos+0x180>)
 80063d8:	4602      	mov	r2, r0
 80063da:	2000      	movs	r0, #0
 80063dc:	f7f9 ff04 	bl	80001e8 <__aeabi_dsub>
 80063e0:	ec41 0b10 	vmov	d0, r0, r1
 80063e4:	b003      	add	sp, #12
 80063e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ea:	4b22      	ldr	r3, [pc, #136]	; (8006474 <__kernel_cos+0x184>)
 80063ec:	4920      	ldr	r1, [pc, #128]	; (8006470 <__kernel_cos+0x180>)
 80063ee:	4598      	cmp	r8, r3
 80063f0:	bfcc      	ite	gt
 80063f2:	4d21      	ldrgt	r5, [pc, #132]	; (8006478 <__kernel_cos+0x188>)
 80063f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80063f8:	2400      	movs	r4, #0
 80063fa:	4622      	mov	r2, r4
 80063fc:	462b      	mov	r3, r5
 80063fe:	2000      	movs	r0, #0
 8006400:	f7f9 fef2 	bl	80001e8 <__aeabi_dsub>
 8006404:	4622      	mov	r2, r4
 8006406:	4680      	mov	r8, r0
 8006408:	4689      	mov	r9, r1
 800640a:	462b      	mov	r3, r5
 800640c:	4650      	mov	r0, sl
 800640e:	4659      	mov	r1, fp
 8006410:	f7f9 feea 	bl	80001e8 <__aeabi_dsub>
 8006414:	4632      	mov	r2, r6
 8006416:	463b      	mov	r3, r7
 8006418:	f7f9 fee6 	bl	80001e8 <__aeabi_dsub>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4640      	mov	r0, r8
 8006422:	4649      	mov	r1, r9
 8006424:	e7da      	b.n	80063dc <__kernel_cos+0xec>
 8006426:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006460 <__kernel_cos+0x170>
 800642a:	e7db      	b.n	80063e4 <__kernel_cos+0xf4>
 800642c:	f3af 8000 	nop.w
 8006430:	be8838d4 	.word	0xbe8838d4
 8006434:	bda8fae9 	.word	0xbda8fae9
 8006438:	bdb4b1c4 	.word	0xbdb4b1c4
 800643c:	3e21ee9e 	.word	0x3e21ee9e
 8006440:	809c52ad 	.word	0x809c52ad
 8006444:	3e927e4f 	.word	0x3e927e4f
 8006448:	19cb1590 	.word	0x19cb1590
 800644c:	3efa01a0 	.word	0x3efa01a0
 8006450:	16c15177 	.word	0x16c15177
 8006454:	3f56c16c 	.word	0x3f56c16c
 8006458:	5555554c 	.word	0x5555554c
 800645c:	3fa55555 	.word	0x3fa55555
 8006460:	00000000 	.word	0x00000000
 8006464:	3ff00000 	.word	0x3ff00000
 8006468:	3fe00000 	.word	0x3fe00000
 800646c:	3fd33332 	.word	0x3fd33332
 8006470:	3ff00000 	.word	0x3ff00000
 8006474:	3fe90000 	.word	0x3fe90000
 8006478:	3fd20000 	.word	0x3fd20000
 800647c:	00000000 	.word	0x00000000

08006480 <__kernel_sin>:
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	ed2d 8b04 	vpush	{d8-d9}
 8006488:	eeb0 8a41 	vmov.f32	s16, s2
 800648c:	eef0 8a61 	vmov.f32	s17, s3
 8006490:	ec55 4b10 	vmov	r4, r5, d0
 8006494:	b083      	sub	sp, #12
 8006496:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800649a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800649e:	9001      	str	r0, [sp, #4]
 80064a0:	da06      	bge.n	80064b0 <__kernel_sin+0x30>
 80064a2:	ee10 0a10 	vmov	r0, s0
 80064a6:	4629      	mov	r1, r5
 80064a8:	f7fa fb06 	bl	8000ab8 <__aeabi_d2iz>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d051      	beq.n	8006554 <__kernel_sin+0xd4>
 80064b0:	4622      	mov	r2, r4
 80064b2:	462b      	mov	r3, r5
 80064b4:	4620      	mov	r0, r4
 80064b6:	4629      	mov	r1, r5
 80064b8:	f7fa f84e 	bl	8000558 <__aeabi_dmul>
 80064bc:	4682      	mov	sl, r0
 80064be:	468b      	mov	fp, r1
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4620      	mov	r0, r4
 80064c6:	4629      	mov	r1, r5
 80064c8:	f7fa f846 	bl	8000558 <__aeabi_dmul>
 80064cc:	a341      	add	r3, pc, #260	; (adr r3, 80065d4 <__kernel_sin+0x154>)
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	4680      	mov	r8, r0
 80064d4:	4689      	mov	r9, r1
 80064d6:	4650      	mov	r0, sl
 80064d8:	4659      	mov	r1, fp
 80064da:	f7fa f83d 	bl	8000558 <__aeabi_dmul>
 80064de:	a33f      	add	r3, pc, #252	; (adr r3, 80065dc <__kernel_sin+0x15c>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f7f9 fe80 	bl	80001e8 <__aeabi_dsub>
 80064e8:	4652      	mov	r2, sl
 80064ea:	465b      	mov	r3, fp
 80064ec:	f7fa f834 	bl	8000558 <__aeabi_dmul>
 80064f0:	a33c      	add	r3, pc, #240	; (adr r3, 80065e4 <__kernel_sin+0x164>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7f9 fe79 	bl	80001ec <__adddf3>
 80064fa:	4652      	mov	r2, sl
 80064fc:	465b      	mov	r3, fp
 80064fe:	f7fa f82b 	bl	8000558 <__aeabi_dmul>
 8006502:	a33a      	add	r3, pc, #232	; (adr r3, 80065ec <__kernel_sin+0x16c>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f7f9 fe6e 	bl	80001e8 <__aeabi_dsub>
 800650c:	4652      	mov	r2, sl
 800650e:	465b      	mov	r3, fp
 8006510:	f7fa f822 	bl	8000558 <__aeabi_dmul>
 8006514:	a337      	add	r3, pc, #220	; (adr r3, 80065f4 <__kernel_sin+0x174>)
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f7f9 fe67 	bl	80001ec <__adddf3>
 800651e:	9b01      	ldr	r3, [sp, #4]
 8006520:	4606      	mov	r6, r0
 8006522:	460f      	mov	r7, r1
 8006524:	b9eb      	cbnz	r3, 8006562 <__kernel_sin+0xe2>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4650      	mov	r0, sl
 800652c:	4659      	mov	r1, fp
 800652e:	f7fa f813 	bl	8000558 <__aeabi_dmul>
 8006532:	a325      	add	r3, pc, #148	; (adr r3, 80065c8 <__kernel_sin+0x148>)
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f7f9 fe56 	bl	80001e8 <__aeabi_dsub>
 800653c:	4642      	mov	r2, r8
 800653e:	464b      	mov	r3, r9
 8006540:	f7fa f80a 	bl	8000558 <__aeabi_dmul>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4620      	mov	r0, r4
 800654a:	4629      	mov	r1, r5
 800654c:	f7f9 fe4e 	bl	80001ec <__adddf3>
 8006550:	4604      	mov	r4, r0
 8006552:	460d      	mov	r5, r1
 8006554:	ec45 4b10 	vmov	d0, r4, r5
 8006558:	b003      	add	sp, #12
 800655a:	ecbd 8b04 	vpop	{d8-d9}
 800655e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006562:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <__kernel_sin+0x150>)
 8006564:	ec51 0b18 	vmov	r0, r1, d8
 8006568:	2200      	movs	r2, #0
 800656a:	f7f9 fff5 	bl	8000558 <__aeabi_dmul>
 800656e:	4632      	mov	r2, r6
 8006570:	ec41 0b19 	vmov	d9, r0, r1
 8006574:	463b      	mov	r3, r7
 8006576:	4640      	mov	r0, r8
 8006578:	4649      	mov	r1, r9
 800657a:	f7f9 ffed 	bl	8000558 <__aeabi_dmul>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	ec51 0b19 	vmov	r0, r1, d9
 8006586:	f7f9 fe2f 	bl	80001e8 <__aeabi_dsub>
 800658a:	4652      	mov	r2, sl
 800658c:	465b      	mov	r3, fp
 800658e:	f7f9 ffe3 	bl	8000558 <__aeabi_dmul>
 8006592:	ec53 2b18 	vmov	r2, r3, d8
 8006596:	f7f9 fe27 	bl	80001e8 <__aeabi_dsub>
 800659a:	a30b      	add	r3, pc, #44	; (adr r3, 80065c8 <__kernel_sin+0x148>)
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	4606      	mov	r6, r0
 80065a2:	460f      	mov	r7, r1
 80065a4:	4640      	mov	r0, r8
 80065a6:	4649      	mov	r1, r9
 80065a8:	f7f9 ffd6 	bl	8000558 <__aeabi_dmul>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4630      	mov	r0, r6
 80065b2:	4639      	mov	r1, r7
 80065b4:	f7f9 fe1a 	bl	80001ec <__adddf3>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4620      	mov	r0, r4
 80065be:	4629      	mov	r1, r5
 80065c0:	f7f9 fe12 	bl	80001e8 <__aeabi_dsub>
 80065c4:	e7c4      	b.n	8006550 <__kernel_sin+0xd0>
 80065c6:	bf00      	nop
 80065c8:	55555549 	.word	0x55555549
 80065cc:	3fc55555 	.word	0x3fc55555
 80065d0:	3fe00000 	.word	0x3fe00000
 80065d4:	5acfd57c 	.word	0x5acfd57c
 80065d8:	3de5d93a 	.word	0x3de5d93a
 80065dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80065e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80065e4:	57b1fe7d 	.word	0x57b1fe7d
 80065e8:	3ec71de3 	.word	0x3ec71de3
 80065ec:	19c161d5 	.word	0x19c161d5
 80065f0:	3f2a01a0 	.word	0x3f2a01a0
 80065f4:	1110f8a6 	.word	0x1110f8a6
 80065f8:	3f811111 	.word	0x3f811111
 80065fc:	00000000 	.word	0x00000000

08006600 <__ieee754_pow>:
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	ed2d 8b06 	vpush	{d8-d10}
 8006608:	b089      	sub	sp, #36	; 0x24
 800660a:	ed8d 1b00 	vstr	d1, [sp]
 800660e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006612:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006616:	ea58 0102 	orrs.w	r1, r8, r2
 800661a:	ec57 6b10 	vmov	r6, r7, d0
 800661e:	d115      	bne.n	800664c <__ieee754_pow+0x4c>
 8006620:	19b3      	adds	r3, r6, r6
 8006622:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006626:	4152      	adcs	r2, r2
 8006628:	4299      	cmp	r1, r3
 800662a:	4b89      	ldr	r3, [pc, #548]	; (8006850 <__ieee754_pow+0x250>)
 800662c:	4193      	sbcs	r3, r2
 800662e:	f080 84d1 	bcs.w	8006fd4 <__ieee754_pow+0x9d4>
 8006632:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006636:	4630      	mov	r0, r6
 8006638:	4639      	mov	r1, r7
 800663a:	f7f9 fdd7 	bl	80001ec <__adddf3>
 800663e:	ec41 0b10 	vmov	d0, r0, r1
 8006642:	b009      	add	sp, #36	; 0x24
 8006644:	ecbd 8b06 	vpop	{d8-d10}
 8006648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664c:	4b81      	ldr	r3, [pc, #516]	; (8006854 <__ieee754_pow+0x254>)
 800664e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006652:	429c      	cmp	r4, r3
 8006654:	ee10 aa10 	vmov	sl, s0
 8006658:	463d      	mov	r5, r7
 800665a:	dc06      	bgt.n	800666a <__ieee754_pow+0x6a>
 800665c:	d101      	bne.n	8006662 <__ieee754_pow+0x62>
 800665e:	2e00      	cmp	r6, #0
 8006660:	d1e7      	bne.n	8006632 <__ieee754_pow+0x32>
 8006662:	4598      	cmp	r8, r3
 8006664:	dc01      	bgt.n	800666a <__ieee754_pow+0x6a>
 8006666:	d10f      	bne.n	8006688 <__ieee754_pow+0x88>
 8006668:	b172      	cbz	r2, 8006688 <__ieee754_pow+0x88>
 800666a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800666e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006672:	ea55 050a 	orrs.w	r5, r5, sl
 8006676:	d1dc      	bne.n	8006632 <__ieee754_pow+0x32>
 8006678:	e9dd 3200 	ldrd	r3, r2, [sp]
 800667c:	18db      	adds	r3, r3, r3
 800667e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006682:	4152      	adcs	r2, r2
 8006684:	429d      	cmp	r5, r3
 8006686:	e7d0      	b.n	800662a <__ieee754_pow+0x2a>
 8006688:	2d00      	cmp	r5, #0
 800668a:	da3b      	bge.n	8006704 <__ieee754_pow+0x104>
 800668c:	4b72      	ldr	r3, [pc, #456]	; (8006858 <__ieee754_pow+0x258>)
 800668e:	4598      	cmp	r8, r3
 8006690:	dc51      	bgt.n	8006736 <__ieee754_pow+0x136>
 8006692:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006696:	4598      	cmp	r8, r3
 8006698:	f340 84ab 	ble.w	8006ff2 <__ieee754_pow+0x9f2>
 800669c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80066a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80066a4:	2b14      	cmp	r3, #20
 80066a6:	dd0f      	ble.n	80066c8 <__ieee754_pow+0xc8>
 80066a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80066ac:	fa22 f103 	lsr.w	r1, r2, r3
 80066b0:	fa01 f303 	lsl.w	r3, r1, r3
 80066b4:	4293      	cmp	r3, r2
 80066b6:	f040 849c 	bne.w	8006ff2 <__ieee754_pow+0x9f2>
 80066ba:	f001 0101 	and.w	r1, r1, #1
 80066be:	f1c1 0302 	rsb	r3, r1, #2
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	b182      	cbz	r2, 80066e8 <__ieee754_pow+0xe8>
 80066c6:	e05f      	b.n	8006788 <__ieee754_pow+0x188>
 80066c8:	2a00      	cmp	r2, #0
 80066ca:	d15b      	bne.n	8006784 <__ieee754_pow+0x184>
 80066cc:	f1c3 0314 	rsb	r3, r3, #20
 80066d0:	fa48 f103 	asr.w	r1, r8, r3
 80066d4:	fa01 f303 	lsl.w	r3, r1, r3
 80066d8:	4543      	cmp	r3, r8
 80066da:	f040 8487 	bne.w	8006fec <__ieee754_pow+0x9ec>
 80066de:	f001 0101 	and.w	r1, r1, #1
 80066e2:	f1c1 0302 	rsb	r3, r1, #2
 80066e6:	9304      	str	r3, [sp, #16]
 80066e8:	4b5c      	ldr	r3, [pc, #368]	; (800685c <__ieee754_pow+0x25c>)
 80066ea:	4598      	cmp	r8, r3
 80066ec:	d132      	bne.n	8006754 <__ieee754_pow+0x154>
 80066ee:	f1b9 0f00 	cmp.w	r9, #0
 80066f2:	f280 8477 	bge.w	8006fe4 <__ieee754_pow+0x9e4>
 80066f6:	4959      	ldr	r1, [pc, #356]	; (800685c <__ieee754_pow+0x25c>)
 80066f8:	4632      	mov	r2, r6
 80066fa:	463b      	mov	r3, r7
 80066fc:	2000      	movs	r0, #0
 80066fe:	f7fa f855 	bl	80007ac <__aeabi_ddiv>
 8006702:	e79c      	b.n	800663e <__ieee754_pow+0x3e>
 8006704:	2300      	movs	r3, #0
 8006706:	9304      	str	r3, [sp, #16]
 8006708:	2a00      	cmp	r2, #0
 800670a:	d13d      	bne.n	8006788 <__ieee754_pow+0x188>
 800670c:	4b51      	ldr	r3, [pc, #324]	; (8006854 <__ieee754_pow+0x254>)
 800670e:	4598      	cmp	r8, r3
 8006710:	d1ea      	bne.n	80066e8 <__ieee754_pow+0xe8>
 8006712:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006716:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800671a:	ea53 030a 	orrs.w	r3, r3, sl
 800671e:	f000 8459 	beq.w	8006fd4 <__ieee754_pow+0x9d4>
 8006722:	4b4f      	ldr	r3, [pc, #316]	; (8006860 <__ieee754_pow+0x260>)
 8006724:	429c      	cmp	r4, r3
 8006726:	dd08      	ble.n	800673a <__ieee754_pow+0x13a>
 8006728:	f1b9 0f00 	cmp.w	r9, #0
 800672c:	f2c0 8456 	blt.w	8006fdc <__ieee754_pow+0x9dc>
 8006730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006734:	e783      	b.n	800663e <__ieee754_pow+0x3e>
 8006736:	2302      	movs	r3, #2
 8006738:	e7e5      	b.n	8006706 <__ieee754_pow+0x106>
 800673a:	f1b9 0f00 	cmp.w	r9, #0
 800673e:	f04f 0000 	mov.w	r0, #0
 8006742:	f04f 0100 	mov.w	r1, #0
 8006746:	f6bf af7a 	bge.w	800663e <__ieee754_pow+0x3e>
 800674a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800674e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006752:	e774      	b.n	800663e <__ieee754_pow+0x3e>
 8006754:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006758:	d106      	bne.n	8006768 <__ieee754_pow+0x168>
 800675a:	4632      	mov	r2, r6
 800675c:	463b      	mov	r3, r7
 800675e:	4630      	mov	r0, r6
 8006760:	4639      	mov	r1, r7
 8006762:	f7f9 fef9 	bl	8000558 <__aeabi_dmul>
 8006766:	e76a      	b.n	800663e <__ieee754_pow+0x3e>
 8006768:	4b3e      	ldr	r3, [pc, #248]	; (8006864 <__ieee754_pow+0x264>)
 800676a:	4599      	cmp	r9, r3
 800676c:	d10c      	bne.n	8006788 <__ieee754_pow+0x188>
 800676e:	2d00      	cmp	r5, #0
 8006770:	db0a      	blt.n	8006788 <__ieee754_pow+0x188>
 8006772:	ec47 6b10 	vmov	d0, r6, r7
 8006776:	b009      	add	sp, #36	; 0x24
 8006778:	ecbd 8b06 	vpop	{d8-d10}
 800677c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	f000 bf28 	b.w	80075d4 <__ieee754_sqrt>
 8006784:	2300      	movs	r3, #0
 8006786:	9304      	str	r3, [sp, #16]
 8006788:	ec47 6b10 	vmov	d0, r6, r7
 800678c:	f000 fe6a 	bl	8007464 <fabs>
 8006790:	ec51 0b10 	vmov	r0, r1, d0
 8006794:	f1ba 0f00 	cmp.w	sl, #0
 8006798:	d129      	bne.n	80067ee <__ieee754_pow+0x1ee>
 800679a:	b124      	cbz	r4, 80067a6 <__ieee754_pow+0x1a6>
 800679c:	4b2f      	ldr	r3, [pc, #188]	; (800685c <__ieee754_pow+0x25c>)
 800679e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d123      	bne.n	80067ee <__ieee754_pow+0x1ee>
 80067a6:	f1b9 0f00 	cmp.w	r9, #0
 80067aa:	da05      	bge.n	80067b8 <__ieee754_pow+0x1b8>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	2000      	movs	r0, #0
 80067b2:	492a      	ldr	r1, [pc, #168]	; (800685c <__ieee754_pow+0x25c>)
 80067b4:	f7f9 fffa 	bl	80007ac <__aeabi_ddiv>
 80067b8:	2d00      	cmp	r5, #0
 80067ba:	f6bf af40 	bge.w	800663e <__ieee754_pow+0x3e>
 80067be:	9b04      	ldr	r3, [sp, #16]
 80067c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80067c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80067c8:	431c      	orrs	r4, r3
 80067ca:	d108      	bne.n	80067de <__ieee754_pow+0x1de>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4610      	mov	r0, r2
 80067d2:	4619      	mov	r1, r3
 80067d4:	f7f9 fd08 	bl	80001e8 <__aeabi_dsub>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	e78f      	b.n	80066fe <__ieee754_pow+0xfe>
 80067de:	9b04      	ldr	r3, [sp, #16]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	f47f af2c 	bne.w	800663e <__ieee754_pow+0x3e>
 80067e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067ea:	4619      	mov	r1, r3
 80067ec:	e727      	b.n	800663e <__ieee754_pow+0x3e>
 80067ee:	0feb      	lsrs	r3, r5, #31
 80067f0:	3b01      	subs	r3, #1
 80067f2:	9306      	str	r3, [sp, #24]
 80067f4:	9a06      	ldr	r2, [sp, #24]
 80067f6:	9b04      	ldr	r3, [sp, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	d102      	bne.n	8006802 <__ieee754_pow+0x202>
 80067fc:	4632      	mov	r2, r6
 80067fe:	463b      	mov	r3, r7
 8006800:	e7e6      	b.n	80067d0 <__ieee754_pow+0x1d0>
 8006802:	4b19      	ldr	r3, [pc, #100]	; (8006868 <__ieee754_pow+0x268>)
 8006804:	4598      	cmp	r8, r3
 8006806:	f340 80fb 	ble.w	8006a00 <__ieee754_pow+0x400>
 800680a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800680e:	4598      	cmp	r8, r3
 8006810:	4b13      	ldr	r3, [pc, #76]	; (8006860 <__ieee754_pow+0x260>)
 8006812:	dd0c      	ble.n	800682e <__ieee754_pow+0x22e>
 8006814:	429c      	cmp	r4, r3
 8006816:	dc0f      	bgt.n	8006838 <__ieee754_pow+0x238>
 8006818:	f1b9 0f00 	cmp.w	r9, #0
 800681c:	da0f      	bge.n	800683e <__ieee754_pow+0x23e>
 800681e:	2000      	movs	r0, #0
 8006820:	b009      	add	sp, #36	; 0x24
 8006822:	ecbd 8b06 	vpop	{d8-d10}
 8006826:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	f000 beca 	b.w	80075c2 <__math_oflow>
 800682e:	429c      	cmp	r4, r3
 8006830:	dbf2      	blt.n	8006818 <__ieee754_pow+0x218>
 8006832:	4b0a      	ldr	r3, [pc, #40]	; (800685c <__ieee754_pow+0x25c>)
 8006834:	429c      	cmp	r4, r3
 8006836:	dd19      	ble.n	800686c <__ieee754_pow+0x26c>
 8006838:	f1b9 0f00 	cmp.w	r9, #0
 800683c:	dcef      	bgt.n	800681e <__ieee754_pow+0x21e>
 800683e:	2000      	movs	r0, #0
 8006840:	b009      	add	sp, #36	; 0x24
 8006842:	ecbd 8b06 	vpop	{d8-d10}
 8006846:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	f000 beb1 	b.w	80075b0 <__math_uflow>
 800684e:	bf00      	nop
 8006850:	fff00000 	.word	0xfff00000
 8006854:	7ff00000 	.word	0x7ff00000
 8006858:	433fffff 	.word	0x433fffff
 800685c:	3ff00000 	.word	0x3ff00000
 8006860:	3fefffff 	.word	0x3fefffff
 8006864:	3fe00000 	.word	0x3fe00000
 8006868:	41e00000 	.word	0x41e00000
 800686c:	4b60      	ldr	r3, [pc, #384]	; (80069f0 <__ieee754_pow+0x3f0>)
 800686e:	2200      	movs	r2, #0
 8006870:	f7f9 fcba 	bl	80001e8 <__aeabi_dsub>
 8006874:	a354      	add	r3, pc, #336	; (adr r3, 80069c8 <__ieee754_pow+0x3c8>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	4604      	mov	r4, r0
 800687c:	460d      	mov	r5, r1
 800687e:	f7f9 fe6b 	bl	8000558 <__aeabi_dmul>
 8006882:	a353      	add	r3, pc, #332	; (adr r3, 80069d0 <__ieee754_pow+0x3d0>)
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	4606      	mov	r6, r0
 800688a:	460f      	mov	r7, r1
 800688c:	4620      	mov	r0, r4
 800688e:	4629      	mov	r1, r5
 8006890:	f7f9 fe62 	bl	8000558 <__aeabi_dmul>
 8006894:	4b57      	ldr	r3, [pc, #348]	; (80069f4 <__ieee754_pow+0x3f4>)
 8006896:	4682      	mov	sl, r0
 8006898:	468b      	mov	fp, r1
 800689a:	2200      	movs	r2, #0
 800689c:	4620      	mov	r0, r4
 800689e:	4629      	mov	r1, r5
 80068a0:	f7f9 fe5a 	bl	8000558 <__aeabi_dmul>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	a14b      	add	r1, pc, #300	; (adr r1, 80069d8 <__ieee754_pow+0x3d8>)
 80068aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068ae:	f7f9 fc9b 	bl	80001e8 <__aeabi_dsub>
 80068b2:	4622      	mov	r2, r4
 80068b4:	462b      	mov	r3, r5
 80068b6:	f7f9 fe4f 	bl	8000558 <__aeabi_dmul>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	2000      	movs	r0, #0
 80068c0:	494d      	ldr	r1, [pc, #308]	; (80069f8 <__ieee754_pow+0x3f8>)
 80068c2:	f7f9 fc91 	bl	80001e8 <__aeabi_dsub>
 80068c6:	4622      	mov	r2, r4
 80068c8:	4680      	mov	r8, r0
 80068ca:	4689      	mov	r9, r1
 80068cc:	462b      	mov	r3, r5
 80068ce:	4620      	mov	r0, r4
 80068d0:	4629      	mov	r1, r5
 80068d2:	f7f9 fe41 	bl	8000558 <__aeabi_dmul>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4640      	mov	r0, r8
 80068dc:	4649      	mov	r1, r9
 80068de:	f7f9 fe3b 	bl	8000558 <__aeabi_dmul>
 80068e2:	a33f      	add	r3, pc, #252	; (adr r3, 80069e0 <__ieee754_pow+0x3e0>)
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f7f9 fe36 	bl	8000558 <__aeabi_dmul>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4650      	mov	r0, sl
 80068f2:	4659      	mov	r1, fp
 80068f4:	f7f9 fc78 	bl	80001e8 <__aeabi_dsub>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4680      	mov	r8, r0
 80068fe:	4689      	mov	r9, r1
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	f7f9 fc72 	bl	80001ec <__adddf3>
 8006908:	2000      	movs	r0, #0
 800690a:	4632      	mov	r2, r6
 800690c:	463b      	mov	r3, r7
 800690e:	4604      	mov	r4, r0
 8006910:	460d      	mov	r5, r1
 8006912:	f7f9 fc69 	bl	80001e8 <__aeabi_dsub>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f7f9 fc63 	bl	80001e8 <__aeabi_dsub>
 8006922:	9b04      	ldr	r3, [sp, #16]
 8006924:	9a06      	ldr	r2, [sp, #24]
 8006926:	3b01      	subs	r3, #1
 8006928:	4313      	orrs	r3, r2
 800692a:	4682      	mov	sl, r0
 800692c:	468b      	mov	fp, r1
 800692e:	f040 81e7 	bne.w	8006d00 <__ieee754_pow+0x700>
 8006932:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80069e8 <__ieee754_pow+0x3e8>
 8006936:	eeb0 8a47 	vmov.f32	s16, s14
 800693a:	eef0 8a67 	vmov.f32	s17, s15
 800693e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006942:	2600      	movs	r6, #0
 8006944:	4632      	mov	r2, r6
 8006946:	463b      	mov	r3, r7
 8006948:	e9dd 0100 	ldrd	r0, r1, [sp]
 800694c:	f7f9 fc4c 	bl	80001e8 <__aeabi_dsub>
 8006950:	4622      	mov	r2, r4
 8006952:	462b      	mov	r3, r5
 8006954:	f7f9 fe00 	bl	8000558 <__aeabi_dmul>
 8006958:	e9dd 2300 	ldrd	r2, r3, [sp]
 800695c:	4680      	mov	r8, r0
 800695e:	4689      	mov	r9, r1
 8006960:	4650      	mov	r0, sl
 8006962:	4659      	mov	r1, fp
 8006964:	f7f9 fdf8 	bl	8000558 <__aeabi_dmul>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4640      	mov	r0, r8
 800696e:	4649      	mov	r1, r9
 8006970:	f7f9 fc3c 	bl	80001ec <__adddf3>
 8006974:	4632      	mov	r2, r6
 8006976:	463b      	mov	r3, r7
 8006978:	4680      	mov	r8, r0
 800697a:	4689      	mov	r9, r1
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7f9 fdea 	bl	8000558 <__aeabi_dmul>
 8006984:	460b      	mov	r3, r1
 8006986:	4604      	mov	r4, r0
 8006988:	460d      	mov	r5, r1
 800698a:	4602      	mov	r2, r0
 800698c:	4649      	mov	r1, r9
 800698e:	4640      	mov	r0, r8
 8006990:	f7f9 fc2c 	bl	80001ec <__adddf3>
 8006994:	4b19      	ldr	r3, [pc, #100]	; (80069fc <__ieee754_pow+0x3fc>)
 8006996:	4299      	cmp	r1, r3
 8006998:	ec45 4b19 	vmov	d9, r4, r5
 800699c:	4606      	mov	r6, r0
 800699e:	460f      	mov	r7, r1
 80069a0:	468b      	mov	fp, r1
 80069a2:	f340 82f0 	ble.w	8006f86 <__ieee754_pow+0x986>
 80069a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80069aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80069ae:	4303      	orrs	r3, r0
 80069b0:	f000 81e4 	beq.w	8006d7c <__ieee754_pow+0x77c>
 80069b4:	ec51 0b18 	vmov	r0, r1, d8
 80069b8:	2200      	movs	r2, #0
 80069ba:	2300      	movs	r3, #0
 80069bc:	f7fa f83e 	bl	8000a3c <__aeabi_dcmplt>
 80069c0:	3800      	subs	r0, #0
 80069c2:	bf18      	it	ne
 80069c4:	2001      	movne	r0, #1
 80069c6:	e72b      	b.n	8006820 <__ieee754_pow+0x220>
 80069c8:	60000000 	.word	0x60000000
 80069cc:	3ff71547 	.word	0x3ff71547
 80069d0:	f85ddf44 	.word	0xf85ddf44
 80069d4:	3e54ae0b 	.word	0x3e54ae0b
 80069d8:	55555555 	.word	0x55555555
 80069dc:	3fd55555 	.word	0x3fd55555
 80069e0:	652b82fe 	.word	0x652b82fe
 80069e4:	3ff71547 	.word	0x3ff71547
 80069e8:	00000000 	.word	0x00000000
 80069ec:	bff00000 	.word	0xbff00000
 80069f0:	3ff00000 	.word	0x3ff00000
 80069f4:	3fd00000 	.word	0x3fd00000
 80069f8:	3fe00000 	.word	0x3fe00000
 80069fc:	408fffff 	.word	0x408fffff
 8006a00:	4bd5      	ldr	r3, [pc, #852]	; (8006d58 <__ieee754_pow+0x758>)
 8006a02:	402b      	ands	r3, r5
 8006a04:	2200      	movs	r2, #0
 8006a06:	b92b      	cbnz	r3, 8006a14 <__ieee754_pow+0x414>
 8006a08:	4bd4      	ldr	r3, [pc, #848]	; (8006d5c <__ieee754_pow+0x75c>)
 8006a0a:	f7f9 fda5 	bl	8000558 <__aeabi_dmul>
 8006a0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006a12:	460c      	mov	r4, r1
 8006a14:	1523      	asrs	r3, r4, #20
 8006a16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a1a:	4413      	add	r3, r2
 8006a1c:	9305      	str	r3, [sp, #20]
 8006a1e:	4bd0      	ldr	r3, [pc, #832]	; (8006d60 <__ieee754_pow+0x760>)
 8006a20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006a24:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006a28:	429c      	cmp	r4, r3
 8006a2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a2e:	dd08      	ble.n	8006a42 <__ieee754_pow+0x442>
 8006a30:	4bcc      	ldr	r3, [pc, #816]	; (8006d64 <__ieee754_pow+0x764>)
 8006a32:	429c      	cmp	r4, r3
 8006a34:	f340 8162 	ble.w	8006cfc <__ieee754_pow+0x6fc>
 8006a38:	9b05      	ldr	r3, [sp, #20]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006a42:	2400      	movs	r4, #0
 8006a44:	00e3      	lsls	r3, r4, #3
 8006a46:	9307      	str	r3, [sp, #28]
 8006a48:	4bc7      	ldr	r3, [pc, #796]	; (8006d68 <__ieee754_pow+0x768>)
 8006a4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a4e:	ed93 7b00 	vldr	d7, [r3]
 8006a52:	4629      	mov	r1, r5
 8006a54:	ec53 2b17 	vmov	r2, r3, d7
 8006a58:	eeb0 9a47 	vmov.f32	s18, s14
 8006a5c:	eef0 9a67 	vmov.f32	s19, s15
 8006a60:	4682      	mov	sl, r0
 8006a62:	f7f9 fbc1 	bl	80001e8 <__aeabi_dsub>
 8006a66:	4652      	mov	r2, sl
 8006a68:	4606      	mov	r6, r0
 8006a6a:	460f      	mov	r7, r1
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	ec51 0b19 	vmov	r0, r1, d9
 8006a72:	f7f9 fbbb 	bl	80001ec <__adddf3>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	49bb      	ldr	r1, [pc, #748]	; (8006d6c <__ieee754_pow+0x76c>)
 8006a7e:	f7f9 fe95 	bl	80007ac <__aeabi_ddiv>
 8006a82:	ec41 0b1a 	vmov	d10, r0, r1
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	f7f9 fd63 	bl	8000558 <__aeabi_dmul>
 8006a92:	2300      	movs	r3, #0
 8006a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a98:	9302      	str	r3, [sp, #8]
 8006a9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a9e:	46ab      	mov	fp, r5
 8006aa0:	106d      	asrs	r5, r5, #1
 8006aa2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006aa6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006aaa:	ec41 0b18 	vmov	d8, r0, r1
 8006aae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	4614      	mov	r4, r2
 8006aba:	461d      	mov	r5, r3
 8006abc:	f7f9 fd4c 	bl	8000558 <__aeabi_dmul>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	f7f9 fb8e 	bl	80001e8 <__aeabi_dsub>
 8006acc:	ec53 2b19 	vmov	r2, r3, d9
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	460f      	mov	r7, r1
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	f7f9 fb86 	bl	80001e8 <__aeabi_dsub>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4650      	mov	r0, sl
 8006ae2:	4659      	mov	r1, fp
 8006ae4:	f7f9 fb80 	bl	80001e8 <__aeabi_dsub>
 8006ae8:	4642      	mov	r2, r8
 8006aea:	464b      	mov	r3, r9
 8006aec:	f7f9 fd34 	bl	8000558 <__aeabi_dmul>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4630      	mov	r0, r6
 8006af6:	4639      	mov	r1, r7
 8006af8:	f7f9 fb76 	bl	80001e8 <__aeabi_dsub>
 8006afc:	ec53 2b1a 	vmov	r2, r3, d10
 8006b00:	f7f9 fd2a 	bl	8000558 <__aeabi_dmul>
 8006b04:	ec53 2b18 	vmov	r2, r3, d8
 8006b08:	ec41 0b19 	vmov	d9, r0, r1
 8006b0c:	ec51 0b18 	vmov	r0, r1, d8
 8006b10:	f7f9 fd22 	bl	8000558 <__aeabi_dmul>
 8006b14:	a37c      	add	r3, pc, #496	; (adr r3, 8006d08 <__ieee754_pow+0x708>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	460d      	mov	r5, r1
 8006b1e:	f7f9 fd1b 	bl	8000558 <__aeabi_dmul>
 8006b22:	a37b      	add	r3, pc, #492	; (adr r3, 8006d10 <__ieee754_pow+0x710>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f7f9 fb60 	bl	80001ec <__adddf3>
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	462b      	mov	r3, r5
 8006b30:	f7f9 fd12 	bl	8000558 <__aeabi_dmul>
 8006b34:	a378      	add	r3, pc, #480	; (adr r3, 8006d18 <__ieee754_pow+0x718>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	f7f9 fb57 	bl	80001ec <__adddf3>
 8006b3e:	4622      	mov	r2, r4
 8006b40:	462b      	mov	r3, r5
 8006b42:	f7f9 fd09 	bl	8000558 <__aeabi_dmul>
 8006b46:	a376      	add	r3, pc, #472	; (adr r3, 8006d20 <__ieee754_pow+0x720>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f7f9 fb4e 	bl	80001ec <__adddf3>
 8006b50:	4622      	mov	r2, r4
 8006b52:	462b      	mov	r3, r5
 8006b54:	f7f9 fd00 	bl	8000558 <__aeabi_dmul>
 8006b58:	a373      	add	r3, pc, #460	; (adr r3, 8006d28 <__ieee754_pow+0x728>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f7f9 fb45 	bl	80001ec <__adddf3>
 8006b62:	4622      	mov	r2, r4
 8006b64:	462b      	mov	r3, r5
 8006b66:	f7f9 fcf7 	bl	8000558 <__aeabi_dmul>
 8006b6a:	a371      	add	r3, pc, #452	; (adr r3, 8006d30 <__ieee754_pow+0x730>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f7f9 fb3c 	bl	80001ec <__adddf3>
 8006b74:	4622      	mov	r2, r4
 8006b76:	4606      	mov	r6, r0
 8006b78:	460f      	mov	r7, r1
 8006b7a:	462b      	mov	r3, r5
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4629      	mov	r1, r5
 8006b80:	f7f9 fcea 	bl	8000558 <__aeabi_dmul>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	4630      	mov	r0, r6
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	f7f9 fce4 	bl	8000558 <__aeabi_dmul>
 8006b90:	4642      	mov	r2, r8
 8006b92:	4604      	mov	r4, r0
 8006b94:	460d      	mov	r5, r1
 8006b96:	464b      	mov	r3, r9
 8006b98:	ec51 0b18 	vmov	r0, r1, d8
 8006b9c:	f7f9 fb26 	bl	80001ec <__adddf3>
 8006ba0:	ec53 2b19 	vmov	r2, r3, d9
 8006ba4:	f7f9 fcd8 	bl	8000558 <__aeabi_dmul>
 8006ba8:	4622      	mov	r2, r4
 8006baa:	462b      	mov	r3, r5
 8006bac:	f7f9 fb1e 	bl	80001ec <__adddf3>
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	4682      	mov	sl, r0
 8006bb4:	468b      	mov	fp, r1
 8006bb6:	464b      	mov	r3, r9
 8006bb8:	4640      	mov	r0, r8
 8006bba:	4649      	mov	r1, r9
 8006bbc:	f7f9 fccc 	bl	8000558 <__aeabi_dmul>
 8006bc0:	4b6b      	ldr	r3, [pc, #428]	; (8006d70 <__ieee754_pow+0x770>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	4606      	mov	r6, r0
 8006bc6:	460f      	mov	r7, r1
 8006bc8:	f7f9 fb10 	bl	80001ec <__adddf3>
 8006bcc:	4652      	mov	r2, sl
 8006bce:	465b      	mov	r3, fp
 8006bd0:	f7f9 fb0c 	bl	80001ec <__adddf3>
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	460d      	mov	r5, r1
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4640      	mov	r0, r8
 8006be0:	4649      	mov	r1, r9
 8006be2:	f7f9 fcb9 	bl	8000558 <__aeabi_dmul>
 8006be6:	4b62      	ldr	r3, [pc, #392]	; (8006d70 <__ieee754_pow+0x770>)
 8006be8:	4680      	mov	r8, r0
 8006bea:	4689      	mov	r9, r1
 8006bec:	2200      	movs	r2, #0
 8006bee:	4620      	mov	r0, r4
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	f7f9 faf9 	bl	80001e8 <__aeabi_dsub>
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	f7f9 faf5 	bl	80001e8 <__aeabi_dsub>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4650      	mov	r0, sl
 8006c04:	4659      	mov	r1, fp
 8006c06:	f7f9 faef 	bl	80001e8 <__aeabi_dsub>
 8006c0a:	ec53 2b18 	vmov	r2, r3, d8
 8006c0e:	f7f9 fca3 	bl	8000558 <__aeabi_dmul>
 8006c12:	4622      	mov	r2, r4
 8006c14:	4606      	mov	r6, r0
 8006c16:	460f      	mov	r7, r1
 8006c18:	462b      	mov	r3, r5
 8006c1a:	ec51 0b19 	vmov	r0, r1, d9
 8006c1e:	f7f9 fc9b 	bl	8000558 <__aeabi_dmul>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4630      	mov	r0, r6
 8006c28:	4639      	mov	r1, r7
 8006c2a:	f7f9 fadf 	bl	80001ec <__adddf3>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	460f      	mov	r7, r1
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4640      	mov	r0, r8
 8006c38:	4649      	mov	r1, r9
 8006c3a:	f7f9 fad7 	bl	80001ec <__adddf3>
 8006c3e:	a33e      	add	r3, pc, #248	; (adr r3, 8006d38 <__ieee754_pow+0x738>)
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	2000      	movs	r0, #0
 8006c46:	4604      	mov	r4, r0
 8006c48:	460d      	mov	r5, r1
 8006c4a:	f7f9 fc85 	bl	8000558 <__aeabi_dmul>
 8006c4e:	4642      	mov	r2, r8
 8006c50:	ec41 0b18 	vmov	d8, r0, r1
 8006c54:	464b      	mov	r3, r9
 8006c56:	4620      	mov	r0, r4
 8006c58:	4629      	mov	r1, r5
 8006c5a:	f7f9 fac5 	bl	80001e8 <__aeabi_dsub>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 fabf 	bl	80001e8 <__aeabi_dsub>
 8006c6a:	a335      	add	r3, pc, #212	; (adr r3, 8006d40 <__ieee754_pow+0x740>)
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f7f9 fc72 	bl	8000558 <__aeabi_dmul>
 8006c74:	a334      	add	r3, pc, #208	; (adr r3, 8006d48 <__ieee754_pow+0x748>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	460f      	mov	r7, r1
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7f9 fc69 	bl	8000558 <__aeabi_dmul>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	4639      	mov	r1, r7
 8006c8e:	f7f9 faad 	bl	80001ec <__adddf3>
 8006c92:	9a07      	ldr	r2, [sp, #28]
 8006c94:	4b37      	ldr	r3, [pc, #220]	; (8006d74 <__ieee754_pow+0x774>)
 8006c96:	4413      	add	r3, r2
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	f7f9 faa6 	bl	80001ec <__adddf3>
 8006ca0:	4682      	mov	sl, r0
 8006ca2:	9805      	ldr	r0, [sp, #20]
 8006ca4:	468b      	mov	fp, r1
 8006ca6:	f7f9 fbed 	bl	8000484 <__aeabi_i2d>
 8006caa:	9a07      	ldr	r2, [sp, #28]
 8006cac:	4b32      	ldr	r3, [pc, #200]	; (8006d78 <__ieee754_pow+0x778>)
 8006cae:	4413      	add	r3, r2
 8006cb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	4652      	mov	r2, sl
 8006cba:	465b      	mov	r3, fp
 8006cbc:	ec51 0b18 	vmov	r0, r1, d8
 8006cc0:	f7f9 fa94 	bl	80001ec <__adddf3>
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	f7f9 fa90 	bl	80001ec <__adddf3>
 8006ccc:	4632      	mov	r2, r6
 8006cce:	463b      	mov	r3, r7
 8006cd0:	f7f9 fa8c 	bl	80001ec <__adddf3>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	4632      	mov	r2, r6
 8006cd8:	463b      	mov	r3, r7
 8006cda:	4604      	mov	r4, r0
 8006cdc:	460d      	mov	r5, r1
 8006cde:	f7f9 fa83 	bl	80001e8 <__aeabi_dsub>
 8006ce2:	4642      	mov	r2, r8
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	f7f9 fa7f 	bl	80001e8 <__aeabi_dsub>
 8006cea:	ec53 2b18 	vmov	r2, r3, d8
 8006cee:	f7f9 fa7b 	bl	80001e8 <__aeabi_dsub>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	e610      	b.n	800691e <__ieee754_pow+0x31e>
 8006cfc:	2401      	movs	r4, #1
 8006cfe:	e6a1      	b.n	8006a44 <__ieee754_pow+0x444>
 8006d00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006d50 <__ieee754_pow+0x750>
 8006d04:	e617      	b.n	8006936 <__ieee754_pow+0x336>
 8006d06:	bf00      	nop
 8006d08:	4a454eef 	.word	0x4a454eef
 8006d0c:	3fca7e28 	.word	0x3fca7e28
 8006d10:	93c9db65 	.word	0x93c9db65
 8006d14:	3fcd864a 	.word	0x3fcd864a
 8006d18:	a91d4101 	.word	0xa91d4101
 8006d1c:	3fd17460 	.word	0x3fd17460
 8006d20:	518f264d 	.word	0x518f264d
 8006d24:	3fd55555 	.word	0x3fd55555
 8006d28:	db6fabff 	.word	0xdb6fabff
 8006d2c:	3fdb6db6 	.word	0x3fdb6db6
 8006d30:	33333303 	.word	0x33333303
 8006d34:	3fe33333 	.word	0x3fe33333
 8006d38:	e0000000 	.word	0xe0000000
 8006d3c:	3feec709 	.word	0x3feec709
 8006d40:	dc3a03fd 	.word	0xdc3a03fd
 8006d44:	3feec709 	.word	0x3feec709
 8006d48:	145b01f5 	.word	0x145b01f5
 8006d4c:	be3e2fe0 	.word	0xbe3e2fe0
 8006d50:	00000000 	.word	0x00000000
 8006d54:	3ff00000 	.word	0x3ff00000
 8006d58:	7ff00000 	.word	0x7ff00000
 8006d5c:	43400000 	.word	0x43400000
 8006d60:	0003988e 	.word	0x0003988e
 8006d64:	000bb679 	.word	0x000bb679
 8006d68:	08007ff8 	.word	0x08007ff8
 8006d6c:	3ff00000 	.word	0x3ff00000
 8006d70:	40080000 	.word	0x40080000
 8006d74:	08008018 	.word	0x08008018
 8006d78:	08008008 	.word	0x08008008
 8006d7c:	a3b3      	add	r3, pc, #716	; (adr r3, 800704c <__ieee754_pow+0xa4c>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	4640      	mov	r0, r8
 8006d84:	4649      	mov	r1, r9
 8006d86:	f7f9 fa31 	bl	80001ec <__adddf3>
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	ec41 0b1a 	vmov	d10, r0, r1
 8006d90:	462b      	mov	r3, r5
 8006d92:	4630      	mov	r0, r6
 8006d94:	4639      	mov	r1, r7
 8006d96:	f7f9 fa27 	bl	80001e8 <__aeabi_dsub>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	ec51 0b1a 	vmov	r0, r1, d10
 8006da2:	f7f9 fe69 	bl	8000a78 <__aeabi_dcmpgt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f47f ae04 	bne.w	80069b4 <__ieee754_pow+0x3b4>
 8006dac:	4aa2      	ldr	r2, [pc, #648]	; (8007038 <__ieee754_pow+0xa38>)
 8006dae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006db2:	4293      	cmp	r3, r2
 8006db4:	f340 8107 	ble.w	8006fc6 <__ieee754_pow+0x9c6>
 8006db8:	151b      	asrs	r3, r3, #20
 8006dba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006dbe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006dc2:	fa4a fa03 	asr.w	sl, sl, r3
 8006dc6:	44da      	add	sl, fp
 8006dc8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006dcc:	489b      	ldr	r0, [pc, #620]	; (800703c <__ieee754_pow+0xa3c>)
 8006dce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006dd2:	4108      	asrs	r0, r1
 8006dd4:	ea00 030a 	and.w	r3, r0, sl
 8006dd8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006ddc:	f1c1 0114 	rsb	r1, r1, #20
 8006de0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006de4:	fa4a fa01 	asr.w	sl, sl, r1
 8006de8:	f1bb 0f00 	cmp.w	fp, #0
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	4620      	mov	r0, r4
 8006df2:	4629      	mov	r1, r5
 8006df4:	bfb8      	it	lt
 8006df6:	f1ca 0a00 	rsblt	sl, sl, #0
 8006dfa:	f7f9 f9f5 	bl	80001e8 <__aeabi_dsub>
 8006dfe:	ec41 0b19 	vmov	d9, r0, r1
 8006e02:	4642      	mov	r2, r8
 8006e04:	464b      	mov	r3, r9
 8006e06:	ec51 0b19 	vmov	r0, r1, d9
 8006e0a:	f7f9 f9ef 	bl	80001ec <__adddf3>
 8006e0e:	a37a      	add	r3, pc, #488	; (adr r3, 8006ff8 <__ieee754_pow+0x9f8>)
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	2000      	movs	r0, #0
 8006e16:	4604      	mov	r4, r0
 8006e18:	460d      	mov	r5, r1
 8006e1a:	f7f9 fb9d 	bl	8000558 <__aeabi_dmul>
 8006e1e:	ec53 2b19 	vmov	r2, r3, d9
 8006e22:	4606      	mov	r6, r0
 8006e24:	460f      	mov	r7, r1
 8006e26:	4620      	mov	r0, r4
 8006e28:	4629      	mov	r1, r5
 8006e2a:	f7f9 f9dd 	bl	80001e8 <__aeabi_dsub>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4640      	mov	r0, r8
 8006e34:	4649      	mov	r1, r9
 8006e36:	f7f9 f9d7 	bl	80001e8 <__aeabi_dsub>
 8006e3a:	a371      	add	r3, pc, #452	; (adr r3, 8007000 <__ieee754_pow+0xa00>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fb8a 	bl	8000558 <__aeabi_dmul>
 8006e44:	a370      	add	r3, pc, #448	; (adr r3, 8007008 <__ieee754_pow+0xa08>)
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	4689      	mov	r9, r1
 8006e4e:	4620      	mov	r0, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	f7f9 fb81 	bl	8000558 <__aeabi_dmul>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	f7f9 f9c5 	bl	80001ec <__adddf3>
 8006e62:	4604      	mov	r4, r0
 8006e64:	460d      	mov	r5, r1
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	f7f9 f9bd 	bl	80001ec <__adddf3>
 8006e72:	4632      	mov	r2, r6
 8006e74:	463b      	mov	r3, r7
 8006e76:	4680      	mov	r8, r0
 8006e78:	4689      	mov	r9, r1
 8006e7a:	f7f9 f9b5 	bl	80001e8 <__aeabi_dsub>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	f7f9 f9af 	bl	80001e8 <__aeabi_dsub>
 8006e8a:	4642      	mov	r2, r8
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	460f      	mov	r7, r1
 8006e90:	464b      	mov	r3, r9
 8006e92:	4640      	mov	r0, r8
 8006e94:	4649      	mov	r1, r9
 8006e96:	f7f9 fb5f 	bl	8000558 <__aeabi_dmul>
 8006e9a:	a35d      	add	r3, pc, #372	; (adr r3, 8007010 <__ieee754_pow+0xa10>)
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	460d      	mov	r5, r1
 8006ea4:	f7f9 fb58 	bl	8000558 <__aeabi_dmul>
 8006ea8:	a35b      	add	r3, pc, #364	; (adr r3, 8007018 <__ieee754_pow+0xa18>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	f7f9 f99b 	bl	80001e8 <__aeabi_dsub>
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	462b      	mov	r3, r5
 8006eb6:	f7f9 fb4f 	bl	8000558 <__aeabi_dmul>
 8006eba:	a359      	add	r3, pc, #356	; (adr r3, 8007020 <__ieee754_pow+0xa20>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f7f9 f994 	bl	80001ec <__adddf3>
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	462b      	mov	r3, r5
 8006ec8:	f7f9 fb46 	bl	8000558 <__aeabi_dmul>
 8006ecc:	a356      	add	r3, pc, #344	; (adr r3, 8007028 <__ieee754_pow+0xa28>)
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f7f9 f989 	bl	80001e8 <__aeabi_dsub>
 8006ed6:	4622      	mov	r2, r4
 8006ed8:	462b      	mov	r3, r5
 8006eda:	f7f9 fb3d 	bl	8000558 <__aeabi_dmul>
 8006ede:	a354      	add	r3, pc, #336	; (adr r3, 8007030 <__ieee754_pow+0xa30>)
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	f7f9 f982 	bl	80001ec <__adddf3>
 8006ee8:	4622      	mov	r2, r4
 8006eea:	462b      	mov	r3, r5
 8006eec:	f7f9 fb34 	bl	8000558 <__aeabi_dmul>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	f7f9 f976 	bl	80001e8 <__aeabi_dsub>
 8006efc:	4604      	mov	r4, r0
 8006efe:	460d      	mov	r5, r1
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4640      	mov	r0, r8
 8006f06:	4649      	mov	r1, r9
 8006f08:	f7f9 fb26 	bl	8000558 <__aeabi_dmul>
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	ec41 0b19 	vmov	d9, r0, r1
 8006f12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f7f9 f965 	bl	80001e8 <__aeabi_dsub>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	ec51 0b19 	vmov	r0, r1, d9
 8006f26:	f7f9 fc41 	bl	80007ac <__aeabi_ddiv>
 8006f2a:	4632      	mov	r2, r6
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	460d      	mov	r5, r1
 8006f30:	463b      	mov	r3, r7
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 fb0f 	bl	8000558 <__aeabi_dmul>
 8006f3a:	4632      	mov	r2, r6
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	f7f9 f955 	bl	80001ec <__adddf3>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	f7f9 f94d 	bl	80001e8 <__aeabi_dsub>
 8006f4e:	4642      	mov	r2, r8
 8006f50:	464b      	mov	r3, r9
 8006f52:	f7f9 f949 	bl	80001e8 <__aeabi_dsub>
 8006f56:	460b      	mov	r3, r1
 8006f58:	4602      	mov	r2, r0
 8006f5a:	4939      	ldr	r1, [pc, #228]	; (8007040 <__ieee754_pow+0xa40>)
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	f7f9 f943 	bl	80001e8 <__aeabi_dsub>
 8006f62:	ec41 0b10 	vmov	d0, r0, r1
 8006f66:	ee10 3a90 	vmov	r3, s1
 8006f6a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f72:	da2b      	bge.n	8006fcc <__ieee754_pow+0x9cc>
 8006f74:	4650      	mov	r0, sl
 8006f76:	f000 fa7f 	bl	8007478 <scalbn>
 8006f7a:	ec51 0b10 	vmov	r0, r1, d0
 8006f7e:	ec53 2b18 	vmov	r2, r3, d8
 8006f82:	f7ff bbee 	b.w	8006762 <__ieee754_pow+0x162>
 8006f86:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <__ieee754_pow+0xa44>)
 8006f88:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006f8c:	429e      	cmp	r6, r3
 8006f8e:	f77f af0d 	ble.w	8006dac <__ieee754_pow+0x7ac>
 8006f92:	4b2d      	ldr	r3, [pc, #180]	; (8007048 <__ieee754_pow+0xa48>)
 8006f94:	440b      	add	r3, r1
 8006f96:	4303      	orrs	r3, r0
 8006f98:	d009      	beq.n	8006fae <__ieee754_pow+0x9ae>
 8006f9a:	ec51 0b18 	vmov	r0, r1, d8
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f7f9 fd4b 	bl	8000a3c <__aeabi_dcmplt>
 8006fa6:	3800      	subs	r0, #0
 8006fa8:	bf18      	it	ne
 8006faa:	2001      	movne	r0, #1
 8006fac:	e448      	b.n	8006840 <__ieee754_pow+0x240>
 8006fae:	4622      	mov	r2, r4
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	f7f9 f919 	bl	80001e8 <__aeabi_dsub>
 8006fb6:	4642      	mov	r2, r8
 8006fb8:	464b      	mov	r3, r9
 8006fba:	f7f9 fd53 	bl	8000a64 <__aeabi_dcmpge>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	f43f aef4 	beq.w	8006dac <__ieee754_pow+0x7ac>
 8006fc4:	e7e9      	b.n	8006f9a <__ieee754_pow+0x99a>
 8006fc6:	f04f 0a00 	mov.w	sl, #0
 8006fca:	e71a      	b.n	8006e02 <__ieee754_pow+0x802>
 8006fcc:	ec51 0b10 	vmov	r0, r1, d0
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	e7d4      	b.n	8006f7e <__ieee754_pow+0x97e>
 8006fd4:	491a      	ldr	r1, [pc, #104]	; (8007040 <__ieee754_pow+0xa40>)
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	f7ff bb31 	b.w	800663e <__ieee754_pow+0x3e>
 8006fdc:	2000      	movs	r0, #0
 8006fde:	2100      	movs	r1, #0
 8006fe0:	f7ff bb2d 	b.w	800663e <__ieee754_pow+0x3e>
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	f7ff bb29 	b.w	800663e <__ieee754_pow+0x3e>
 8006fec:	9204      	str	r2, [sp, #16]
 8006fee:	f7ff bb7b 	b.w	80066e8 <__ieee754_pow+0xe8>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f7ff bb65 	b.w	80066c2 <__ieee754_pow+0xc2>
 8006ff8:	00000000 	.word	0x00000000
 8006ffc:	3fe62e43 	.word	0x3fe62e43
 8007000:	fefa39ef 	.word	0xfefa39ef
 8007004:	3fe62e42 	.word	0x3fe62e42
 8007008:	0ca86c39 	.word	0x0ca86c39
 800700c:	be205c61 	.word	0xbe205c61
 8007010:	72bea4d0 	.word	0x72bea4d0
 8007014:	3e663769 	.word	0x3e663769
 8007018:	c5d26bf1 	.word	0xc5d26bf1
 800701c:	3ebbbd41 	.word	0x3ebbbd41
 8007020:	af25de2c 	.word	0xaf25de2c
 8007024:	3f11566a 	.word	0x3f11566a
 8007028:	16bebd93 	.word	0x16bebd93
 800702c:	3f66c16c 	.word	0x3f66c16c
 8007030:	5555553e 	.word	0x5555553e
 8007034:	3fc55555 	.word	0x3fc55555
 8007038:	3fe00000 	.word	0x3fe00000
 800703c:	fff00000 	.word	0xfff00000
 8007040:	3ff00000 	.word	0x3ff00000
 8007044:	4090cbff 	.word	0x4090cbff
 8007048:	3f6f3400 	.word	0x3f6f3400
 800704c:	652b82fe 	.word	0x652b82fe
 8007050:	3c971547 	.word	0x3c971547
 8007054:	00000000 	.word	0x00000000

08007058 <__ieee754_rem_pio2>:
 8007058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	ed2d 8b02 	vpush	{d8}
 8007060:	ec55 4b10 	vmov	r4, r5, d0
 8007064:	4bca      	ldr	r3, [pc, #808]	; (8007390 <__ieee754_rem_pio2+0x338>)
 8007066:	b08b      	sub	sp, #44	; 0x2c
 8007068:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800706c:	4598      	cmp	r8, r3
 800706e:	4682      	mov	sl, r0
 8007070:	9502      	str	r5, [sp, #8]
 8007072:	dc08      	bgt.n	8007086 <__ieee754_rem_pio2+0x2e>
 8007074:	2200      	movs	r2, #0
 8007076:	2300      	movs	r3, #0
 8007078:	ed80 0b00 	vstr	d0, [r0]
 800707c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007080:	f04f 0b00 	mov.w	fp, #0
 8007084:	e028      	b.n	80070d8 <__ieee754_rem_pio2+0x80>
 8007086:	4bc3      	ldr	r3, [pc, #780]	; (8007394 <__ieee754_rem_pio2+0x33c>)
 8007088:	4598      	cmp	r8, r3
 800708a:	dc78      	bgt.n	800717e <__ieee754_rem_pio2+0x126>
 800708c:	9b02      	ldr	r3, [sp, #8]
 800708e:	4ec2      	ldr	r6, [pc, #776]	; (8007398 <__ieee754_rem_pio2+0x340>)
 8007090:	2b00      	cmp	r3, #0
 8007092:	ee10 0a10 	vmov	r0, s0
 8007096:	a3b0      	add	r3, pc, #704	; (adr r3, 8007358 <__ieee754_rem_pio2+0x300>)
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	4629      	mov	r1, r5
 800709e:	dd39      	ble.n	8007114 <__ieee754_rem_pio2+0xbc>
 80070a0:	f7f9 f8a2 	bl	80001e8 <__aeabi_dsub>
 80070a4:	45b0      	cmp	r8, r6
 80070a6:	4604      	mov	r4, r0
 80070a8:	460d      	mov	r5, r1
 80070aa:	d01b      	beq.n	80070e4 <__ieee754_rem_pio2+0x8c>
 80070ac:	a3ac      	add	r3, pc, #688	; (adr r3, 8007360 <__ieee754_rem_pio2+0x308>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f7f9 f899 	bl	80001e8 <__aeabi_dsub>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	e9ca 2300 	strd	r2, r3, [sl]
 80070be:	4620      	mov	r0, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	f7f9 f891 	bl	80001e8 <__aeabi_dsub>
 80070c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007360 <__ieee754_rem_pio2+0x308>)
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f7f9 f88c 	bl	80001e8 <__aeabi_dsub>
 80070d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80070d4:	f04f 0b01 	mov.w	fp, #1
 80070d8:	4658      	mov	r0, fp
 80070da:	b00b      	add	sp, #44	; 0x2c
 80070dc:	ecbd 8b02 	vpop	{d8}
 80070e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e4:	a3a0      	add	r3, pc, #640	; (adr r3, 8007368 <__ieee754_rem_pio2+0x310>)
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f7f9 f87d 	bl	80001e8 <__aeabi_dsub>
 80070ee:	a3a0      	add	r3, pc, #640	; (adr r3, 8007370 <__ieee754_rem_pio2+0x318>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	4604      	mov	r4, r0
 80070f6:	460d      	mov	r5, r1
 80070f8:	f7f9 f876 	bl	80001e8 <__aeabi_dsub>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	e9ca 2300 	strd	r2, r3, [sl]
 8007104:	4620      	mov	r0, r4
 8007106:	4629      	mov	r1, r5
 8007108:	f7f9 f86e 	bl	80001e8 <__aeabi_dsub>
 800710c:	a398      	add	r3, pc, #608	; (adr r3, 8007370 <__ieee754_rem_pio2+0x318>)
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	e7db      	b.n	80070cc <__ieee754_rem_pio2+0x74>
 8007114:	f7f9 f86a 	bl	80001ec <__adddf3>
 8007118:	45b0      	cmp	r8, r6
 800711a:	4604      	mov	r4, r0
 800711c:	460d      	mov	r5, r1
 800711e:	d016      	beq.n	800714e <__ieee754_rem_pio2+0xf6>
 8007120:	a38f      	add	r3, pc, #572	; (adr r3, 8007360 <__ieee754_rem_pio2+0x308>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f7f9 f861 	bl	80001ec <__adddf3>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	e9ca 2300 	strd	r2, r3, [sl]
 8007132:	4620      	mov	r0, r4
 8007134:	4629      	mov	r1, r5
 8007136:	f7f9 f857 	bl	80001e8 <__aeabi_dsub>
 800713a:	a389      	add	r3, pc, #548	; (adr r3, 8007360 <__ieee754_rem_pio2+0x308>)
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f7f9 f854 	bl	80001ec <__adddf3>
 8007144:	f04f 3bff 	mov.w	fp, #4294967295
 8007148:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800714c:	e7c4      	b.n	80070d8 <__ieee754_rem_pio2+0x80>
 800714e:	a386      	add	r3, pc, #536	; (adr r3, 8007368 <__ieee754_rem_pio2+0x310>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f7f9 f84a 	bl	80001ec <__adddf3>
 8007158:	a385      	add	r3, pc, #532	; (adr r3, 8007370 <__ieee754_rem_pio2+0x318>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	4604      	mov	r4, r0
 8007160:	460d      	mov	r5, r1
 8007162:	f7f9 f843 	bl	80001ec <__adddf3>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	e9ca 2300 	strd	r2, r3, [sl]
 800716e:	4620      	mov	r0, r4
 8007170:	4629      	mov	r1, r5
 8007172:	f7f9 f839 	bl	80001e8 <__aeabi_dsub>
 8007176:	a37e      	add	r3, pc, #504	; (adr r3, 8007370 <__ieee754_rem_pio2+0x318>)
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	e7e0      	b.n	8007140 <__ieee754_rem_pio2+0xe8>
 800717e:	4b87      	ldr	r3, [pc, #540]	; (800739c <__ieee754_rem_pio2+0x344>)
 8007180:	4598      	cmp	r8, r3
 8007182:	f300 80d8 	bgt.w	8007336 <__ieee754_rem_pio2+0x2de>
 8007186:	f000 f96d 	bl	8007464 <fabs>
 800718a:	ec55 4b10 	vmov	r4, r5, d0
 800718e:	ee10 0a10 	vmov	r0, s0
 8007192:	a379      	add	r3, pc, #484	; (adr r3, 8007378 <__ieee754_rem_pio2+0x320>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	4629      	mov	r1, r5
 800719a:	f7f9 f9dd 	bl	8000558 <__aeabi_dmul>
 800719e:	4b80      	ldr	r3, [pc, #512]	; (80073a0 <__ieee754_rem_pio2+0x348>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	f7f9 f823 	bl	80001ec <__adddf3>
 80071a6:	f7f9 fc87 	bl	8000ab8 <__aeabi_d2iz>
 80071aa:	4683      	mov	fp, r0
 80071ac:	f7f9 f96a 	bl	8000484 <__aeabi_i2d>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	ec43 2b18 	vmov	d8, r2, r3
 80071b8:	a367      	add	r3, pc, #412	; (adr r3, 8007358 <__ieee754_rem_pio2+0x300>)
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	f7f9 f9cb 	bl	8000558 <__aeabi_dmul>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4620      	mov	r0, r4
 80071c8:	4629      	mov	r1, r5
 80071ca:	f7f9 f80d 	bl	80001e8 <__aeabi_dsub>
 80071ce:	a364      	add	r3, pc, #400	; (adr r3, 8007360 <__ieee754_rem_pio2+0x308>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	4606      	mov	r6, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	ec51 0b18 	vmov	r0, r1, d8
 80071dc:	f7f9 f9bc 	bl	8000558 <__aeabi_dmul>
 80071e0:	f1bb 0f1f 	cmp.w	fp, #31
 80071e4:	4604      	mov	r4, r0
 80071e6:	460d      	mov	r5, r1
 80071e8:	dc0d      	bgt.n	8007206 <__ieee754_rem_pio2+0x1ae>
 80071ea:	4b6e      	ldr	r3, [pc, #440]	; (80073a4 <__ieee754_rem_pio2+0x34c>)
 80071ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 80071f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f4:	4543      	cmp	r3, r8
 80071f6:	d006      	beq.n	8007206 <__ieee754_rem_pio2+0x1ae>
 80071f8:	4622      	mov	r2, r4
 80071fa:	462b      	mov	r3, r5
 80071fc:	4630      	mov	r0, r6
 80071fe:	4639      	mov	r1, r7
 8007200:	f7f8 fff2 	bl	80001e8 <__aeabi_dsub>
 8007204:	e00e      	b.n	8007224 <__ieee754_rem_pio2+0x1cc>
 8007206:	462b      	mov	r3, r5
 8007208:	4622      	mov	r2, r4
 800720a:	4630      	mov	r0, r6
 800720c:	4639      	mov	r1, r7
 800720e:	f7f8 ffeb 	bl	80001e8 <__aeabi_dsub>
 8007212:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007216:	9303      	str	r3, [sp, #12]
 8007218:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800721c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007220:	2b10      	cmp	r3, #16
 8007222:	dc02      	bgt.n	800722a <__ieee754_rem_pio2+0x1d2>
 8007224:	e9ca 0100 	strd	r0, r1, [sl]
 8007228:	e039      	b.n	800729e <__ieee754_rem_pio2+0x246>
 800722a:	a34f      	add	r3, pc, #316	; (adr r3, 8007368 <__ieee754_rem_pio2+0x310>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	ec51 0b18 	vmov	r0, r1, d8
 8007234:	f7f9 f990 	bl	8000558 <__aeabi_dmul>
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f8 ffd0 	bl	80001e8 <__aeabi_dsub>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4680      	mov	r8, r0
 800724e:	4689      	mov	r9, r1
 8007250:	4630      	mov	r0, r6
 8007252:	4639      	mov	r1, r7
 8007254:	f7f8 ffc8 	bl	80001e8 <__aeabi_dsub>
 8007258:	4622      	mov	r2, r4
 800725a:	462b      	mov	r3, r5
 800725c:	f7f8 ffc4 	bl	80001e8 <__aeabi_dsub>
 8007260:	a343      	add	r3, pc, #268	; (adr r3, 8007370 <__ieee754_rem_pio2+0x318>)
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	4604      	mov	r4, r0
 8007268:	460d      	mov	r5, r1
 800726a:	ec51 0b18 	vmov	r0, r1, d8
 800726e:	f7f9 f973 	bl	8000558 <__aeabi_dmul>
 8007272:	4622      	mov	r2, r4
 8007274:	462b      	mov	r3, r5
 8007276:	f7f8 ffb7 	bl	80001e8 <__aeabi_dsub>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4604      	mov	r4, r0
 8007280:	460d      	mov	r5, r1
 8007282:	4640      	mov	r0, r8
 8007284:	4649      	mov	r1, r9
 8007286:	f7f8 ffaf 	bl	80001e8 <__aeabi_dsub>
 800728a:	9a03      	ldr	r2, [sp, #12]
 800728c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b31      	cmp	r3, #49	; 0x31
 8007294:	dc24      	bgt.n	80072e0 <__ieee754_rem_pio2+0x288>
 8007296:	e9ca 0100 	strd	r0, r1, [sl]
 800729a:	4646      	mov	r6, r8
 800729c:	464f      	mov	r7, r9
 800729e:	e9da 8900 	ldrd	r8, r9, [sl]
 80072a2:	4630      	mov	r0, r6
 80072a4:	4642      	mov	r2, r8
 80072a6:	464b      	mov	r3, r9
 80072a8:	4639      	mov	r1, r7
 80072aa:	f7f8 ff9d 	bl	80001e8 <__aeabi_dsub>
 80072ae:	462b      	mov	r3, r5
 80072b0:	4622      	mov	r2, r4
 80072b2:	f7f8 ff99 	bl	80001e8 <__aeabi_dsub>
 80072b6:	9b02      	ldr	r3, [sp, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80072be:	f6bf af0b 	bge.w	80070d8 <__ieee754_rem_pio2+0x80>
 80072c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80072c6:	f8ca 3004 	str.w	r3, [sl, #4]
 80072ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072ce:	f8ca 8000 	str.w	r8, [sl]
 80072d2:	f8ca 0008 	str.w	r0, [sl, #8]
 80072d6:	f8ca 300c 	str.w	r3, [sl, #12]
 80072da:	f1cb 0b00 	rsb	fp, fp, #0
 80072de:	e6fb      	b.n	80070d8 <__ieee754_rem_pio2+0x80>
 80072e0:	a327      	add	r3, pc, #156	; (adr r3, 8007380 <__ieee754_rem_pio2+0x328>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	ec51 0b18 	vmov	r0, r1, d8
 80072ea:	f7f9 f935 	bl	8000558 <__aeabi_dmul>
 80072ee:	4604      	mov	r4, r0
 80072f0:	460d      	mov	r5, r1
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4640      	mov	r0, r8
 80072f8:	4649      	mov	r1, r9
 80072fa:	f7f8 ff75 	bl	80001e8 <__aeabi_dsub>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4606      	mov	r6, r0
 8007304:	460f      	mov	r7, r1
 8007306:	4640      	mov	r0, r8
 8007308:	4649      	mov	r1, r9
 800730a:	f7f8 ff6d 	bl	80001e8 <__aeabi_dsub>
 800730e:	4622      	mov	r2, r4
 8007310:	462b      	mov	r3, r5
 8007312:	f7f8 ff69 	bl	80001e8 <__aeabi_dsub>
 8007316:	a31c      	add	r3, pc, #112	; (adr r3, 8007388 <__ieee754_rem_pio2+0x330>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	4604      	mov	r4, r0
 800731e:	460d      	mov	r5, r1
 8007320:	ec51 0b18 	vmov	r0, r1, d8
 8007324:	f7f9 f918 	bl	8000558 <__aeabi_dmul>
 8007328:	4622      	mov	r2, r4
 800732a:	462b      	mov	r3, r5
 800732c:	f7f8 ff5c 	bl	80001e8 <__aeabi_dsub>
 8007330:	4604      	mov	r4, r0
 8007332:	460d      	mov	r5, r1
 8007334:	e760      	b.n	80071f8 <__ieee754_rem_pio2+0x1a0>
 8007336:	4b1c      	ldr	r3, [pc, #112]	; (80073a8 <__ieee754_rem_pio2+0x350>)
 8007338:	4598      	cmp	r8, r3
 800733a:	dd37      	ble.n	80073ac <__ieee754_rem_pio2+0x354>
 800733c:	ee10 2a10 	vmov	r2, s0
 8007340:	462b      	mov	r3, r5
 8007342:	4620      	mov	r0, r4
 8007344:	4629      	mov	r1, r5
 8007346:	f7f8 ff4f 	bl	80001e8 <__aeabi_dsub>
 800734a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800734e:	e9ca 0100 	strd	r0, r1, [sl]
 8007352:	e695      	b.n	8007080 <__ieee754_rem_pio2+0x28>
 8007354:	f3af 8000 	nop.w
 8007358:	54400000 	.word	0x54400000
 800735c:	3ff921fb 	.word	0x3ff921fb
 8007360:	1a626331 	.word	0x1a626331
 8007364:	3dd0b461 	.word	0x3dd0b461
 8007368:	1a600000 	.word	0x1a600000
 800736c:	3dd0b461 	.word	0x3dd0b461
 8007370:	2e037073 	.word	0x2e037073
 8007374:	3ba3198a 	.word	0x3ba3198a
 8007378:	6dc9c883 	.word	0x6dc9c883
 800737c:	3fe45f30 	.word	0x3fe45f30
 8007380:	2e000000 	.word	0x2e000000
 8007384:	3ba3198a 	.word	0x3ba3198a
 8007388:	252049c1 	.word	0x252049c1
 800738c:	397b839a 	.word	0x397b839a
 8007390:	3fe921fb 	.word	0x3fe921fb
 8007394:	4002d97b 	.word	0x4002d97b
 8007398:	3ff921fb 	.word	0x3ff921fb
 800739c:	413921fb 	.word	0x413921fb
 80073a0:	3fe00000 	.word	0x3fe00000
 80073a4:	08008028 	.word	0x08008028
 80073a8:	7fefffff 	.word	0x7fefffff
 80073ac:	ea4f 5628 	mov.w	r6, r8, asr #20
 80073b0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80073b4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80073b8:	4620      	mov	r0, r4
 80073ba:	460d      	mov	r5, r1
 80073bc:	f7f9 fb7c 	bl	8000ab8 <__aeabi_d2iz>
 80073c0:	f7f9 f860 	bl	8000484 <__aeabi_i2d>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4620      	mov	r0, r4
 80073ca:	4629      	mov	r1, r5
 80073cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073d0:	f7f8 ff0a 	bl	80001e8 <__aeabi_dsub>
 80073d4:	4b21      	ldr	r3, [pc, #132]	; (800745c <__ieee754_rem_pio2+0x404>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	f7f9 f8be 	bl	8000558 <__aeabi_dmul>
 80073dc:	460d      	mov	r5, r1
 80073de:	4604      	mov	r4, r0
 80073e0:	f7f9 fb6a 	bl	8000ab8 <__aeabi_d2iz>
 80073e4:	f7f9 f84e 	bl	8000484 <__aeabi_i2d>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4620      	mov	r0, r4
 80073ee:	4629      	mov	r1, r5
 80073f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80073f4:	f7f8 fef8 	bl	80001e8 <__aeabi_dsub>
 80073f8:	4b18      	ldr	r3, [pc, #96]	; (800745c <__ieee754_rem_pio2+0x404>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	f7f9 f8ac 	bl	8000558 <__aeabi_dmul>
 8007400:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007404:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007408:	2703      	movs	r7, #3
 800740a:	2400      	movs	r4, #0
 800740c:	2500      	movs	r5, #0
 800740e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8007412:	4622      	mov	r2, r4
 8007414:	462b      	mov	r3, r5
 8007416:	46b9      	mov	r9, r7
 8007418:	3f01      	subs	r7, #1
 800741a:	f7f9 fb05 	bl	8000a28 <__aeabi_dcmpeq>
 800741e:	2800      	cmp	r0, #0
 8007420:	d1f5      	bne.n	800740e <__ieee754_rem_pio2+0x3b6>
 8007422:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <__ieee754_rem_pio2+0x408>)
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	2302      	movs	r3, #2
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	4632      	mov	r2, r6
 800742c:	464b      	mov	r3, r9
 800742e:	4651      	mov	r1, sl
 8007430:	a804      	add	r0, sp, #16
 8007432:	f000 f9a9 	bl	8007788 <__kernel_rem_pio2>
 8007436:	9b02      	ldr	r3, [sp, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	4683      	mov	fp, r0
 800743c:	f6bf ae4c 	bge.w	80070d8 <__ieee754_rem_pio2+0x80>
 8007440:	e9da 2100 	ldrd	r2, r1, [sl]
 8007444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007448:	e9ca 2300 	strd	r2, r3, [sl]
 800744c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007450:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007454:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007458:	e73f      	b.n	80072da <__ieee754_rem_pio2+0x282>
 800745a:	bf00      	nop
 800745c:	41700000 	.word	0x41700000
 8007460:	080080a8 	.word	0x080080a8

08007464 <fabs>:
 8007464:	ec51 0b10 	vmov	r0, r1, d0
 8007468:	ee10 2a10 	vmov	r2, s0
 800746c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007470:	ec43 2b10 	vmov	d0, r2, r3
 8007474:	4770      	bx	lr
	...

08007478 <scalbn>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	ec55 4b10 	vmov	r4, r5, d0
 800747e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007482:	4606      	mov	r6, r0
 8007484:	462b      	mov	r3, r5
 8007486:	b999      	cbnz	r1, 80074b0 <scalbn+0x38>
 8007488:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800748c:	4323      	orrs	r3, r4
 800748e:	d03f      	beq.n	8007510 <scalbn+0x98>
 8007490:	4b35      	ldr	r3, [pc, #212]	; (8007568 <scalbn+0xf0>)
 8007492:	4629      	mov	r1, r5
 8007494:	ee10 0a10 	vmov	r0, s0
 8007498:	2200      	movs	r2, #0
 800749a:	f7f9 f85d 	bl	8000558 <__aeabi_dmul>
 800749e:	4b33      	ldr	r3, [pc, #204]	; (800756c <scalbn+0xf4>)
 80074a0:	429e      	cmp	r6, r3
 80074a2:	4604      	mov	r4, r0
 80074a4:	460d      	mov	r5, r1
 80074a6:	da10      	bge.n	80074ca <scalbn+0x52>
 80074a8:	a327      	add	r3, pc, #156	; (adr r3, 8007548 <scalbn+0xd0>)
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	e01f      	b.n	80074f0 <scalbn+0x78>
 80074b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80074b4:	4291      	cmp	r1, r2
 80074b6:	d10c      	bne.n	80074d2 <scalbn+0x5a>
 80074b8:	ee10 2a10 	vmov	r2, s0
 80074bc:	4620      	mov	r0, r4
 80074be:	4629      	mov	r1, r5
 80074c0:	f7f8 fe94 	bl	80001ec <__adddf3>
 80074c4:	4604      	mov	r4, r0
 80074c6:	460d      	mov	r5, r1
 80074c8:	e022      	b.n	8007510 <scalbn+0x98>
 80074ca:	460b      	mov	r3, r1
 80074cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80074d0:	3936      	subs	r1, #54	; 0x36
 80074d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80074d6:	4296      	cmp	r6, r2
 80074d8:	dd0d      	ble.n	80074f6 <scalbn+0x7e>
 80074da:	2d00      	cmp	r5, #0
 80074dc:	a11c      	add	r1, pc, #112	; (adr r1, 8007550 <scalbn+0xd8>)
 80074de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074e2:	da02      	bge.n	80074ea <scalbn+0x72>
 80074e4:	a11c      	add	r1, pc, #112	; (adr r1, 8007558 <scalbn+0xe0>)
 80074e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ea:	a319      	add	r3, pc, #100	; (adr r3, 8007550 <scalbn+0xd8>)
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	f7f9 f832 	bl	8000558 <__aeabi_dmul>
 80074f4:	e7e6      	b.n	80074c4 <scalbn+0x4c>
 80074f6:	1872      	adds	r2, r6, r1
 80074f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80074fc:	428a      	cmp	r2, r1
 80074fe:	dcec      	bgt.n	80074da <scalbn+0x62>
 8007500:	2a00      	cmp	r2, #0
 8007502:	dd08      	ble.n	8007516 <scalbn+0x9e>
 8007504:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007508:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800750c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007510:	ec45 4b10 	vmov	d0, r4, r5
 8007514:	bd70      	pop	{r4, r5, r6, pc}
 8007516:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800751a:	da08      	bge.n	800752e <scalbn+0xb6>
 800751c:	2d00      	cmp	r5, #0
 800751e:	a10a      	add	r1, pc, #40	; (adr r1, 8007548 <scalbn+0xd0>)
 8007520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007524:	dac0      	bge.n	80074a8 <scalbn+0x30>
 8007526:	a10e      	add	r1, pc, #56	; (adr r1, 8007560 <scalbn+0xe8>)
 8007528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800752c:	e7bc      	b.n	80074a8 <scalbn+0x30>
 800752e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007532:	3236      	adds	r2, #54	; 0x36
 8007534:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007538:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800753c:	4620      	mov	r0, r4
 800753e:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <scalbn+0xf8>)
 8007540:	2200      	movs	r2, #0
 8007542:	e7d5      	b.n	80074f0 <scalbn+0x78>
 8007544:	f3af 8000 	nop.w
 8007548:	c2f8f359 	.word	0xc2f8f359
 800754c:	01a56e1f 	.word	0x01a56e1f
 8007550:	8800759c 	.word	0x8800759c
 8007554:	7e37e43c 	.word	0x7e37e43c
 8007558:	8800759c 	.word	0x8800759c
 800755c:	fe37e43c 	.word	0xfe37e43c
 8007560:	c2f8f359 	.word	0xc2f8f359
 8007564:	81a56e1f 	.word	0x81a56e1f
 8007568:	43500000 	.word	0x43500000
 800756c:	ffff3cb0 	.word	0xffff3cb0
 8007570:	3c900000 	.word	0x3c900000

08007574 <with_errno>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	4604      	mov	r4, r0
 8007578:	460d      	mov	r5, r1
 800757a:	4616      	mov	r6, r2
 800757c:	f000 fcdc 	bl	8007f38 <__errno>
 8007580:	4629      	mov	r1, r5
 8007582:	6006      	str	r6, [r0, #0]
 8007584:	4620      	mov	r0, r4
 8007586:	bd70      	pop	{r4, r5, r6, pc}

08007588 <xflow>:
 8007588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800758a:	4614      	mov	r4, r2
 800758c:	461d      	mov	r5, r3
 800758e:	b108      	cbz	r0, 8007594 <xflow+0xc>
 8007590:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007594:	e9cd 2300 	strd	r2, r3, [sp]
 8007598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800759c:	4620      	mov	r0, r4
 800759e:	4629      	mov	r1, r5
 80075a0:	f7f8 ffda 	bl	8000558 <__aeabi_dmul>
 80075a4:	2222      	movs	r2, #34	; 0x22
 80075a6:	b003      	add	sp, #12
 80075a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075ac:	f7ff bfe2 	b.w	8007574 <with_errno>

080075b0 <__math_uflow>:
 80075b0:	b508      	push	{r3, lr}
 80075b2:	2200      	movs	r2, #0
 80075b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075b8:	f7ff ffe6 	bl	8007588 <xflow>
 80075bc:	ec41 0b10 	vmov	d0, r0, r1
 80075c0:	bd08      	pop	{r3, pc}

080075c2 <__math_oflow>:
 80075c2:	b508      	push	{r3, lr}
 80075c4:	2200      	movs	r2, #0
 80075c6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80075ca:	f7ff ffdd 	bl	8007588 <xflow>
 80075ce:	ec41 0b10 	vmov	d0, r0, r1
 80075d2:	bd08      	pop	{r3, pc}

080075d4 <__ieee754_sqrt>:
 80075d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	ec55 4b10 	vmov	r4, r5, d0
 80075dc:	4e67      	ldr	r6, [pc, #412]	; (800777c <__ieee754_sqrt+0x1a8>)
 80075de:	43ae      	bics	r6, r5
 80075e0:	ee10 0a10 	vmov	r0, s0
 80075e4:	ee10 2a10 	vmov	r2, s0
 80075e8:	4629      	mov	r1, r5
 80075ea:	462b      	mov	r3, r5
 80075ec:	d10d      	bne.n	800760a <__ieee754_sqrt+0x36>
 80075ee:	f7f8 ffb3 	bl	8000558 <__aeabi_dmul>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	f7f8 fdf7 	bl	80001ec <__adddf3>
 80075fe:	4604      	mov	r4, r0
 8007600:	460d      	mov	r5, r1
 8007602:	ec45 4b10 	vmov	d0, r4, r5
 8007606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760a:	2d00      	cmp	r5, #0
 800760c:	dc0b      	bgt.n	8007626 <__ieee754_sqrt+0x52>
 800760e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007612:	4326      	orrs	r6, r4
 8007614:	d0f5      	beq.n	8007602 <__ieee754_sqrt+0x2e>
 8007616:	b135      	cbz	r5, 8007626 <__ieee754_sqrt+0x52>
 8007618:	f7f8 fde6 	bl	80001e8 <__aeabi_dsub>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	f7f9 f8c4 	bl	80007ac <__aeabi_ddiv>
 8007624:	e7eb      	b.n	80075fe <__ieee754_sqrt+0x2a>
 8007626:	1509      	asrs	r1, r1, #20
 8007628:	f000 808d 	beq.w	8007746 <__ieee754_sqrt+0x172>
 800762c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007630:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007638:	07c9      	lsls	r1, r1, #31
 800763a:	bf5c      	itt	pl
 800763c:	005b      	lslpl	r3, r3, #1
 800763e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007642:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007646:	bf58      	it	pl
 8007648:	0052      	lslpl	r2, r2, #1
 800764a:	2500      	movs	r5, #0
 800764c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007650:	1076      	asrs	r6, r6, #1
 8007652:	0052      	lsls	r2, r2, #1
 8007654:	f04f 0e16 	mov.w	lr, #22
 8007658:	46ac      	mov	ip, r5
 800765a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800765e:	eb0c 0001 	add.w	r0, ip, r1
 8007662:	4298      	cmp	r0, r3
 8007664:	bfde      	ittt	le
 8007666:	1a1b      	suble	r3, r3, r0
 8007668:	eb00 0c01 	addle.w	ip, r0, r1
 800766c:	186d      	addle	r5, r5, r1
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	f1be 0e01 	subs.w	lr, lr, #1
 8007674:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007678:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800767c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007680:	d1ed      	bne.n	800765e <__ieee754_sqrt+0x8a>
 8007682:	4674      	mov	r4, lr
 8007684:	2720      	movs	r7, #32
 8007686:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800768a:	4563      	cmp	r3, ip
 800768c:	eb01 000e 	add.w	r0, r1, lr
 8007690:	dc02      	bgt.n	8007698 <__ieee754_sqrt+0xc4>
 8007692:	d113      	bne.n	80076bc <__ieee754_sqrt+0xe8>
 8007694:	4290      	cmp	r0, r2
 8007696:	d811      	bhi.n	80076bc <__ieee754_sqrt+0xe8>
 8007698:	2800      	cmp	r0, #0
 800769a:	eb00 0e01 	add.w	lr, r0, r1
 800769e:	da57      	bge.n	8007750 <__ieee754_sqrt+0x17c>
 80076a0:	f1be 0f00 	cmp.w	lr, #0
 80076a4:	db54      	blt.n	8007750 <__ieee754_sqrt+0x17c>
 80076a6:	f10c 0801 	add.w	r8, ip, #1
 80076aa:	eba3 030c 	sub.w	r3, r3, ip
 80076ae:	4290      	cmp	r0, r2
 80076b0:	bf88      	it	hi
 80076b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80076b6:	1a12      	subs	r2, r2, r0
 80076b8:	440c      	add	r4, r1
 80076ba:	46c4      	mov	ip, r8
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	3f01      	subs	r7, #1
 80076c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80076c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80076c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80076cc:	d1dd      	bne.n	800768a <__ieee754_sqrt+0xb6>
 80076ce:	4313      	orrs	r3, r2
 80076d0:	d01b      	beq.n	800770a <__ieee754_sqrt+0x136>
 80076d2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007780 <__ieee754_sqrt+0x1ac>
 80076d6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007784 <__ieee754_sqrt+0x1b0>
 80076da:	e9da 0100 	ldrd	r0, r1, [sl]
 80076de:	e9db 2300 	ldrd	r2, r3, [fp]
 80076e2:	f7f8 fd81 	bl	80001e8 <__aeabi_dsub>
 80076e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4640      	mov	r0, r8
 80076f0:	4649      	mov	r1, r9
 80076f2:	f7f9 f9ad 	bl	8000a50 <__aeabi_dcmple>
 80076f6:	b140      	cbz	r0, 800770a <__ieee754_sqrt+0x136>
 80076f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80076fc:	e9da 0100 	ldrd	r0, r1, [sl]
 8007700:	e9db 2300 	ldrd	r2, r3, [fp]
 8007704:	d126      	bne.n	8007754 <__ieee754_sqrt+0x180>
 8007706:	3501      	adds	r5, #1
 8007708:	463c      	mov	r4, r7
 800770a:	106a      	asrs	r2, r5, #1
 800770c:	0863      	lsrs	r3, r4, #1
 800770e:	07e9      	lsls	r1, r5, #31
 8007710:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007714:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007718:	bf48      	it	mi
 800771a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800771e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007722:	461c      	mov	r4, r3
 8007724:	e76d      	b.n	8007602 <__ieee754_sqrt+0x2e>
 8007726:	0ad3      	lsrs	r3, r2, #11
 8007728:	3815      	subs	r0, #21
 800772a:	0552      	lsls	r2, r2, #21
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0fa      	beq.n	8007726 <__ieee754_sqrt+0x152>
 8007730:	02dc      	lsls	r4, r3, #11
 8007732:	d50a      	bpl.n	800774a <__ieee754_sqrt+0x176>
 8007734:	f1c1 0420 	rsb	r4, r1, #32
 8007738:	fa22 f404 	lsr.w	r4, r2, r4
 800773c:	1e4d      	subs	r5, r1, #1
 800773e:	408a      	lsls	r2, r1
 8007740:	4323      	orrs	r3, r4
 8007742:	1b41      	subs	r1, r0, r5
 8007744:	e772      	b.n	800762c <__ieee754_sqrt+0x58>
 8007746:	4608      	mov	r0, r1
 8007748:	e7f0      	b.n	800772c <__ieee754_sqrt+0x158>
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	3101      	adds	r1, #1
 800774e:	e7ef      	b.n	8007730 <__ieee754_sqrt+0x15c>
 8007750:	46e0      	mov	r8, ip
 8007752:	e7aa      	b.n	80076aa <__ieee754_sqrt+0xd6>
 8007754:	f7f8 fd4a 	bl	80001ec <__adddf3>
 8007758:	e9da 8900 	ldrd	r8, r9, [sl]
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4640      	mov	r0, r8
 8007762:	4649      	mov	r1, r9
 8007764:	f7f9 f96a 	bl	8000a3c <__aeabi_dcmplt>
 8007768:	b120      	cbz	r0, 8007774 <__ieee754_sqrt+0x1a0>
 800776a:	1ca0      	adds	r0, r4, #2
 800776c:	bf08      	it	eq
 800776e:	3501      	addeq	r5, #1
 8007770:	3402      	adds	r4, #2
 8007772:	e7ca      	b.n	800770a <__ieee754_sqrt+0x136>
 8007774:	3401      	adds	r4, #1
 8007776:	f024 0401 	bic.w	r4, r4, #1
 800777a:	e7c6      	b.n	800770a <__ieee754_sqrt+0x136>
 800777c:	7ff00000 	.word	0x7ff00000
 8007780:	20000018 	.word	0x20000018
 8007784:	20000020 	.word	0x20000020

08007788 <__kernel_rem_pio2>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	ed2d 8b02 	vpush	{d8}
 8007790:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007794:	f112 0f14 	cmn.w	r2, #20
 8007798:	9306      	str	r3, [sp, #24]
 800779a:	9104      	str	r1, [sp, #16]
 800779c:	4bc2      	ldr	r3, [pc, #776]	; (8007aa8 <__kernel_rem_pio2+0x320>)
 800779e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80077a0:	9009      	str	r0, [sp, #36]	; 0x24
 80077a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	9b06      	ldr	r3, [sp, #24]
 80077aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80077ae:	bfa8      	it	ge
 80077b0:	1ed4      	subge	r4, r2, #3
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	bfb2      	itee	lt
 80077b6:	2400      	movlt	r4, #0
 80077b8:	2318      	movge	r3, #24
 80077ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80077be:	f06f 0317 	mvn.w	r3, #23
 80077c2:	fb04 3303 	mla	r3, r4, r3, r3
 80077c6:	eb03 0a02 	add.w	sl, r3, r2
 80077ca:	9b00      	ldr	r3, [sp, #0]
 80077cc:	9a05      	ldr	r2, [sp, #20]
 80077ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007a98 <__kernel_rem_pio2+0x310>
 80077d2:	eb03 0802 	add.w	r8, r3, r2
 80077d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80077d8:	1aa7      	subs	r7, r4, r2
 80077da:	ae20      	add	r6, sp, #128	; 0x80
 80077dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80077e0:	2500      	movs	r5, #0
 80077e2:	4545      	cmp	r5, r8
 80077e4:	dd13      	ble.n	800780e <__kernel_rem_pio2+0x86>
 80077e6:	9b06      	ldr	r3, [sp, #24]
 80077e8:	aa20      	add	r2, sp, #128	; 0x80
 80077ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80077ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80077f2:	f04f 0800 	mov.w	r8, #0
 80077f6:	9b00      	ldr	r3, [sp, #0]
 80077f8:	4598      	cmp	r8, r3
 80077fa:	dc31      	bgt.n	8007860 <__kernel_rem_pio2+0xd8>
 80077fc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007a98 <__kernel_rem_pio2+0x310>
 8007800:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007804:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007808:	462f      	mov	r7, r5
 800780a:	2600      	movs	r6, #0
 800780c:	e01b      	b.n	8007846 <__kernel_rem_pio2+0xbe>
 800780e:	42ef      	cmn	r7, r5
 8007810:	d407      	bmi.n	8007822 <__kernel_rem_pio2+0x9a>
 8007812:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007816:	f7f8 fe35 	bl	8000484 <__aeabi_i2d>
 800781a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800781e:	3501      	adds	r5, #1
 8007820:	e7df      	b.n	80077e2 <__kernel_rem_pio2+0x5a>
 8007822:	ec51 0b18 	vmov	r0, r1, d8
 8007826:	e7f8      	b.n	800781a <__kernel_rem_pio2+0x92>
 8007828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800782c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007830:	f7f8 fe92 	bl	8000558 <__aeabi_dmul>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800783c:	f7f8 fcd6 	bl	80001ec <__adddf3>
 8007840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007844:	3601      	adds	r6, #1
 8007846:	9b05      	ldr	r3, [sp, #20]
 8007848:	429e      	cmp	r6, r3
 800784a:	f1a7 0708 	sub.w	r7, r7, #8
 800784e:	ddeb      	ble.n	8007828 <__kernel_rem_pio2+0xa0>
 8007850:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007854:	f108 0801 	add.w	r8, r8, #1
 8007858:	ecab 7b02 	vstmia	fp!, {d7}
 800785c:	3508      	adds	r5, #8
 800785e:	e7ca      	b.n	80077f6 <__kernel_rem_pio2+0x6e>
 8007860:	9b00      	ldr	r3, [sp, #0]
 8007862:	aa0c      	add	r2, sp, #48	; 0x30
 8007864:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007868:	930b      	str	r3, [sp, #44]	; 0x2c
 800786a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800786c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007870:	9c00      	ldr	r4, [sp, #0]
 8007872:	930a      	str	r3, [sp, #40]	; 0x28
 8007874:	00e3      	lsls	r3, r4, #3
 8007876:	9308      	str	r3, [sp, #32]
 8007878:	ab98      	add	r3, sp, #608	; 0x260
 800787a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800787e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007882:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8007886:	ab70      	add	r3, sp, #448	; 0x1c0
 8007888:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800788c:	46c3      	mov	fp, r8
 800788e:	46a1      	mov	r9, r4
 8007890:	f1b9 0f00 	cmp.w	r9, #0
 8007894:	f1a5 0508 	sub.w	r5, r5, #8
 8007898:	dc77      	bgt.n	800798a <__kernel_rem_pio2+0x202>
 800789a:	ec47 6b10 	vmov	d0, r6, r7
 800789e:	4650      	mov	r0, sl
 80078a0:	f7ff fdea 	bl	8007478 <scalbn>
 80078a4:	ec57 6b10 	vmov	r6, r7, d0
 80078a8:	2200      	movs	r2, #0
 80078aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80078ae:	ee10 0a10 	vmov	r0, s0
 80078b2:	4639      	mov	r1, r7
 80078b4:	f7f8 fe50 	bl	8000558 <__aeabi_dmul>
 80078b8:	ec41 0b10 	vmov	d0, r0, r1
 80078bc:	f000 fab4 	bl	8007e28 <floor>
 80078c0:	4b7a      	ldr	r3, [pc, #488]	; (8007aac <__kernel_rem_pio2+0x324>)
 80078c2:	ec51 0b10 	vmov	r0, r1, d0
 80078c6:	2200      	movs	r2, #0
 80078c8:	f7f8 fe46 	bl	8000558 <__aeabi_dmul>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4630      	mov	r0, r6
 80078d2:	4639      	mov	r1, r7
 80078d4:	f7f8 fc88 	bl	80001e8 <__aeabi_dsub>
 80078d8:	460f      	mov	r7, r1
 80078da:	4606      	mov	r6, r0
 80078dc:	f7f9 f8ec 	bl	8000ab8 <__aeabi_d2iz>
 80078e0:	9002      	str	r0, [sp, #8]
 80078e2:	f7f8 fdcf 	bl	8000484 <__aeabi_i2d>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4630      	mov	r0, r6
 80078ec:	4639      	mov	r1, r7
 80078ee:	f7f8 fc7b 	bl	80001e8 <__aeabi_dsub>
 80078f2:	f1ba 0f00 	cmp.w	sl, #0
 80078f6:	4606      	mov	r6, r0
 80078f8:	460f      	mov	r7, r1
 80078fa:	dd6d      	ble.n	80079d8 <__kernel_rem_pio2+0x250>
 80078fc:	1e61      	subs	r1, r4, #1
 80078fe:	ab0c      	add	r3, sp, #48	; 0x30
 8007900:	9d02      	ldr	r5, [sp, #8]
 8007902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007906:	f1ca 0018 	rsb	r0, sl, #24
 800790a:	fa43 f200 	asr.w	r2, r3, r0
 800790e:	4415      	add	r5, r2
 8007910:	4082      	lsls	r2, r0
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	aa0c      	add	r2, sp, #48	; 0x30
 8007916:	9502      	str	r5, [sp, #8]
 8007918:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800791c:	f1ca 0217 	rsb	r2, sl, #23
 8007920:	fa43 fb02 	asr.w	fp, r3, r2
 8007924:	f1bb 0f00 	cmp.w	fp, #0
 8007928:	dd65      	ble.n	80079f6 <__kernel_rem_pio2+0x26e>
 800792a:	9b02      	ldr	r3, [sp, #8]
 800792c:	2200      	movs	r2, #0
 800792e:	3301      	adds	r3, #1
 8007930:	9302      	str	r3, [sp, #8]
 8007932:	4615      	mov	r5, r2
 8007934:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007938:	4294      	cmp	r4, r2
 800793a:	f300 809f 	bgt.w	8007a7c <__kernel_rem_pio2+0x2f4>
 800793e:	f1ba 0f00 	cmp.w	sl, #0
 8007942:	dd07      	ble.n	8007954 <__kernel_rem_pio2+0x1cc>
 8007944:	f1ba 0f01 	cmp.w	sl, #1
 8007948:	f000 80c1 	beq.w	8007ace <__kernel_rem_pio2+0x346>
 800794c:	f1ba 0f02 	cmp.w	sl, #2
 8007950:	f000 80c7 	beq.w	8007ae2 <__kernel_rem_pio2+0x35a>
 8007954:	f1bb 0f02 	cmp.w	fp, #2
 8007958:	d14d      	bne.n	80079f6 <__kernel_rem_pio2+0x26e>
 800795a:	4632      	mov	r2, r6
 800795c:	463b      	mov	r3, r7
 800795e:	4954      	ldr	r1, [pc, #336]	; (8007ab0 <__kernel_rem_pio2+0x328>)
 8007960:	2000      	movs	r0, #0
 8007962:	f7f8 fc41 	bl	80001e8 <__aeabi_dsub>
 8007966:	4606      	mov	r6, r0
 8007968:	460f      	mov	r7, r1
 800796a:	2d00      	cmp	r5, #0
 800796c:	d043      	beq.n	80079f6 <__kernel_rem_pio2+0x26e>
 800796e:	4650      	mov	r0, sl
 8007970:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007aa0 <__kernel_rem_pio2+0x318>
 8007974:	f7ff fd80 	bl	8007478 <scalbn>
 8007978:	4630      	mov	r0, r6
 800797a:	4639      	mov	r1, r7
 800797c:	ec53 2b10 	vmov	r2, r3, d0
 8007980:	f7f8 fc32 	bl	80001e8 <__aeabi_dsub>
 8007984:	4606      	mov	r6, r0
 8007986:	460f      	mov	r7, r1
 8007988:	e035      	b.n	80079f6 <__kernel_rem_pio2+0x26e>
 800798a:	4b4a      	ldr	r3, [pc, #296]	; (8007ab4 <__kernel_rem_pio2+0x32c>)
 800798c:	2200      	movs	r2, #0
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f8 fde1 	bl	8000558 <__aeabi_dmul>
 8007996:	f7f9 f88f 	bl	8000ab8 <__aeabi_d2iz>
 800799a:	f7f8 fd73 	bl	8000484 <__aeabi_i2d>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	ec43 2b18 	vmov	d8, r2, r3
 80079a6:	4b44      	ldr	r3, [pc, #272]	; (8007ab8 <__kernel_rem_pio2+0x330>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	f7f8 fdd5 	bl	8000558 <__aeabi_dmul>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	4630      	mov	r0, r6
 80079b4:	4639      	mov	r1, r7
 80079b6:	f7f8 fc17 	bl	80001e8 <__aeabi_dsub>
 80079ba:	f7f9 f87d 	bl	8000ab8 <__aeabi_d2iz>
 80079be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079c2:	f84b 0b04 	str.w	r0, [fp], #4
 80079c6:	ec51 0b18 	vmov	r0, r1, d8
 80079ca:	f7f8 fc0f 	bl	80001ec <__adddf3>
 80079ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80079d2:	4606      	mov	r6, r0
 80079d4:	460f      	mov	r7, r1
 80079d6:	e75b      	b.n	8007890 <__kernel_rem_pio2+0x108>
 80079d8:	d106      	bne.n	80079e8 <__kernel_rem_pio2+0x260>
 80079da:	1e63      	subs	r3, r4, #1
 80079dc:	aa0c      	add	r2, sp, #48	; 0x30
 80079de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80079e6:	e79d      	b.n	8007924 <__kernel_rem_pio2+0x19c>
 80079e8:	4b34      	ldr	r3, [pc, #208]	; (8007abc <__kernel_rem_pio2+0x334>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	f7f9 f83a 	bl	8000a64 <__aeabi_dcmpge>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d140      	bne.n	8007a76 <__kernel_rem_pio2+0x2ee>
 80079f4:	4683      	mov	fp, r0
 80079f6:	2200      	movs	r2, #0
 80079f8:	2300      	movs	r3, #0
 80079fa:	4630      	mov	r0, r6
 80079fc:	4639      	mov	r1, r7
 80079fe:	f7f9 f813 	bl	8000a28 <__aeabi_dcmpeq>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f000 80c1 	beq.w	8007b8a <__kernel_rem_pio2+0x402>
 8007a08:	1e65      	subs	r5, r4, #1
 8007a0a:	462b      	mov	r3, r5
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	9900      	ldr	r1, [sp, #0]
 8007a10:	428b      	cmp	r3, r1
 8007a12:	da6d      	bge.n	8007af0 <__kernel_rem_pio2+0x368>
 8007a14:	2a00      	cmp	r2, #0
 8007a16:	f000 808a 	beq.w	8007b2e <__kernel_rem_pio2+0x3a6>
 8007a1a:	ab0c      	add	r3, sp, #48	; 0x30
 8007a1c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007a20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80ae 	beq.w	8007b86 <__kernel_rem_pio2+0x3fe>
 8007a2a:	4650      	mov	r0, sl
 8007a2c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007aa0 <__kernel_rem_pio2+0x318>
 8007a30:	f7ff fd22 	bl	8007478 <scalbn>
 8007a34:	1c6b      	adds	r3, r5, #1
 8007a36:	00da      	lsls	r2, r3, #3
 8007a38:	9205      	str	r2, [sp, #20]
 8007a3a:	ec57 6b10 	vmov	r6, r7, d0
 8007a3e:	aa70      	add	r2, sp, #448	; 0x1c0
 8007a40:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007ab4 <__kernel_rem_pio2+0x32c>
 8007a44:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007a48:	462c      	mov	r4, r5
 8007a4a:	f04f 0800 	mov.w	r8, #0
 8007a4e:	2c00      	cmp	r4, #0
 8007a50:	f280 80d4 	bge.w	8007bfc <__kernel_rem_pio2+0x474>
 8007a54:	462c      	mov	r4, r5
 8007a56:	2c00      	cmp	r4, #0
 8007a58:	f2c0 8102 	blt.w	8007c60 <__kernel_rem_pio2+0x4d8>
 8007a5c:	4b18      	ldr	r3, [pc, #96]	; (8007ac0 <__kernel_rem_pio2+0x338>)
 8007a5e:	461e      	mov	r6, r3
 8007a60:	ab70      	add	r3, sp, #448	; 0x1c0
 8007a62:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8007a66:	1b2b      	subs	r3, r5, r4
 8007a68:	f04f 0900 	mov.w	r9, #0
 8007a6c:	f04f 0a00 	mov.w	sl, #0
 8007a70:	2700      	movs	r7, #0
 8007a72:	9306      	str	r3, [sp, #24]
 8007a74:	e0e6      	b.n	8007c44 <__kernel_rem_pio2+0x4bc>
 8007a76:	f04f 0b02 	mov.w	fp, #2
 8007a7a:	e756      	b.n	800792a <__kernel_rem_pio2+0x1a2>
 8007a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a80:	bb05      	cbnz	r5, 8007ac4 <__kernel_rem_pio2+0x33c>
 8007a82:	b123      	cbz	r3, 8007a8e <__kernel_rem_pio2+0x306>
 8007a84:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007a88:	f8c8 3000 	str.w	r3, [r8]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	3201      	adds	r2, #1
 8007a90:	f108 0804 	add.w	r8, r8, #4
 8007a94:	461d      	mov	r5, r3
 8007a96:	e74f      	b.n	8007938 <__kernel_rem_pio2+0x1b0>
	...
 8007aa4:	3ff00000 	.word	0x3ff00000
 8007aa8:	080081f0 	.word	0x080081f0
 8007aac:	40200000 	.word	0x40200000
 8007ab0:	3ff00000 	.word	0x3ff00000
 8007ab4:	3e700000 	.word	0x3e700000
 8007ab8:	41700000 	.word	0x41700000
 8007abc:	3fe00000 	.word	0x3fe00000
 8007ac0:	080081b0 	.word	0x080081b0
 8007ac4:	1acb      	subs	r3, r1, r3
 8007ac6:	f8c8 3000 	str.w	r3, [r8]
 8007aca:	462b      	mov	r3, r5
 8007acc:	e7df      	b.n	8007a8e <__kernel_rem_pio2+0x306>
 8007ace:	1e62      	subs	r2, r4, #1
 8007ad0:	ab0c      	add	r3, sp, #48	; 0x30
 8007ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007ada:	a90c      	add	r1, sp, #48	; 0x30
 8007adc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007ae0:	e738      	b.n	8007954 <__kernel_rem_pio2+0x1cc>
 8007ae2:	1e62      	subs	r2, r4, #1
 8007ae4:	ab0c      	add	r3, sp, #48	; 0x30
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007aee:	e7f4      	b.n	8007ada <__kernel_rem_pio2+0x352>
 8007af0:	a90c      	add	r1, sp, #48	; 0x30
 8007af2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	430a      	orrs	r2, r1
 8007afa:	e788      	b.n	8007a0e <__kernel_rem_pio2+0x286>
 8007afc:	3301      	adds	r3, #1
 8007afe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007b02:	2900      	cmp	r1, #0
 8007b04:	d0fa      	beq.n	8007afc <__kernel_rem_pio2+0x374>
 8007b06:	9a08      	ldr	r2, [sp, #32]
 8007b08:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8007b0c:	446a      	add	r2, sp
 8007b0e:	3a98      	subs	r2, #152	; 0x98
 8007b10:	9208      	str	r2, [sp, #32]
 8007b12:	9a06      	ldr	r2, [sp, #24]
 8007b14:	a920      	add	r1, sp, #128	; 0x80
 8007b16:	18a2      	adds	r2, r4, r2
 8007b18:	18e3      	adds	r3, r4, r3
 8007b1a:	f104 0801 	add.w	r8, r4, #1
 8007b1e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007b22:	9302      	str	r3, [sp, #8]
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	4543      	cmp	r3, r8
 8007b28:	da04      	bge.n	8007b34 <__kernel_rem_pio2+0x3ac>
 8007b2a:	461c      	mov	r4, r3
 8007b2c:	e6a2      	b.n	8007874 <__kernel_rem_pio2+0xec>
 8007b2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b30:	2301      	movs	r3, #1
 8007b32:	e7e4      	b.n	8007afe <__kernel_rem_pio2+0x376>
 8007b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b36:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007b3a:	f7f8 fca3 	bl	8000484 <__aeabi_i2d>
 8007b3e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b44:	46ab      	mov	fp, r5
 8007b46:	461c      	mov	r4, r3
 8007b48:	f04f 0900 	mov.w	r9, #0
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	2700      	movs	r7, #0
 8007b50:	9b05      	ldr	r3, [sp, #20]
 8007b52:	4599      	cmp	r9, r3
 8007b54:	dd06      	ble.n	8007b64 <__kernel_rem_pio2+0x3dc>
 8007b56:	9b08      	ldr	r3, [sp, #32]
 8007b58:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007b5c:	f108 0801 	add.w	r8, r8, #1
 8007b60:	9308      	str	r3, [sp, #32]
 8007b62:	e7df      	b.n	8007b24 <__kernel_rem_pio2+0x39c>
 8007b64:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007b68:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007b6c:	f7f8 fcf4 	bl	8000558 <__aeabi_dmul>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4630      	mov	r0, r6
 8007b76:	4639      	mov	r1, r7
 8007b78:	f7f8 fb38 	bl	80001ec <__adddf3>
 8007b7c:	f109 0901 	add.w	r9, r9, #1
 8007b80:	4606      	mov	r6, r0
 8007b82:	460f      	mov	r7, r1
 8007b84:	e7e4      	b.n	8007b50 <__kernel_rem_pio2+0x3c8>
 8007b86:	3d01      	subs	r5, #1
 8007b88:	e747      	b.n	8007a1a <__kernel_rem_pio2+0x292>
 8007b8a:	ec47 6b10 	vmov	d0, r6, r7
 8007b8e:	f1ca 0000 	rsb	r0, sl, #0
 8007b92:	f7ff fc71 	bl	8007478 <scalbn>
 8007b96:	ec57 6b10 	vmov	r6, r7, d0
 8007b9a:	4ba0      	ldr	r3, [pc, #640]	; (8007e1c <__kernel_rem_pio2+0x694>)
 8007b9c:	ee10 0a10 	vmov	r0, s0
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	f7f8 ff5e 	bl	8000a64 <__aeabi_dcmpge>
 8007ba8:	b1f8      	cbz	r0, 8007bea <__kernel_rem_pio2+0x462>
 8007baa:	4b9d      	ldr	r3, [pc, #628]	; (8007e20 <__kernel_rem_pio2+0x698>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	f7f8 fcd1 	bl	8000558 <__aeabi_dmul>
 8007bb6:	f7f8 ff7f 	bl	8000ab8 <__aeabi_d2iz>
 8007bba:	4680      	mov	r8, r0
 8007bbc:	f7f8 fc62 	bl	8000484 <__aeabi_i2d>
 8007bc0:	4b96      	ldr	r3, [pc, #600]	; (8007e1c <__kernel_rem_pio2+0x694>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f7f8 fcc8 	bl	8000558 <__aeabi_dmul>
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4639      	mov	r1, r7
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f7f8 fb0a 	bl	80001e8 <__aeabi_dsub>
 8007bd4:	f7f8 ff70 	bl	8000ab8 <__aeabi_d2iz>
 8007bd8:	1c65      	adds	r5, r4, #1
 8007bda:	ab0c      	add	r3, sp, #48	; 0x30
 8007bdc:	f10a 0a18 	add.w	sl, sl, #24
 8007be0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007be4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007be8:	e71f      	b.n	8007a2a <__kernel_rem_pio2+0x2a2>
 8007bea:	4630      	mov	r0, r6
 8007bec:	4639      	mov	r1, r7
 8007bee:	f7f8 ff63 	bl	8000ab8 <__aeabi_d2iz>
 8007bf2:	ab0c      	add	r3, sp, #48	; 0x30
 8007bf4:	4625      	mov	r5, r4
 8007bf6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007bfa:	e716      	b.n	8007a2a <__kernel_rem_pio2+0x2a2>
 8007bfc:	ab0c      	add	r3, sp, #48	; 0x30
 8007bfe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007c02:	f7f8 fc3f 	bl	8000484 <__aeabi_i2d>
 8007c06:	4632      	mov	r2, r6
 8007c08:	463b      	mov	r3, r7
 8007c0a:	f7f8 fca5 	bl	8000558 <__aeabi_dmul>
 8007c0e:	4642      	mov	r2, r8
 8007c10:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007c14:	464b      	mov	r3, r9
 8007c16:	4630      	mov	r0, r6
 8007c18:	4639      	mov	r1, r7
 8007c1a:	f7f8 fc9d 	bl	8000558 <__aeabi_dmul>
 8007c1e:	3c01      	subs	r4, #1
 8007c20:	4606      	mov	r6, r0
 8007c22:	460f      	mov	r7, r1
 8007c24:	e713      	b.n	8007a4e <__kernel_rem_pio2+0x2c6>
 8007c26:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007c2a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007c2e:	f7f8 fc93 	bl	8000558 <__aeabi_dmul>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4648      	mov	r0, r9
 8007c38:	4651      	mov	r1, sl
 8007c3a:	f7f8 fad7 	bl	80001ec <__adddf3>
 8007c3e:	3701      	adds	r7, #1
 8007c40:	4681      	mov	r9, r0
 8007c42:	468a      	mov	sl, r1
 8007c44:	9b00      	ldr	r3, [sp, #0]
 8007c46:	429f      	cmp	r7, r3
 8007c48:	dc02      	bgt.n	8007c50 <__kernel_rem_pio2+0x4c8>
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	429f      	cmp	r7, r3
 8007c4e:	ddea      	ble.n	8007c26 <__kernel_rem_pio2+0x49e>
 8007c50:	9a06      	ldr	r2, [sp, #24]
 8007c52:	ab48      	add	r3, sp, #288	; 0x120
 8007c54:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007c58:	e9c6 9a00 	strd	r9, sl, [r6]
 8007c5c:	3c01      	subs	r4, #1
 8007c5e:	e6fa      	b.n	8007a56 <__kernel_rem_pio2+0x2ce>
 8007c60:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	dc0b      	bgt.n	8007c7e <__kernel_rem_pio2+0x4f6>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dc39      	bgt.n	8007cde <__kernel_rem_pio2+0x556>
 8007c6a:	d05d      	beq.n	8007d28 <__kernel_rem_pio2+0x5a0>
 8007c6c:	9b02      	ldr	r3, [sp, #8]
 8007c6e:	f003 0007 	and.w	r0, r3, #7
 8007c72:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007c76:	ecbd 8b02 	vpop	{d8}
 8007c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d1f3      	bne.n	8007c6c <__kernel_rem_pio2+0x4e4>
 8007c84:	9b05      	ldr	r3, [sp, #20]
 8007c86:	9500      	str	r5, [sp, #0]
 8007c88:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007c8c:	eb0d 0403 	add.w	r4, sp, r3
 8007c90:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007c94:	46a2      	mov	sl, r4
 8007c96:	9b00      	ldr	r3, [sp, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f1aa 0a08 	sub.w	sl, sl, #8
 8007c9e:	dc69      	bgt.n	8007d74 <__kernel_rem_pio2+0x5ec>
 8007ca0:	46aa      	mov	sl, r5
 8007ca2:	f1ba 0f01 	cmp.w	sl, #1
 8007ca6:	f1a4 0408 	sub.w	r4, r4, #8
 8007caa:	f300 8083 	bgt.w	8007db4 <__kernel_rem_pio2+0x62c>
 8007cae:	9c05      	ldr	r4, [sp, #20]
 8007cb0:	ab48      	add	r3, sp, #288	; 0x120
 8007cb2:	441c      	add	r4, r3
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	2d01      	cmp	r5, #1
 8007cba:	f300 809a 	bgt.w	8007df2 <__kernel_rem_pio2+0x66a>
 8007cbe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007cc2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007cc6:	f1bb 0f00 	cmp.w	fp, #0
 8007cca:	f040 8098 	bne.w	8007dfe <__kernel_rem_pio2+0x676>
 8007cce:	9b04      	ldr	r3, [sp, #16]
 8007cd0:	e9c3 7800 	strd	r7, r8, [r3]
 8007cd4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007cd8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007cdc:	e7c6      	b.n	8007c6c <__kernel_rem_pio2+0x4e4>
 8007cde:	9e05      	ldr	r6, [sp, #20]
 8007ce0:	ab48      	add	r3, sp, #288	; 0x120
 8007ce2:	441e      	add	r6, r3
 8007ce4:	462c      	mov	r4, r5
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	2100      	movs	r1, #0
 8007cea:	2c00      	cmp	r4, #0
 8007cec:	da33      	bge.n	8007d56 <__kernel_rem_pio2+0x5ce>
 8007cee:	f1bb 0f00 	cmp.w	fp, #0
 8007cf2:	d036      	beq.n	8007d62 <__kernel_rem_pio2+0x5da>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cfa:	9c04      	ldr	r4, [sp, #16]
 8007cfc:	e9c4 2300 	strd	r2, r3, [r4]
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007d08:	f7f8 fa6e 	bl	80001e8 <__aeabi_dsub>
 8007d0c:	ae4a      	add	r6, sp, #296	; 0x128
 8007d0e:	2401      	movs	r4, #1
 8007d10:	42a5      	cmp	r5, r4
 8007d12:	da29      	bge.n	8007d68 <__kernel_rem_pio2+0x5e0>
 8007d14:	f1bb 0f00 	cmp.w	fp, #0
 8007d18:	d002      	beq.n	8007d20 <__kernel_rem_pio2+0x598>
 8007d1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d1e:	4619      	mov	r1, r3
 8007d20:	9b04      	ldr	r3, [sp, #16]
 8007d22:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007d26:	e7a1      	b.n	8007c6c <__kernel_rem_pio2+0x4e4>
 8007d28:	9c05      	ldr	r4, [sp, #20]
 8007d2a:	ab48      	add	r3, sp, #288	; 0x120
 8007d2c:	441c      	add	r4, r3
 8007d2e:	2000      	movs	r0, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	2d00      	cmp	r5, #0
 8007d34:	da09      	bge.n	8007d4a <__kernel_rem_pio2+0x5c2>
 8007d36:	f1bb 0f00 	cmp.w	fp, #0
 8007d3a:	d002      	beq.n	8007d42 <__kernel_rem_pio2+0x5ba>
 8007d3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d40:	4619      	mov	r1, r3
 8007d42:	9b04      	ldr	r3, [sp, #16]
 8007d44:	e9c3 0100 	strd	r0, r1, [r3]
 8007d48:	e790      	b.n	8007c6c <__kernel_rem_pio2+0x4e4>
 8007d4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d4e:	f7f8 fa4d 	bl	80001ec <__adddf3>
 8007d52:	3d01      	subs	r5, #1
 8007d54:	e7ed      	b.n	8007d32 <__kernel_rem_pio2+0x5aa>
 8007d56:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007d5a:	f7f8 fa47 	bl	80001ec <__adddf3>
 8007d5e:	3c01      	subs	r4, #1
 8007d60:	e7c3      	b.n	8007cea <__kernel_rem_pio2+0x562>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	e7c8      	b.n	8007cfa <__kernel_rem_pio2+0x572>
 8007d68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007d6c:	f7f8 fa3e 	bl	80001ec <__adddf3>
 8007d70:	3401      	adds	r4, #1
 8007d72:	e7cd      	b.n	8007d10 <__kernel_rem_pio2+0x588>
 8007d74:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007d7c:	9b00      	ldr	r3, [sp, #0]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	4632      	mov	r2, r6
 8007d84:	463b      	mov	r3, r7
 8007d86:	4640      	mov	r0, r8
 8007d88:	4649      	mov	r1, r9
 8007d8a:	f7f8 fa2f 	bl	80001ec <__adddf3>
 8007d8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4640      	mov	r0, r8
 8007d98:	4649      	mov	r1, r9
 8007d9a:	f7f8 fa25 	bl	80001e8 <__aeabi_dsub>
 8007d9e:	4632      	mov	r2, r6
 8007da0:	463b      	mov	r3, r7
 8007da2:	f7f8 fa23 	bl	80001ec <__adddf3>
 8007da6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007daa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007dae:	ed8a 7b00 	vstr	d7, [sl]
 8007db2:	e770      	b.n	8007c96 <__kernel_rem_pio2+0x50e>
 8007db4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007db8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007dbc:	4640      	mov	r0, r8
 8007dbe:	4632      	mov	r2, r6
 8007dc0:	463b      	mov	r3, r7
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	f7f8 fa12 	bl	80001ec <__adddf3>
 8007dc8:	e9cd 0100 	strd	r0, r1, [sp]
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 fa08 	bl	80001e8 <__aeabi_dsub>
 8007dd8:	4632      	mov	r2, r6
 8007dda:	463b      	mov	r3, r7
 8007ddc:	f7f8 fa06 	bl	80001ec <__adddf3>
 8007de0:	ed9d 7b00 	vldr	d7, [sp]
 8007de4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007de8:	ed84 7b00 	vstr	d7, [r4]
 8007dec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007df0:	e757      	b.n	8007ca2 <__kernel_rem_pio2+0x51a>
 8007df2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007df6:	f7f8 f9f9 	bl	80001ec <__adddf3>
 8007dfa:	3d01      	subs	r5, #1
 8007dfc:	e75c      	b.n	8007cb8 <__kernel_rem_pio2+0x530>
 8007dfe:	9b04      	ldr	r3, [sp, #16]
 8007e00:	9a04      	ldr	r2, [sp, #16]
 8007e02:	601f      	str	r7, [r3, #0]
 8007e04:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007e08:	605c      	str	r4, [r3, #4]
 8007e0a:	609d      	str	r5, [r3, #8]
 8007e0c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007e10:	60d3      	str	r3, [r2, #12]
 8007e12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e16:	6110      	str	r0, [r2, #16]
 8007e18:	6153      	str	r3, [r2, #20]
 8007e1a:	e727      	b.n	8007c6c <__kernel_rem_pio2+0x4e4>
 8007e1c:	41700000 	.word	0x41700000
 8007e20:	3e700000 	.word	0x3e700000
 8007e24:	00000000 	.word	0x00000000

08007e28 <floor>:
 8007e28:	ec51 0b10 	vmov	r0, r1, d0
 8007e2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e34:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007e38:	2e13      	cmp	r6, #19
 8007e3a:	ee10 5a10 	vmov	r5, s0
 8007e3e:	ee10 8a10 	vmov	r8, s0
 8007e42:	460c      	mov	r4, r1
 8007e44:	dc31      	bgt.n	8007eaa <floor+0x82>
 8007e46:	2e00      	cmp	r6, #0
 8007e48:	da14      	bge.n	8007e74 <floor+0x4c>
 8007e4a:	a333      	add	r3, pc, #204	; (adr r3, 8007f18 <floor+0xf0>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f7f8 f9cc 	bl	80001ec <__adddf3>
 8007e54:	2200      	movs	r2, #0
 8007e56:	2300      	movs	r3, #0
 8007e58:	f7f8 fe0e 	bl	8000a78 <__aeabi_dcmpgt>
 8007e5c:	b138      	cbz	r0, 8007e6e <floor+0x46>
 8007e5e:	2c00      	cmp	r4, #0
 8007e60:	da53      	bge.n	8007f0a <floor+0xe2>
 8007e62:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007e66:	4325      	orrs	r5, r4
 8007e68:	d052      	beq.n	8007f10 <floor+0xe8>
 8007e6a:	4c2d      	ldr	r4, [pc, #180]	; (8007f20 <floor+0xf8>)
 8007e6c:	2500      	movs	r5, #0
 8007e6e:	4621      	mov	r1, r4
 8007e70:	4628      	mov	r0, r5
 8007e72:	e024      	b.n	8007ebe <floor+0x96>
 8007e74:	4f2b      	ldr	r7, [pc, #172]	; (8007f24 <floor+0xfc>)
 8007e76:	4137      	asrs	r7, r6
 8007e78:	ea01 0307 	and.w	r3, r1, r7
 8007e7c:	4303      	orrs	r3, r0
 8007e7e:	d01e      	beq.n	8007ebe <floor+0x96>
 8007e80:	a325      	add	r3, pc, #148	; (adr r3, 8007f18 <floor+0xf0>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f7f8 f9b1 	bl	80001ec <__adddf3>
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f7f8 fdf3 	bl	8000a78 <__aeabi_dcmpgt>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d0eb      	beq.n	8007e6e <floor+0x46>
 8007e96:	2c00      	cmp	r4, #0
 8007e98:	bfbe      	ittt	lt
 8007e9a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007e9e:	4133      	asrlt	r3, r6
 8007ea0:	18e4      	addlt	r4, r4, r3
 8007ea2:	ea24 0407 	bic.w	r4, r4, r7
 8007ea6:	2500      	movs	r5, #0
 8007ea8:	e7e1      	b.n	8007e6e <floor+0x46>
 8007eaa:	2e33      	cmp	r6, #51	; 0x33
 8007eac:	dd0b      	ble.n	8007ec6 <floor+0x9e>
 8007eae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007eb2:	d104      	bne.n	8007ebe <floor+0x96>
 8007eb4:	ee10 2a10 	vmov	r2, s0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	f7f8 f997 	bl	80001ec <__adddf3>
 8007ebe:	ec41 0b10 	vmov	d0, r0, r1
 8007ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007eca:	f04f 37ff 	mov.w	r7, #4294967295
 8007ece:	40df      	lsrs	r7, r3
 8007ed0:	4238      	tst	r0, r7
 8007ed2:	d0f4      	beq.n	8007ebe <floor+0x96>
 8007ed4:	a310      	add	r3, pc, #64	; (adr r3, 8007f18 <floor+0xf0>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 f987 	bl	80001ec <__adddf3>
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f7f8 fdc9 	bl	8000a78 <__aeabi_dcmpgt>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d0c1      	beq.n	8007e6e <floor+0x46>
 8007eea:	2c00      	cmp	r4, #0
 8007eec:	da0a      	bge.n	8007f04 <floor+0xdc>
 8007eee:	2e14      	cmp	r6, #20
 8007ef0:	d101      	bne.n	8007ef6 <floor+0xce>
 8007ef2:	3401      	adds	r4, #1
 8007ef4:	e006      	b.n	8007f04 <floor+0xdc>
 8007ef6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007efa:	2301      	movs	r3, #1
 8007efc:	40b3      	lsls	r3, r6
 8007efe:	441d      	add	r5, r3
 8007f00:	45a8      	cmp	r8, r5
 8007f02:	d8f6      	bhi.n	8007ef2 <floor+0xca>
 8007f04:	ea25 0507 	bic.w	r5, r5, r7
 8007f08:	e7b1      	b.n	8007e6e <floor+0x46>
 8007f0a:	2500      	movs	r5, #0
 8007f0c:	462c      	mov	r4, r5
 8007f0e:	e7ae      	b.n	8007e6e <floor+0x46>
 8007f10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f14:	e7ab      	b.n	8007e6e <floor+0x46>
 8007f16:	bf00      	nop
 8007f18:	8800759c 	.word	0x8800759c
 8007f1c:	7e37e43c 	.word	0x7e37e43c
 8007f20:	bff00000 	.word	0xbff00000
 8007f24:	000fffff 	.word	0x000fffff

08007f28 <memset>:
 8007f28:	4402      	add	r2, r0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d100      	bne.n	8007f32 <memset+0xa>
 8007f30:	4770      	bx	lr
 8007f32:	f803 1b01 	strb.w	r1, [r3], #1
 8007f36:	e7f9      	b.n	8007f2c <memset+0x4>

08007f38 <__errno>:
 8007f38:	4b01      	ldr	r3, [pc, #4]	; (8007f40 <__errno+0x8>)
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20000074 	.word	0x20000074

08007f44 <__libc_init_array>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	4d0d      	ldr	r5, [pc, #52]	; (8007f7c <__libc_init_array+0x38>)
 8007f48:	4c0d      	ldr	r4, [pc, #52]	; (8007f80 <__libc_init_array+0x3c>)
 8007f4a:	1b64      	subs	r4, r4, r5
 8007f4c:	10a4      	asrs	r4, r4, #2
 8007f4e:	2600      	movs	r6, #0
 8007f50:	42a6      	cmp	r6, r4
 8007f52:	d109      	bne.n	8007f68 <__libc_init_array+0x24>
 8007f54:	4d0b      	ldr	r5, [pc, #44]	; (8007f84 <__libc_init_array+0x40>)
 8007f56:	4c0c      	ldr	r4, [pc, #48]	; (8007f88 <__libc_init_array+0x44>)
 8007f58:	f000 f826 	bl	8007fa8 <_init>
 8007f5c:	1b64      	subs	r4, r4, r5
 8007f5e:	10a4      	asrs	r4, r4, #2
 8007f60:	2600      	movs	r6, #0
 8007f62:	42a6      	cmp	r6, r4
 8007f64:	d105      	bne.n	8007f72 <__libc_init_array+0x2e>
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
 8007f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6c:	4798      	blx	r3
 8007f6e:	3601      	adds	r6, #1
 8007f70:	e7ee      	b.n	8007f50 <__libc_init_array+0xc>
 8007f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f76:	4798      	blx	r3
 8007f78:	3601      	adds	r6, #1
 8007f7a:	e7f2      	b.n	8007f62 <__libc_init_array+0x1e>
 8007f7c:	08008208 	.word	0x08008208
 8007f80:	08008208 	.word	0x08008208
 8007f84:	08008208 	.word	0x08008208
 8007f88:	0800820c 	.word	0x0800820c

08007f8c <memcpy>:
 8007f8c:	440a      	add	r2, r1
 8007f8e:	4291      	cmp	r1, r2
 8007f90:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f94:	d100      	bne.n	8007f98 <memcpy+0xc>
 8007f96:	4770      	bx	lr
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa2:	4291      	cmp	r1, r2
 8007fa4:	d1f9      	bne.n	8007f9a <memcpy+0xe>
 8007fa6:	bd10      	pop	{r4, pc}

08007fa8 <_init>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	bf00      	nop
 8007fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fae:	bc08      	pop	{r3}
 8007fb0:	469e      	mov	lr, r3
 8007fb2:	4770      	bx	lr

08007fb4 <_fini>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	bf00      	nop
 8007fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fba:	bc08      	pop	{r3}
 8007fbc:	469e      	mov	lr, r3
 8007fbe:	4770      	bx	lr
